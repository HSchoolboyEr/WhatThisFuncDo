movabs rax, 0x6c2e74736f6f622f
push r15
push r14
push r13
push r12
mov r12, rdi
push rbp
push rbx
lea rbx, [rdi + 0x10]
sub rsp, 0x88
mov qword [rdi + 0x10], rax
mov eax, 0x676f
mov qword [rdi], rbx
mov word [rbx + 8], ax
mov byte [rbx + 0xa], 0x2e
mov qword [rdi + 8], 0xb
mov byte [rdi + 0x1b], 0
cmp esi, 2
je 0x8000530
cmp esi, 3
je 0x80003f0
cmp esi, 1
je getuid
mov edx, 6
lea rsi, [0x08000255]
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
add byte [rax], al
add byte [rax], al
mov rbp, qword [r12 + 8]
mov rax, qword [r12]
lea r13, [arg_1h]
cmp rbx, rax
je 0x80008c8
mov rdx, qword [r12 + 0x10]
cmp r13, rdx
ja 0x80002a8
mov byte [rax + rbp], 0x2e
mov rax, qword [r12]
mov qword [r12 + 8], r13
mov byte [rax + rbp + 1], 0
add rsp, 0x88
mov rax, r12
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov r8d, 1
xor ecx, ecx
xor edx, edx
mov rsi, rbp
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEmmPKcm
mov rax, qword [r12]
jmp 0x800027a
nop dword [rax + rax]
call getuid
mov edi, 0x46
mov r14d, eax
call sysconf
mov rbp, rax
test rax, rax
mov eax, 0x10000
cmovle rbp, rax
mov rdi, rbp
call _Znwm
mov r15, rax
mov rdx, rbp
xor esi, esi
mov rdi, rax
call memset
lea r13, [var_50h]
mov rcx, rbp
mov rdx, r15
pxor xmm0, xmm0
lea r8, [var_28h]
mov rsi, r13
mov edi, r14d
mov qword [var_28h], 0
movups xmmword [var_50h], xmm0
movups xmmword [var_60h], xmm0
movups xmmword [var_70h], xmm0
call getpwuid_r
mov r8d, eax
movabs rax, 0x3fffffffffffffff
sub rax, qword [r12 + 8]
test r8d, r8d
jne 0x80006d0
mov rdx, qword [var_28h]
test rdx, rdx
je 0x80006d0
cmp qword [rdx], 0
je 0x80006d0
cmp rax, 4
jbe .LC2
mov edx, 5
lea rsi, [0x08000381]
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
mov rax, qword [var_28h]
mov r14, qword [rax]
mov rdi, r14
call strlen
mov rdx, rax
movabs rax, 0x3fffffffffffffff
sub rax, qword [r12 + 8]
cmp rdx, rax
ja .LC2
mov rsi, r14
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
pxor xmm0, xmm0
xor esi, esi
mov rdi, r15
mov rdx, rbp
movups xmmword [var_50h], xmm0
movups xmmword [var_60h], xmm0
movups xmmword [var_70h], xmm0
call memset
mov rsi, rbp
mov rdi, r15
call _ZdlPvm
jmp 0x800025a
nop
mov edx, 5
lea rsi, [0x080003fc]
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
call getpgrp
mov edx, 0xcccccccd
mov ecx, eax
mov rsi, rcx
imul rcx, rdx
mov r9d, esi
shr rcx, 0x23
lea eax, [rcx + rcx*4]
add eax, eax
sub r9d, eax
add r9d, 0x30
cmp esi, 9
jbe 0x80006a0
mov edi, ecx
imul rdi, rdx
shr rdi, 0x23
lea eax, [rdi + rdi*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
cmp esi, 0x63
jbe 0x80008f0
mov r8d, edi
imul r8, rdx
shr r8, 0x23
lea eax, [r8 + r8*4]
add eax, eax
sub edi, eax
add edi, 0x30
cmp esi, 0x3e7
jbe 0x8000908
mov r11d, r8d
imul r11, rdx
shr r11, 0x23
lea eax, [r11 + r11*4]
add eax, eax
sub r8d, eax
add r8d, 0x30
cmp esi, 0x270f
jbe 0x8000938
mov ebp, r11d
imul rbp, rdx
shr rbp, 0x23
lea eax, [rbp + rbp*4]
add eax, eax
sub r11d, eax
add r11d, 0x30
cmp esi, 0x1869f
jbe 0x8000962
mov r13d, ebp
imul r13, rdx
shr r13, 0x23
lea eax, [r13 + r13*4]
add eax, eax
sub ebp, eax
add ebp, 0x30
cmp esi, 0xf423f
jbe 0x800096f
mov eax, r13d
imul rax, rdx
shr rax, 0x23
lea r10d, [rax + rax*4]
add r10d, r10d
sub r13d, r10d
lea r10, [var_38h]
add r13d, 0x30
mov r14, r10
cmp esi, 0x98967f
ja 0x80009eb
mov byte [r14], r13b
lea rax, [r14 + 1]
mov byte [rax], bpl
add rax, 1
mov byte [rax], r11b
add rax, 1
mov byte [rax], r8b
lea r8, [rax + 1]
jmp 0x8000910
nop dword [rax + rax]
mov edx, 4
lea rsi, [0x0800053c]
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
xor edi, edi
call getsid
mov edx, 0xcccccccd
mov ecx, eax
mov rsi, rcx
imul rcx, rdx
mov r9d, esi
shr rcx, 0x23
lea eax, [rcx + rcx*4]
add eax, eax
sub r9d, eax
add r9d, 0x30
cmp esi, 9
jbe 0x8000670
mov edi, ecx
imul rdi, rdx
shr rdi, 0x23
lea eax, [rdi + rdi*4]
add eax, eax
sub ecx, eax
add ecx, 0x30
cmp esi, 0x63
jbe 0x80008d8
mov r8d, edi
imul r8, rdx
shr r8, 0x23
lea eax, [r8 + r8*4]
add eax, eax
sub edi, eax
add edi, 0x30
cmp esi, 0x3e7
jbe 0x8000920
mov r10d, r8d
imul r10, rdx
shr r10, 0x23
lea eax, [r10 + r10*4]
add eax, eax
sub r8d, eax
add r8d, 0x30
cmp esi, 0x270f
jbe 0x8000948
mov r11d, r10d
imul r11, rdx
shr r11, 0x23
lea eax, [r11 + r11*4]
add eax, eax
sub r10d, eax
add r10d, 0x30
cmp esi, 0x1869f
jbe 0x8000955
mov ebp, r11d
imul rbp, rdx
shr rbp, 0x23
lea eax, [rbp + rbp*4]
add eax, eax
sub r11d, eax
add r11d, 0x30
cmp esi, 0xf423f
jbe 0x800097c
mov eax, ebp
imul rax, rdx
shr rax, 0x23
lea r13d, [rax + rax*4]
add r13d, r13d
sub ebp, r13d
lea r13, [var_50h]
add ebp, 0x30
mov r14, r13
cmp esi, 0x98967f
ja 0x8000989
mov byte [r14], bpl
lea rax, [r14 + 1]
mov byte [rax], r11b
add rax, 1
mov byte [rax], r10b
add rax, 1
mov byte [rax], r8b
lea r8, [rax + 1]
jmp 0x8000928
nop dword [rax]
lea r13, [var_50h]
mov r8, r13
mov byte [r8], r9b
mov rsi, qword [r12 + 8]
add r8, 1
mov rcx, r13
sub r8, r13
xor edx, edx
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
jmp 0x800025a
nop dword [rax]
lea r10, [var_38h]
mov r8, r10
mov byte [r8], r9b
mov rsi, qword [r12 + 8]
add r8, 1
mov rcx, r10
sub r8, r10
xor edx, edx
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
jmp 0x800025a
nop dword [rax]
cmp rax, 3
jbe .LC2
mov edx, 4
lea rsi, [0x080006e6]
mov rdi, r12
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm
lea rax, [var_30h]
mov r9d, r14d
lea rcx, [var_45h]
mov r11d, r14d
mov qword [var_38h], rax
mov eax, 0xcccccccd
imul r9, rax
mov qword [var_30h], rcx
shr r9, 0x23
lea edx, [r9 + r9*4]
add edx, edx
sub r11d, edx
mov rdx, rcx
add r11d, 0x30
cmp r14d, 9
jbe 0x800089a
mov r10d, r9d
imul r10, rax
shr r10, 0x23
lea edx, [r10 + r10*4]
add edx, edx
sub r9d, edx
mov rdx, rcx
add r9d, 0x30
cmp r14d, 0x63
jbe 0x8000886
mov r8d, r10d
imul r8, rax
shr r8, 0x23
lea edx, [r8 + r8*4]
add edx, edx
sub r10d, edx
mov rdx, rcx
add r10d, 0x30
cmp r14d, 0x3e7
jbe 0x8000872
mov esi, r8d
imul rsi, rax
shr rsi, 0x23
lea edx, [rsi + rsi*4]
add edx, edx
sub r8d, edx
mov rdx, rcx
add r8d, 0x30
cmp r14d, 0x270f
jbe 0x800085e
mov edx, esi
imul rdx, rax
shr rdx, 0x23
lea edi, [rdx + rdx*4]
add edi, edi
sub esi, edi
lea edi, [rsi + 0x30]
mov rsi, rcx
mov dword [var_8h_2], edi
cmp r14d, 0x1869f
jbe 0x8000846
mov edi, edx
imul rdi, rax
shr rdi, 0x23
lea esi, [rdi + rdi*4]
add esi, esi
sub edx, esi
add edx, 0x30
mov dword [var_ch], edx
mov rdx, rcx
cmp r14d, 0xf423f
jbe 0x800082e
mov edx, edi
imul rax, rdx
mov edx, edi
shr rax, 0x23
lea eax, [rax + rax*4]
add eax, eax
sub edx, eax
lea eax, [rdx + 0x30]
mov dword [var_10h], eax
mov rax, rcx
cmp r14d, 0x98967f
ja 0x8000a4d
movzx edi, byte [var_10h]
mov byte [rax], dil
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rdx, qword [rax]
movzx eax, byte [var_ch]
mov byte [rdx], al
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rsi, qword [rax]
movzx eax, byte [var_8h_2]
mov byte [rsi], al
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rdx, qword [rax]
mov byte [rdx], r8b
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rdx, qword [rax]
mov byte [rdx], r10b
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rdx, qword [rax]
mov byte [rdx], r9b
mov rax, qword [var_38h]
add qword [rax], 1
mov rax, qword [var_38h]
mov rdx, qword [rax]
mov byte [rdx], r11b
mov rax, qword [var_38h]
xor edx, edx
mov rdi, r12
add qword [rax], 1
mov r8, qword [var_30h]
mov rsi, qword [r12 + 8]
sub r8, rcx
call _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm
jmp 0x80003bf
nop word [rax + rax]
mov edx, 0xf
jmp 0x8000275
nop word [rax + rax]
lea r13, [var_50h]
mov r8, r13
mov byte [r8], cl
add r8, 1
jmp 0x8000678
nop dword [rax]
lea r10, [var_38h]
mov r8, r10
mov byte [r8], cl
add r8, 1
jmp 0x80006a8
nop dword [rax]
lea r10, [var_38h]
mov r8, r10
mov byte [r8], dil
add r8, 1
jmp 0x80008f8
nop dword [rax]
lea r13, [var_50h]
mov r8, r13
mov byte [r8], dil
add r8, 1
jmp 0x80008e0
nop dword [rax]
lea r10, [var_38h]
mov rax, r10
jmp 0x800051c
nop dword [rax]
lea r13, [var_50h]
mov rax, r13
jmp 0x800065d
lea r13, [var_50h]
mov rax, r13
jmp 0x8000656
lea r10, [var_38h]
mov rax, r10
jmp 0x8000515
lea r10, [var_38h]
mov rax, r10
jmp 0x800050e
lea r13, [var_50h]
mov rax, r13
jmp 0x800064f
mov r14d, eax
mov r15d, eax
imul rdx, r14
mov r14, r13
shr rdx, 0x23
lea edx, [rdx + rdx*4]
add edx, edx
sub r15d, edx
add r15d, 0x30
cmp esi, 0x5f5e0ff
jbe 0x80009df
mov r14d, 0xa
xor edx, edx
div r14d
xor edx, edx
div r14d
mov r14, r13
add edx, 0x30
cmp esi, 0x3b9ac9ff
jbe 0x80009d8
add eax, 0x30
lea r14, [var_51h]
mov byte [var_50h], al
mov byte [r14], dl
add r14, 1
mov byte [r14], r15b
add r14, 1
jmp 0x8000648
mov r14d, eax
mov r15d, eax
imul rdx, r14
mov r14, r10
shr rdx, 0x23
lea edx, [rdx + rdx*4]
add edx, edx
sub r15d, edx
add r15d, 0x30
cmp esi, 0x5f5e0ff
jbe 0x8000a41
mov r14d, 0xa
xor edx, edx
div r14d
xor edx, edx
div r14d
mov r14, r10
add edx, 0x30
cmp esi, 0x3b9ac9ff
jbe 0x8000a3a
add eax, 0x30
lea r14, [var_39h]
mov byte [var_38h], al
mov byte [r14], dl
add r14, 1
mov byte [r14], r15b
add r14, 1
jmp 0x8000507
mov esi, 0xa
mov eax, edi
xor edx, edx
mov qword [var_18h], rcx
div esi
mov dword [var_14h], r8d
lea rdi, [var_38h]
mov esi, eax
call method bool boost::spirit::karma::int_inserter<10u, boost::spirit::unused_type, boost::spirit::unused_type>::call<boost::spirit::karma::detail::output_iterator<char*, mpl_::int_<0>, boost::spirit::unused_type>, unsigned int>(boost::spirit::karma::detail::output_iterator<char*, mpl_::int_<0>, boost::spirit::unused_type>&, unsigned int, unsigned int&, int) [clone .isra.0]
mov rax, qword [var_38h]
mov rcx, qword [var_18h]
mov r8d, dword [var_14h]
mov rax, qword [rax]
jmp 0x8000815
lea rdi, [0x08000a8c]
call _ZSt20__throw_length_errorPKc
add byte [rax], al
add byte [rax], al
lea rdi, [0x08000a98]
call _ZSt20__throw_length_errorPKc
lea rdi, [0x08000aa4]
call _ZSt20__throw_length_errorPKc
mov r13, rax
jmp .text.unlikely
mov r13, rax
jmp .text.unlikely
mov rdi, rax
jmp .text.unlikely
nop
nop word cs:[rax + rax]
nop dword [rax]
