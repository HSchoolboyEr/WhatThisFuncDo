push rbp
mov rcx, rsi
mov rbp, rsp
push r15
push r14
push r13
mov r13, rdx
push r12
mov r12, rdi
push rbx
and rsp, 0xffffffffffffffe0
sub rsp, 0x1900
mov qword [var_b0h], rsi
cmp rsi, 0x1f
jbe 0x8000f43
lea rax, [var_28h]
and rax, 0xffffffffffffffe0
lea r15, [rax - 0x1820]
lea rsi, [rax - 0x181e]
lea r14, [rax - 0x20]
mov rax, qword [rdx]
mov rax, qword [rax - 0x18]
mov eax, dword [rdx + rax + 0x18]
lea rdx, [0x08000c83]
shr eax, 0xe
and eax, 1
shl rax, 4
vbroadcasti128 ymm7, xmmword [rdx + rax]
lea rdi, [rax + rdx]
mov qword [var_a0h_2], rdi
vmovdqa ymmword [rsp + 0x20], ymm7
cmp rcx, 0x20
je 0x8000f56
mov rbx, r12
neg rbx
and ebx, 0x1f
jne 0x8000e5d
mov rax, qword [var_b0h_2]
mov rdi, rax
and edi, 0x3ff
shr rax, 0xa
mov qword [var_a8h], rdi
je 0x8000e3c
vmovdqa ymm7, ymmword [var_20h]
shl rax, 0xa
lea rdx, [r12 + 0x400]
mov qword [var_18h], rax
add rax, rdx
vmovdqa ymmword [rsp + 0x80], ymm7
vmovdqa ymm7, ymmword [0x08000d0c]
mov qword [var_b8h], rax
vmovdqa ymmword [rsp + 0x60], ymm7
vmovdqa ymm7, ymmword [0x08000d22]
vmovdqa ymmword [rsp + 0x40], ymm7
nop dword [rax + rax]
vmovdqa ymm4, ymmword [var_60h]
vmovdqa ymm2, ymmword [var_40h]
mov rax, r15
lea rbx, [rdx - 0x400]
vmovdqa ymm3, ymmword [var_b0h]
nop
vmovdqa ymm7, ymmword [rbx]
vpand ymm1, ymm4, ymmword [rbx]
add rbx, 0x20
add rax, 0xc0
vpsrlw ymm0, ymm7, 4
vpshufb ymm1, ymm3, ymm1
vpand ymm0, ymm4, ymm0
vpshufb ymm0, ymm3, ymm0
vpunpcklbw ymm6, ymm0, ymm1
vpunpckhbw ymm0, ymm0, ymm1
vpshufb ymm5, ymm6, ymmword [0x08000d86]
vpshufb ymm1, ymm0, ymmword [0x08000d8f]
vpalignr ymm0, ymm0, ymm6, 0xa
vpmaxub ymm5, ymm5, ymm2
vpmaxub ymm1, ymm1, ymm2
vpshufb ymm0, ymm0, ymmword [0x08000da6]
vpmovzxbw ymm6, xmm5
vextracti128 xmm5, ymm5, 1
vpmaxub ymm0, ymm0, ymm2
vmovdqa ymmword [rax - 0xc0], ymm6
vpmovzxbw ymm5, xmm5
vpmovzxbw ymm6, xmm0
vextracti128 xmm0, ymm0, 1
vmovdqa ymmword [rax - 0x60], ymm5
vmovdqa ymmword [rax - 0xa0], ymm6
vpmovzxbw ymm6, xmm1
vextracti128 xmm1, ymm1, 1
vpmovzxbw ymm0, xmm0
vpmovzxbw ymm1, xmm1
vmovdqa ymmword [rax - 0x80], ymm6
vmovdqa ymmword [rax - 0x40], ymm0
vmovdqa ymmword [rax - 0x20], ymm1
cmp rbx, rdx
jne 0x8000d50
vzeroall
mov rdx, r14
mov rdi, r13
sub rdx, rsi
sar rdx, 1
call method std::basic_ostream<char16_t, std::char_traits<char16_t> >::write(char16_t const*, long) [clone .isra.0]
lea rdx, [rbx + 0x400]
cmp qword [var_b8h], rdx
je 0x8000e34
mov rsi, r15
jmp 0x8000d30
add r12, qword [var_18h]
mov rsi, r15
cmp qword [var_a8h], 0
jne 0x8000f65
vzeroupper
lea rsp, [var_28h]
pop rbx
pop r12
pop r13
pop r14
pop r15
pop rbp
ret
lea rdx, [rbx + rbx*2 - 1]
vmovdqu xmm4, xmmword [r12]
vinserti128 ymm1, ymm4, xmmword [r12 + 0x10], 1
vmovdqa ymm4, ymmword [0x08000e78]
vpsrlw ymm0, ymm1, 4
vpand ymm0, ymm0, ymm4
vpand ymm1, ymm1, ymm4
vpshufb ymm1, ymm7, ymm1
vpshufb ymm0, ymm7, ymm0
vmovdqa ymm7, ymmword [0x08000e97]
vpunpcklbw ymm3, ymm0, ymm1
vpunpckhbw ymm0, ymm0, ymm1
vpshufb ymm2, ymm3, ymmword [0x08000ea8]
vpshufb ymm1, ymm0, ymmword [0x08000eb1]
vpalignr ymm0, ymm0, ymm3, 0xa
vpmaxub ymm2, ymm2, ymm7
vpmaxub ymm1, ymm1, ymm7
vpshufb ymm0, ymm0, ymmword [0x08000ec8]
vpmovzxbw ymm3, xmm2
vextracti128 xmm2, ymm2, 1
vpmaxub ymm0, ymm0, ymm7
vmovdqa ymmword [r15], ymm3
vpmovzxbw ymm2, xmm2
vpmovzxbw ymm3, xmm0
vextracti128 xmm0, ymm0, 1
vmovdqa ymmword [r15 + 0x60], ymm2
vpmovzxbw ymm0, xmm0
vmovdqa ymmword [r15 + 0x20], ymm3
vpmovzxbw ymm3, xmm1
vmovdqa ymmword [r15 + 0x80], ymm0
vextracti128 xmm0, ymm1, 1
vpmovzxbw ymm0, xmm0
vmovdqa ymmword [r15 + 0x40], ymm3
vmovdqa ymmword [r15 + 0xa0], ymm0
vzeroall
mov rdi, r13
add r12, rbx
call method std::basic_ostream<char16_t, std::char_traits<char16_t> >::write(char16_t const*, long) [clone .isra.0]
sub qword [var_b0h_2], rbx
mov rsi, r15
jmp 0x8000cbe
lea rsp, [var_28h]
pop rbx
pop r12
pop r13
pop r14
pop r15
pop rbp
jmp _ZN5boost3log12v2s_mt_posix3aux17dump_data_genericIDsEEvPKvmRSt13basic_ostreamIT_St11char_traitsIS7_EE
mov ebx, 0x20
mov edx, 0x5f
jmp 0x8000e62
test qword [var_b0h_2], 0x3f0
je 0x80010d9
mov rcx, qword [var_a8h]
vmovdqa xmm2, xmmword [var_20h]
mov rax, r15
mov rdx, r12
vmovdqa xmm4, xmmword [0x08000f93]
vmovdqa xmm3, xmmword [0x08000f9b]
vmovdqa xmm7, xmmword [0x08000fa3]
vmovdqa xmm6, xmmword [0x08000fab]
lea rdi, [r12 + rcx]
vmovdqa xmm5, xmmword [0x08000fb7]
vmovdqa xmm1, xmmword [rdx]
vpand xmm8, xmm4, xmmword [rdx]
mov rcx, rdi
add rdx, 0x10
sub rcx, rdx
add rax, 0x60
vpsrlw xmm0, xmm1, 4
vpshufb xmm8, xmm2, xmm8
vpand xmm0, xmm4, xmm0
vpshufb xmm0, xmm2, xmm0
vpunpcklbw xmm1, xmm0, xmm8
vpunpckhbw xmm0, xmm0, xmm8
vpshufb xmm8, xmm1, xmm7
vpalignr xmm1, xmm0, xmm1, 0xa
vpshufb xmm0, xmm0, xmm5
vpshufb xmm1, xmm1, xmm6
vpmaxub xmm8, xmm8, xmm3
vpmaxub xmm0, xmm0, xmm3
vpmaxub xmm1, xmm1, xmm3
vpmovzxbw ymm8, xmm8
vpmovzxbw ymm0, xmm0
vpmovzxbw ymm1, xmm1
vmovdqa ymmword [rax - 0x60], ymm8
vmovdqa ymmword [rax - 0x40], ymm1
vmovdqa ymmword [rax - 0x20], ymm0
cmp rcx, 0xf
ja 0x8000fb7
mov rax, qword [var_a8h]
sub rax, 0x10
shr rax, 4
add rax, 1
lea rdx, [rax + rax*2]
shl rax, 4
add r12, rax
mov rax, qword [var_b0h_2]
shl rdx, 5
add r15, rdx
and eax, 0xf
mov qword [var_a8h], rax
vzeroall
je 0x80010c3
mov ecx, 1
sub ecx, r12d
movzx eax, byte [r12]
mov edx, 0x20
mov rdi, qword [var_a0h]
add r15, 6
mov word [r15 - 6], dx
mov rdx, rax
and eax, 0xf
shr rdx, 4
movsx ax, byte [rdi + rax]
and edx, 0xf
movsx dx, byte [rdi + rdx]
mov word [r15 - 2], ax
lea eax, [rcx + r12]
add r12, 1
mov word [r15 - 4], dx
cmp qword [var_a8h], rax
ja 0x8001075
mov rdx, r15
mov rdi, r13
sub rdx, rsi
sar rdx, 1
call method std::basic_ostream<char16_t, std::char_traits<char16_t> >::write(char16_t const*, long) [clone .isra.0]
jmp 0x8000e4e
vzeroall
jmp 0x800106d
