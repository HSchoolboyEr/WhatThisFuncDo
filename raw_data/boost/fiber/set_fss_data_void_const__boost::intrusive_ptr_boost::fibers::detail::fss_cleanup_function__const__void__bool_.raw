push r14
push r13
mov r13, rdx
push r12
mov r12, rdi
push rbp
push rbx
mov rbx, rcx
sub rsp, 0x20
mov rbp, qword [rdi + 0x50]
test rbp, rbp
je 0x8001b20
lea r14, [rdi + 0x48]
mov rcx, r14
nop dword [rax]
mov rdx, qword [arg_10h]
mov rax, qword [arg_18h]
cmp rsi, qword [arg_20h]
ja 0x8001a47
test rdx, rdx
je 0x8001a5b
mov rcx, rbp
mov rbp, rdx
mov rdx, qword [arg_10h]
mov rax, qword [arg_18h]
cmp rsi, qword [arg_20h]
jbe 0x8001a2e
test rax, rax
je 0x8001a58
mov rbp, rax
jmp 0x8001a20
nop dword [rax]
mov rbp, rcx
cmp r14, rbp
je 0x8001b20
cmp rsi, qword [arg_20h]
jb 0x8001b20
test r8b, r8b
jne 0x8001ac0
test rbx, rbx
je 0x8001ad3
mov rax, qword [r13]
test rax, rax
je 0x8001a87
lock add qword [rax + 8], 1
mov rdi, qword [arg_30h]
movq xmm0, rbx
movq xmm1, rax
punpcklqdq xmm0, xmm1
movups xmmword [arg_28h], xmm0
test rdi, rdi
je 0x8001aae
lock sub qword [rdi + 8], 1
je 0x8001b78
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax + rax]
mov rdi, qword [arg_30h]
mov rsi, qword [arg_28h]
mov rax, qword [rdi]
call qword [rax + 0x10]
test rbx, rbx
jne 0x8001a78
mov rdi, rbp
mov rsi, r14
call _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_
add byte [rax], al
add byte [rax], al
mov rdi, qword [rax + 0x30]
mov rbp, rax
test rdi, rdi
je 0x8001af6
lock sub qword [rdi + 8], 1
je 0x8001b8d
mov rdi, rbp
mov esi, 0x38
call _ZdlPvm
sub qword [r12 + 0x68], 1
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop word cs:[rax + rax]
mov rax, qword [r13]
test rax, rax
je 0x8001b2f
lock add qword [rax + 8], 1
movq xmm0, rbx
movq xmm2, rax
mov qword [rsp], rsi
lea rdi, [r12 + 0x40]
punpcklqdq xmm0, xmm2
mov rsi, rsp
movups xmmword [arg_8h], xmm0
call _ZNSt8_Rb_treeImSt4pairIKmN5boost6fibers7context8fss_dataEESt10_Select1stIS6_ESt4lessImESaIS6_EE17_M_emplace_uniqueIJS0_ImS5_EEEES0_ISt17_Rb_tree_iteratorIS6_EbEDpOT_
mov rdi, qword [arg_10h]
test rdi, rdi
je 0x8001aae
lock sub qword [rdi + 8], 1
jne 0x8001aae
mov rax, qword [rdi]
call qword [rax + 8]
jmp 0x8001aae
mov rax, qword [rdi]
mov rax, qword [rax + 8]
add rsp, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
jmp rax
mov rax, qword [rdi]
call qword [rax + 8]
jmp 0x8001af6
