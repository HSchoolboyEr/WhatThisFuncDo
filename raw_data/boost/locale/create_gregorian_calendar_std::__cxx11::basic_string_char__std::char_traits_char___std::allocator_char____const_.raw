push r15
push r14
push r13
push r12
push rbp
push rbx
mov rbx, rdi
mov edi, 0xb0
sub rsp, 0x88
call _Znwm
mov rbp, qword [rbx]
mov r12, rax
lea rax, [0x0800024b]
mov qword [r12], rax
lea rax, [r12 + 0xa0]
mov qword [r12 + 0x90], rax
mov qword [r12 + 0x98], 0
mov byte [r12 + 0xa0], 0
cmp byte [rbp], 0x4d
mov qword [var_8h], rax
jne 0x8000289
cmp byte [arg_1h], 0x56
je 0x8000360
mov ebx, 0x17
lea r14, [0x08000295]
nop dword [rax]
test rbx, rbx
jle 0x80002ca
mov r13, rbx
mov rsi, rbp
sar r13, 1
lea r15, [r14 + r13*8]
mov rdi, qword [r15]
call strcmp
test eax, eax
jns 0x8000358
sub rbx, r13
lea r14, [r15 + 8]
sub rbx, 1
test rbx, rbx
jg 0x800029d
lea rax, [0x080002d1]
cmp r14, rax
je 0x80002f2
mov rsi, qword [r14]
mov rdi, rbp
call strcmp
mov r9d, eax
mov eax, 6
test r9d, r9d
jns 0x800036f
mov ebx, 0x23
lea r13, [0x080002fe]
test rbx, rbx
jle 0x8000331
mov r14, rbx
mov rsi, rbp
sar r14, 1
lea r15, [r13 + r14*8]
mov rdi, qword [r15]
call strcmp
test eax, eax
jns 0x8000430
sub rbx, r14
lea r13, [r15 + 8]
sub rbx, 1
test rbx, rbx
jg 0x8000303
lea rdx, [0x08000338]
mov eax, 1
cmp r13, rdx
je 0x800036f
mov rsi, qword [r13]
mov rdi, rbp
call strcmp
shr eax, 0x1f
jmp 0x800036f
nop dword [rax + rax]
mov rbx, r13
jmp 0x8000298
cmp byte [arg_2h], 0
mov eax, 5
jne 0x8000289
xor edi, edi
mov dword [r12 + 8], eax
call time
lea rsi, [var_40h]
lea rdi, [var_18h]
mov byte [r12 + 0x89], 1
mov qword [r12 + 0x10], rax
mov rbx, rax
mov dword [r12 + 0x8c], 0
mov qword [var_18h], rax
call localtime_r
test rax, rax
je .text.unlikely
movdqu xmm0, xmmword [rax]
movups xmmword [r12 + 0x18], xmm0
movdqu xmm1, xmmword [rax + 0x10]
movups xmmword [r12 + 0x28], xmm1
movdqu xmm2, xmmword [rax + 0x20]
movups xmmword [r12 + 0x38], xmm2
mov rdx, qword [rax + 0x30]
mov qword [r12 + 0x48], rdx
movdqu xmm3, xmmword [rax]
movups xmmword [r12 + 0x50], xmm3
movdqu xmm4, xmmword [rax + 0x10]
movups xmmword [r12 + 0x60], xmm4
movdqu xmm5, xmmword [rax + 0x20]
movups xmmword [r12 + 0x70], xmm5
mov rax, qword [rax + 0x30]
mov qword [r12 + 0x10], rbx
mov qword [r12 + 0x80], rax
mov rax, r12
mov byte [r12 + 0x88], 1
add rsp, 0x88
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov rbx, r14
jmp 0x80002fe
