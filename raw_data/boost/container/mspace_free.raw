test rsi, rsi
je 0x8007010
push r15
push r14
push r13
push r12
mov r12, rsi
push rbp
lea rbp, [rsi - 0x10]
push rbx
mov rbx, rdi
sub rsp, 8
test byte [rdi + 0x370], 2
jne 0x8006fb8
mov r8, qword [rbx + 0x18]
cmp r8, rbp
ja .text.unlikely
mov rdx, qword [r12 - 8]
mov rcx, rdx
and ecx, 3
cmp rcx, 1
je .text.unlikely
mov rax, rdx
and rax, 0xfffffffffffffff8
and edx, 1
lea rdi, [rbp + rax]
jne 0x8006e80
mov rdx, qword [r12 - 0x10]
sub rbp, rdx
test rcx, rcx
je 0x8007380
add rax, rdx
cmp r8, rbp
ja .text.unlikely
cmp rbp, qword [rbx + 0x20]
je 0x8007140
mov rcx, rdx
mov rsi, qword [arg_18h]
shr rcx, 3
cmp rdx, 0xff
ja 0x8007260
lea r9d, [rcx + rcx + 9]
mov rdx, qword [arg_10h]
lea r9, [rbx + r9*8]
cmp r9, rdx
jne .text.unlikely
cmp rdx, rsi
jne .text.unlikely
mov edx, 0xfffffffe
rol edx, cl
and dword [rbx], edx
nop dword [rax + rax]
cmp rbp, rdi
jae .text.unlikely
mov rdx, qword [rdi + 8]
test dl, 1
je .text.unlikely
test dl, 2
je 0x8006f28
and rdx, 0xfffffffffffffffe
mov qword [rdi + 8], rdx
mov rdx, rax
or rdx, 1
mov qword [arg_8h], rdx
mov qword [rdi], rax
mov rcx, rax
shr rcx, 3
cmp rax, 0xff
ja 0x8007018
lea eax, [rcx + rcx + 9]
mov esi, dword [rbx]
lea rdx, [rbx + rax*8]
mov eax, 1
shl eax, cl
test esi, eax
je 0x8007120
mov rax, qword [rdx + 0x10]
cmp r8, rax
ja .text.unlikely
movq xmm0, rax
movq xmm1, rdx
mov qword [rdx + 0x10], rbp
punpcklqdq xmm0, xmm1
mov qword [rax + 0x18], rbp
movups xmmword [arg_10h], xmm0
test byte [rbx + 0x370], 2
jne 0x8007178
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov r10, qword [rbx + 0x20]
cmp qword [rbx + 0x28], rdi
je 0x80073c0
cmp rdi, r10
je 0x80073f8
and rdx, 0xfffffffffffffff8
mov rsi, qword [rdi + 0x18]
mov rcx, rdx
add rax, rdx
shr rcx, 3
cmp rdx, 0xf8
ja 0x8007198
lea r9d, [rcx + rcx + 9]
mov rdx, qword [rdi + 0x10]
lea r9, [rbx + r9*8]
cmp r9, rdx
jne .text.unlikely
cmp rdx, rsi
jne .text.unlikely
mov edx, 0xfffffffe
rol edx, cl
and dword [rbx], edx
nop word cs:[rax + rax]
mov rdx, rax
or rdx, 1
mov qword [arg_8h], rdx
mov qword [rbp + rax], rax
cmp rbp, r10
jne 0x8006eb5
mov qword [rbx + 8], rax
jmp 0x8006f08
nop word [rax + rax]
lea r15, [rdi + 0x374]
mov eax, 1
xchg dword [r15], eax
xor r13d, r13d
mov r14d, 1
test eax, eax
je 0x8006dde
nop dword [rax + rax]
mov eax, dword [rbx + 0x374]
test eax, eax
jne 0x8006ff8
mov eax, r14d
xchg dword [r15], eax
test eax, eax
je 0x8006dde
add r13d, 1
test r13b, 0x3f
jne 0x8006fe0
call sched_yield
jmp 0x8006fe0
nop dword [rax]
ret
nop dword [rax]
mov rdx, rax
shr rdx, 8
mov ecx, edx
test edx, edx
je 0x8007130
cmp edx, 0xffff
ja 0x80073a8
bsr edx, edx
mov ecx, 0x26
mov rdi, rax
mov esi, 0x1f
xor edx, 0x1f
sub ecx, edx
sub esi, edx
mov edx, 1
shr rdi, cl
mov rcx, rdi
and ecx, 1
lea ecx, [rcx + rsi*2]
mov esi, edx
lea edi, [rcx + 0x4b]
shl esi, cl
shl rdi, 3
mov edx, dword [rbx + 4]
pxor xmm0, xmm0
mov dword [arg_38h], ecx
movups xmmword [arg_20h], xmm0
test edx, esi
je 0x8007320
mov edx, ecx
mov rdi, rax
mov rsi, qword [rbx + rdx*8 + 0x258]
cmp ecx, 0x1f
je 0x80070be
shr ecx, 1
mov edx, ecx
mov ecx, 0x39
sub ecx, edx
shl rdi, cl
jmp 0x80070be
mov rdx, rdi
add rdi, rdi
shr rdx, 0x3f
add rdx, 4
mov rcx, qword [rsi + rdx*8]
test rcx, rcx
je 0x8007350
mov rsi, rcx
mov rdx, qword [rsi + 8]
and rdx, 0xfffffffffffffff8
cmp rdx, rax
jne 0x80070a0
mov rax, qword [rsi + 0x10]
cmp r8, rsi
ja .text.unlikely
cmp r8, rax
ja .text.unlikely
mov qword [rax + 0x18], rbp
movq xmm0, rax
movq xmm2, rsi
mov qword [rsi + 0x10], rbp
punpcklqdq xmm0, xmm2
mov qword [arg_30h], 0
movups xmmword [arg_10h], xmm0
sub qword [rbx + 0x38], 1
jne 0x8006f08
mov rdi, rbx
call sym.release_unused_segments
jmp 0x8006f08
nop dword [rax + rax]
or eax, esi
mov dword [rbx], eax
mov rax, rdx
jmp 0x8006eee
nop dword [rax]
mov esi, 1
mov edi, 0x258
jmp 0x8007068
nop
mov rdx, qword [rdi + 8]
mov rcx, rdx
and ecx, 3
cmp rcx, 3
jne .text.unlikely
and rdx, 0xfffffffffffffffe
mov qword [rbx + 8], rax
mov qword [rdi + 8], rdx
mov rdx, rax
or rdx, 1
mov qword [arg_8h], rdx
mov qword [rdi], rax
jmp 0x8006f08
nop dword [rax + rax]
mov dword [rbx + 0x374], 0
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
mov r11, qword [rdi + 0x30]
cmp rdi, rsi
je 0x8007458
mov rdx, qword [rdi + 0x10]
cmp r8, rdx
ja .text.unlikely
cmp qword [rdx + 0x18], rdi
jne .text.unlikely
cmp qword [rsi + 0x10], rdi
jne .text.unlikely
mov qword [rdx + 0x18], rsi
mov qword [rsi + 0x10], rdx
test r11, r11
je 0x8006f90
mov edx, dword [rdi + 0x38]
lea rcx, [rdx + 0x4a]
cmp qword [rbx + rdx*8 + 0x258], rdi
je 0x8007420
cmp r8, r11
ja .text.unlikely
cmp qword [r11 + 0x20], rdi
je 0x80074f8
mov qword [r11 + 0x28], rsi
test rsi, rsi
je 0x8006f90
cmp r8, rsi
ja .text.unlikely
mov rdx, qword [rdi + 0x20]
mov qword [rsi + 0x30], r11
test rdx, rdx
je 0x8007233
cmp r8, rdx
ja .text.unlikely
mov qword [rsi + 0x20], rdx
mov qword [rdx + 0x30], rsi
mov rdx, qword [rdi + 0x28]
test rdx, rdx
je 0x8006f90
cmp r8, rdx
ja .text.unlikely
mov qword [rsi + 0x28], rdx
mov qword [rdx + 0x30], rsi
jmp 0x8006f90
nop word cs:[rax + rax]
mov r10, qword [arg_30h]
cmp rbp, rsi
je 0x80074a8
mov rdx, qword [arg_10h]
cmp r8, rdx
ja .text.unlikely
cmp rbp, qword [rdx + 0x18]
jne .text.unlikely
cmp rbp, qword [rsi + 0x10]
jne .text.unlikely
mov qword [rdx + 0x18], rsi
mov qword [rsi + 0x10], rdx
test r10, r10
je .text.unlikely
mov edx, dword [arg_38h]
lea rcx, [rdx + 0x4a]
cmp rbp, qword [rbx + rdx*8 + 0x258]
je 0x8007430
cmp r8, r10
ja .text.unlikely
cmp rbp, qword [r10 + 0x20]
je 0x8007501
mov qword [r10 + 0x28], rsi
test rsi, rsi
je .text.unlikely
cmp r8, rsi
ja .text.unlikely
mov rdx, qword [arg_20h]
mov qword [rsi + 0x30], r10
test rdx, rdx
je 0x80072fb
cmp r8, rdx
ja .text.unlikely
mov qword [rsi + 0x20], rdx
mov qword [rdx + 0x30], rsi
mov rdx, qword [arg_28h]
test rdx, rdx
je .text.unlikely
cmp r8, rdx
ja .text.unlikely
mov qword [rsi + 0x28], rdx
mov qword [rdx + 0x30], rsi
jmp 0x8006e80
nop
movq xmm0, rbp
or edx, esi
add rdi, rbx
punpcklqdq xmm0, xmm0
mov dword [rbx + 4], edx
mov qword [rbx + rcx*8 + 0x258], rbp
mov qword [arg_30h], rdi
movups xmmword [arg_10h], xmm0
jmp 0x8007103
nop word cs:[rax + rax]
lea rax, [rsi + rdx*8]
cmp r8, rax
ja .text.unlikely
movq xmm0, rbp
mov qword [rsi + rdx*8], rbp
punpcklqdq xmm0, xmm0
mov qword [arg_30h], rsi
movups xmmword [arg_10h], xmm0
jmp 0x8007103
nop word [rax + rax]
lea r12, [rax + rdx + 0x20]
mov rdi, rbp
mov rsi, r12
call munmap
test eax, eax
jne 0x8006f08
sub qword [rbx + 0x358], r12
jmp 0x8006f08
nop dword [rax]
mov esi, 0x80000000
mov edi, 0x350
mov ecx, 0x1f
jmp 0x8007068
nop dword [rax]
add rax, qword [rbx + 0x10]
mov qword [rbx + 0x28], rbp
mov rdx, rax
mov qword [rbx + 0x10], rax
or rdx, 1
mov qword [arg_8h], rdx
cmp rbp, r10
je 0x8007440
cmp rax, qword [rbx + 0x30]
jbe 0x8006f08
xor esi, esi
mov rdi, rbx
call sym.sys_trim
jmp 0x8006f08
nop dword [rax]
add rax, qword [rbx + 8]
mov qword [rbx + 0x20], rbp
mov rdx, rax
mov qword [rbx + 8], rax
or rdx, 1
mov qword [arg_8h], rdx
mov qword [rbp + rax], rax
jmp 0x8006f08
nop dword [rax]
mov qword [rbx + rcx*8 + 8], rsi
jmp 0x800720c
nop word [rax + rax]
mov qword [rbx + rcx*8 + 8], rsi
jmp 0x80072d4
nop word [rax + rax]
mov qword [rbx + 0x20], 0
mov qword [rbx + 8], 0
jmp 0x80073dc
nop word [rax + rax]
mov rdx, qword [rdi + 0x28]
lea rcx, [rdi + 0x28]
test rdx, rdx
je 0x8007566
nop dword [rax]
mov r9, rcx
mov rsi, rdx
lea rcx, [rdx + 0x28]
mov rdx, qword [rdx + 0x28]
test rdx, rdx
jne 0x8007470
mov rdx, qword [rsi + 0x20]
lea rcx, [rsi + 0x20]
test rdx, rdx
jne 0x8007470
cmp r8, r9
ja .text.unlikely
mov qword [r9], 0
jmp 0x80071ce
nop dword [rax]
mov rdx, qword [arg_28h]
lea rcx, [arg_28h]
test rdx, rdx
je 0x8007578
nop dword [rax]
mov r9, rcx
mov rsi, rdx
lea rcx, [rdx + 0x28]
mov rdx, qword [rdx + 0x28]
test rdx, rdx
jne 0x80074c0
mov rdx, qword [rsi + 0x20]
lea rcx, [rsi + 0x20]
test rdx, rdx
jne 0x80074c0
cmp r8, r9
ja .text.unlikely
mov qword [r9], 0
jmp 0x8007296
nop dword [rax]
mov qword [r11 + 0x20], rsi
jmp 0x8007203
mov qword [r10 + 0x20], rsi
jmp 0x80072cb
cmp r8, rdx
ja .text.unlikely
cmp qword [rdx + 0x18], rdi
jne .text.unlikely
cmp rdx, rsi
je 0x8006f7d
cmp r9, rsi
jne 0x800758a
mov qword [rdx + 0x18], rsi
mov qword [rsi + 0x10], rdx
jmp 0x8006f90
cmp r8, rdx
ja .text.unlikely
cmp rbp, qword [rdx + 0x18]
jne .text.unlikely
cmp rdx, rsi
je 0x8006e6f
cmp r9, rsi
jne 0x80075a0
mov qword [rdx + 0x18], rsi
mov qword [rsi + 0x10], rdx
jmp 0x8006e80
mov rdx, qword [rdi + 0x20]
test rdx, rdx
je 0x80075b8
lea rcx, [rdi + 0x20]
jmp 0x8007470
mov rdx, qword [arg_20h]
test rdx, rdx
je 0x80075f4
lea rcx, [arg_20h]
jmp 0x80074c0
cmp r8, rsi
ja .text.unlikely
cmp qword [rsi + 0x10], rdi
je 0x800752b
jmp .text.unlikely
nop
cmp r8, rsi
ja .text.unlikely
cmp rbp, qword [rsi + 0x10]
je 0x8007559
jmp .text.unlikely
nop dword [rax]
test r11, r11
je 0x8006f90
mov r9d, dword [rdi + 0x38]
xor esi, esi
mov rcx, r9
lea rdx, [r9 + 0x4a]
cmp qword [rbx + r9*8 + 0x258], rdi
jne .text.unlikely
mov qword [rbx + rdx*8 + 8], 0
mov edx, 0xfffffffe
rol edx, cl
and dword [rbx + 4], edx
jmp 0x8006f90
test r10, r10
je .text.unlikely
mov r9d, dword [arg_38h]
xor esi, esi
mov rcx, r9
lea rdx, [r9 + 0x4a]
cmp rbp, qword [rbx + r9*8 + 0x258]
jne .text.unlikely
mov qword [rbx + rdx*8 + 8], 0
mov edx, 0xfffffffe
rol edx, cl
and dword [rbx + 4], edx
jmp 0x8006e80
jmp .text.unlikely
nop word cs:[rax + rax]
