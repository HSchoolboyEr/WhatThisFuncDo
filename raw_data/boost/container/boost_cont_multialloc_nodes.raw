push r15
push r14
push r13
mov r13, rcx
push r12
mov r12, rsi
push rbp
push rbx
sub rsp, 0x28
cmp qword [0x08008a2c], 0
mov qword [rsp], rdi
mov qword [var_8h], rdx
je 0x8008c50
mov ecx, dword [0x08008a41]
test cl, 2
je 0x8008a5f
mov eax, 1
xchg dword [0x08008a51], eax
test eax, eax
jne 0x8008c5a
mov ecx, dword [0x08008a5f]
cmp r12, 0x16
jbe 0x8008c20
lea rbx, [r12 + 0x17]
and rbx, 0xfffffffffffffff0
mov rdi, qword [var_8h]
lea rax, [rdi + 1]
cmp rax, 1
jbe 0x8008a8d
xor eax, eax
cmp qword [rsp], rdi
jb 0x8008c2b
mov rdi, qword [var_8h]
mov eax, 0xffffffff
mov rdx, rdi
or rdx, rbx
cmp rdx, rax
jbe 0x8008aae
mov rax, rdi
mul rbx
jo 0x8008ce6
mov rax, qword [var_8h]
test rax, rax
je 0x8008cf7
cmp rax, 0xffffffffffffffff
cmove rax, qword [rsp]
mov qword [var_8h], rax
mov rax, qword [r13 + 0x10]
mov qword [var_18h], rax
mov eax, ecx
and ecx, 0xfffffffe
and eax, 1
cmp qword [rsp], 0
mov dword [0x08008ae6], ecx
mov dword [var_14h], eax
je 0x8008be6
mov r12, rbx
xor r14d, r14d
or r12, 3
nop word [rax + rax]
mov rbp, qword [rsp]
mov rax, qword [var_8h]
lea rdi, [0x08008b10]
mov r15, r14
sub rbp, r14
cmp rbp, rax
cmova rbp, rax
mov rsi, rbp
add r14, rbp
imul rsi, rbx
sub rsi, 8
call mspace_malloc_lockless
mov r9, rax
test rax, rax
je 0x8008c91
lea rcx, [var_1h]
mov r8, qword [rax - 8]
mov rsi, qword [r13 + 0x10]
lea r15, [rax - 0x10]
mov r11, rcx
mov r10, qword [r13]
imul r11, rbx
and r8, 0xfffffffffffffff8
add qword [0x08008b62], r8
sub r8, r11
test rcx, rcx
je 0x8008c40
mov rdx, rax
mov rax, r15
jmp 0x8008b83
nop word cs:[rax + rax]
mov rdx, rdi
mov qword [rax + 8], r12
add rax, rbx
mov qword [rsi], rdx
lea rdi, [rax + 0x10]
mov rsi, rdx
mov qword [rdx], 0
sub rcx, 1
jne 0x8008b80
mov rsi, r11
lea r10, [rbp + r10 - 1]
lea rdx, [r15 + r11]
sub rsi, rbx
lea rax, [r15 + r11 + 0x10]
add rsi, r9
or r8, 3
add r10, 1
mov qword [rdx + 8], r8
mov qword [rsi], rax
mov qword [rax], 0
mov qword [r13 + 0x10], rax
mov qword [r13], r10
cmp qword [rsp], r14
jne 0x8008b00
mov ecx, dword [0x08008be6]
mov edx, dword [var_14h]
mov eax, 1
test edx, edx
je 0x8008c2b
or ecx, 1
mov dword [0x08008bfc], ecx
and ecx, 2
je 0x8008c30
mov dword [0x08008c0b], 0
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
xor eax, eax
test r12, r12
jne 0x8008ced
and ecx, 2
jne 0x8008c01
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
mov rdx, r15
jmp 0x8008bb8
nop dword [rax + rax]
call sym.init_mparams.isra.0
jmp .bss
xor ebx, ebx
mov ebp, 1
nop dword [rax]
mov eax, dword [0x08008c6e]
test eax, eax
jne 0x8008c82
mov eax, ebp
xchg dword [0x08008c7a], eax
test eax, eax
je .bss
add ebx, 1
test bl, 0x3f
jne 0x8008c68
call sched_yield
jmp 0x8008c68
mov rax, qword [var_18h]
mov rbx, qword [0x08008c9d]
mov rbp, qword [rax]
test r15, r15
je 0x8008ccf
nop dword [rax]
mov rdi, rbp
sub r15, 1
mov rbp, qword [rbp]
mov rax, qword [rdi - 8]
and rax, 0xfffffffffffffff8
sub rbx, rax
mov qword [0x08008cc5], rbx
call sym.mspace_free_lockless.constprop.0
test r15, r15
jne 0x8008ca8
mov esi, dword [var_14h]
mov ecx, dword [0x08008cd9]
test esi, esi
je 0x8008ce6
or ecx, 1
mov dword [0x08008ce6], ecx
xor eax, eax
jmp 0x8008c2b
mov ebx, 0x20
jmp 0x8008a72
xor edx, edx
mov eax, 0x1000
div rbx
xor edx, edx
cmp rbx, 0x1000
seta dl
add rax, rdx
mov qword [var_8h], rax
jmp 0x8008aca
