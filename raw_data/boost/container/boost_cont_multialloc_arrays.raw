push r15
push r14
push r13
mov r13, rdi
push r12
mov r12, rsi
push rbp
mov rbp, rdx
push rbx
mov rbx, rcx
sub rsp, 0x28
cmp qword [0x08008202], 0
mov qword [var_8h], r8
je 0x80084f3
mov esi, dword [0x08008213]
test sil, 2
je 0x8008410
mov eax, 1
xchg dword [0x08008228], eax
test eax, eax
jne 0x800850a
mov esi, dword [0x08008236]
xor eax, eax
test rbp, rbp
je 0x800849c
mov rax, 0xffffffffffffff80
xor edx, edx
div rbp
mov r14, rax
test rbx, rbx
je 0x800843a
cmp rbx, 0xffffffffffffffff
jne 0x800842a
mov rbx, 0xffffffffffffff88
mov eax, esi
and esi, 0xfffffffe
and eax, 1
mov dword [0x08008278], esi
mov dword [var_1ch], eax
test r13, r13
je 0x800854a
xor r15d, r15d
lea r10, [rbx - 8]
mov r11d, 0x20
mov rdx, r15
mov r15, r10
nop dword [rax + rax]
mov rbx, rdx
xor esi, esi
nop dword [rax]
mov rax, qword [r12 + rbx*8]
cmp r14, rax
jb 0x8008448
imul rax, rbp
mov rcx, rax
lea rax, [rax + 0x17]
and rax, 0xfffffffffffffff0
cmp rcx, 0x16
mov rcx, r15
cmovbe rax, r11
sub rcx, rsi
cmp rcx, rax
jb 0x80084c0
add rbx, 1
add rsi, rax
cmp r13, rbx
jne 0x80082a8
sub rsi, 8
lea rdi, [0x080082f2]
mov qword [rsp], rdx
call mspace_malloc_lockless
mov rdx, qword [rsp]
mov r11d, 0x20
test rax, rax
mov r9, rax
je 0x8008448
mov rsi, qword [rax - 8]
lea rcx, [rax - 0x10]
mov rax, qword [var_8h]
mov rax, qword [rax + 0x10]
and rsi, 0xfffffffffffffff8
add qword [0x0800832d], rsi
mov qword [var_10h], rax
mov rax, rbx
sub rax, rdx
add rdx, 1
mov qword [rsp], rax
cmp rdx, rbx
je 0x80084e8
lea rdx, [r12 + rdx*8]
lea r8, [r12 + rbx*8]
mov rdi, r9
jmp 0x800838f
nop word cs:[rax + rax]
add rax, 0x17
add rdx, 8
and rax, 0xfffffffffffffff0
mov r10, rax
sub rsi, rax
add rax, rcx
or r10, 3
mov qword [rcx + 8], r10
lea r10, [rax + 0x10]
mov qword [rdi], r10
cmp r8, rdx
je 0x80083bc
mov rdi, r10
mov rcx, rax
mov rax, qword [rdx]
imul rax, rbp
cmp rax, 0x16
ja 0x8008360
lea r10, [rcx + 0x30]
add rdx, 8
lea rax, [rcx + 0x20]
sub rsi, 0x20
mov qword [rcx + 8], 0x23
mov qword [rdi], r10
cmp r8, rdx
jne 0x8008389
or rsi, 3
cmp qword [rsp], 0
mov qword [rax + 8], rsi
je 0x80083f9
mov rdi, qword [var_10h]
mov rdx, qword [var_8h]
mov rax, qword [rdi]
cmp rdi, qword [rdx + 0x10]
je 0x80084d8
mov rdi, qword [var_10h]
mov qword [rdi], r9
mov rdi, qword [rsp]
mov qword [r10], rax
mov rax, qword [var_8h]
add qword [rax], rdi
cmp r13, rbx
je .bss
mov rdx, rbx
jmp 0x80082a0
nop word [rax + rax]
xor eax, eax
test rbp, rbp
jne 0x8008241
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
xor eax, eax
cmp rbx, r14
ja 0x800849c
imul rbx, rbp
jmp 0x800826a
mov ebx, 0x1000
jmp 0x800826a
nop dword [rax]
mov r15, rdx
test rdx, rdx
je 0x800848c
mov rax, qword [var_8h]
mov rbx, qword [0x0800845c]
sub r15, 1
mov rbp, qword [rax + 8]
nop dword [rax]
mov rdi, rbp
mov rbp, qword [rbp]
mov rax, qword [rdi - 8]
and rax, 0xfffffffffffffff8
sub rbx, rax
mov qword [0x08008481], rbx
call sym.mspace_free_lockless.constprop.0
sub r15, 1
jae 0x8008468
mov ecx, dword [var_1ch]
mov esi, dword [0x08008496]
test ecx, ecx
jne 0x80084fd
xor eax, eax
and esi, 2
je 0x800841b
mov dword [0x080084af], 0
add rsp, 0x28
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
test rsi, rsi
jne 0x80082e7
add rbx, 1
mov rsi, rax
jmp 0x80082e7
nop dword [rax]
mov qword [rdx + 0x10], r10
jmp 0x80083e2
nop dword [rax]
mov r10, r9
mov rax, rcx
jmp 0x80083bc
call sym.init_mparams.isra.0
jmp .bss
or esi, 1
xor eax, eax
mov dword [0x08008508], esi
jmp 0x800849c
xor r15d, r15d
mov r14d, 1
nop dword [rax + rax]
mov eax, dword [0x0800851e]
test eax, eax
jne 0x8008533
mov eax, r14d
xchg dword [0x0800852b], eax
test eax, eax
je .bss
add r15d, 1
test r15b, 0x3f
jne 0x8008518
call sched_yield
jmp 0x8008518
mov esi, dword [0x0800854a]
mov edx, dword [var_1ch]
mov eax, 1
test edx, edx
je 0x800849c
or esi, 1
mov dword [0x08008564], esi
jmp 0x800849c
