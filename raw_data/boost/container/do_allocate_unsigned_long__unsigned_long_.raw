push r15
push r14
push r13
push r12
push rbp
mov rbp, rdi
push rbx
mov rbx, rsi
sub rsp, 8
mov rdi, qword [rdi + 0x28]
mov rax, qword [arg_8h]
test rdi, rdi
je 0x8000820
cmp rbx, rax
ja 0x8000700
cmp rbx, 0x10
mov esi, 0x10
mov ecx, 0x3b
cmovb rbx, rsi
lea rsi, [rbx - 1]
bsr rax, rbx
and rbx, rsi
xor rax, 0x3f
cmp rbx, 1
cdqe
sbb rcx, 0xffffffffffffffff
sub rcx, rax
lea rax, [rcx + rcx*2]
lea rbx, [rdi + rax*8]
mov rax, qword [rbx + 8]
lea r12, [rbx + 8]
test rax, rax
je 0x8000750
cmp rax, r12
je 0x8000750
mov rdx, qword [rax]
mov qword [rbx + 8], rdx
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
mov rdi, qword [arg_10h]
lea r12, [arg_18h]
cmp rbx, 0xffffffffffffffdf
ja .text.unlikely
mov rax, qword [rdi]
add rbx, 0x20
mov edx, 0x10
mov rsi, rbx
call qword [rax + 0x10]
mov rdx, qword [arg_18h]
mov qword [rax + 0x10], rbx
mov qword [rax + 8], r12
mov qword [rax], rdx
mov qword [arg_18h], rax
mov qword [rdx + 8], rax
add rsp, 8
add rax, 0x20
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
mov r14d, 0x10
xor edx, edx
mov r13, qword [rbp]
mov rdi, qword [arg_10h]
shl r14, cl
mov rax, 0xffffffffffffffff
div r14
mov r15, r14
cmp qword [rbx + 0x10], rax
cmovbe rax, qword [rbx + 0x10]
cmp rax, r13
cmova rax, r13
imul r15, rax
mov rbp, rax
cmp r15, 0xffffffffffffffef
ja .text.unlikely
mov rax, qword [rdi]
add r15, 0x10
mov edx, 0x10
mov rsi, r15
call qword [rax + 0x10]
mov rdx, qword [rbx]
xor ecx, ecx
mov qword [rax + 8], r15
mov qword [rax], rdx
mov qword [rbx], rax
add rax, 0x10
mov rdx, rax
test rbp, rbp
je 0x80008a2
nop word [rax + rax]
mov qword [rdx], 0
mov rsi, qword [rbx + 8]
add rcx, 1
mov qword [rdx], rsi
mov qword [rbx + 8], rdx
add rdx, r14
cmp rbp, rcx
jne 0x80007c8
lea rdx, [var_1h]
imul r14, rdx
mov rdx, r13
shr rdx, 1
add rax, r14
cmp rbp, rdx
jbe 0x80008a6
mov qword [rbx + 0x10], r13
test rax, rax
je 0x8000812
cmp r12, rax
jne 0x80006e2
xor eax, eax
jmp 0x80006e9
nop dword [rax]
cmp rax, 0x10
mov edx, 0x10
mov r13d, 0x3c
mov rdi, qword [arg_10h]
cmovb rax, rdx
lea rcx, [rax - 1]
bsr rdx, rax
and rax, rcx
xor rdx, 0x3f
cmp rax, 1
movsxd rdx, edx
mov rax, qword [rdi]
sbb r13, 0xffffffffffffffff
sub r13, rdx
lea rdx, [r13 + r13*2]
lea r12, [rdx*8]
mov edx, 0x10
mov rsi, r12
call qword [rax + 0x10]
pxor xmm0, xmm0
mov qword [arg_28h], rax
mov rdi, rax
lea rdx, [r12 + rax]
nop
mov qword [rax + 0x10], 1
add rax, 0x18
movups xmmword [rax - 0x18], xmm0
cmp rax, rdx
jne 0x8000880
mov qword [arg_30h], r13
mov rax, qword [arg_8h]
jmp 0x8000695
mov rax, qword [rbx + 8]
lea r13, [rbp + rbp]
jmp 0x8000800
