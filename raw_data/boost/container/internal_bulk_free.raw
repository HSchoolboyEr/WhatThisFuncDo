push r15
push r14
push r13
mov r13, rdx
push r12
push rbp
mov rbp, rdi
push rbx
mov rbx, rsi
sub rsp, 8
test byte [rdi + 0x370], 2
jne 0x8004290
lea r12, [rbx + r13*8]
cmp rbx, r12
je 0x800422f
nop dword [rax]
mov rax, qword [rbx]
add rbx, 8
test rax, rax
je 0x800422a
mov rdx, qword [rax - 8]
lea rsi, [rax - 0x10]
mov qword [rbx - 8], 0
mov r8, rdx
and r8, 0xfffffffffffffff8
cmp qword [arg_18h], rsi
ja .text.unlikely
mov rcx, rdx
and ecx, 3
cmp rcx, 1
je .text.unlikely
lea rcx, [rsi + r8]
cmp r12, rbx
je 0x800421f
lea rdi, [rcx + 0x10]
cmp qword [rbx], rdi
je 0x8004260
mov rdx, r8
mov rdi, rbp
call sym.dispose_chunk
cmp r12, rbx
jne 0x80041d0
mov rax, qword [arg_30h]
cmp qword [arg_10h], rax
ja 0x80042f0
test byte [arg_370h], 2
jne 0x80042e0
add rsp, 8
xor eax, eax
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
mov rcx, qword [rcx + 8]
and edx, 1
and rcx, 0xfffffffffffffff8
add r8, rcx
or rdx, r8
or rdx, 2
mov qword [rax - 8], rdx
or qword [rsi + r8 + 8], 1
mov qword [rbx], rax
jmp 0x80041d0
nop word [rax + rax]
lea r15, [rdi + 0x374]
mov eax, 1
xchg dword [r15], eax
xor r12d, r12d
mov r14d, 1
test eax, eax
je 0x80041c4
mov eax, dword [arg_374h]
test eax, eax
jne 0x80042c8
mov eax, r14d
xchg dword [r15], eax
test eax, eax
je 0x80041c4
add r12d, 1
test r12b, 0x3f
jne 0x80042b0
call sched_yield
jmp 0x80042b0
nop dword [rax]
mov dword [arg_374h], 0
jmp 0x800424a
nop
xor esi, esi
mov rdi, rbp
call sym.sys_trim
jmp 0x800423d
