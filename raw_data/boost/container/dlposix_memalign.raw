push r15
push r14
push r13
push r12
push rbp
mov rbp, rdi
mov rdi, rdx
push rbx
sub rsp, 8
cmp rsi, 0x10
je dlmalloc
mov rcx, rsi
mov r8, rsi
mov eax, 0x16
shr rcx, 3
and r8d, 7
cmp rsi, 7
jbe 0x80056e3
lea rdx, [rcx - 1]
and rdx, rcx
or rdx, r8
jne 0x80056e3
mov rax, 0xffffffffffffff80
mov rdx, rax
sub rdx, rsi
cmp rdx, rdi
jb 0x8005703
cmp rsi, 0x20
mov ebx, 0x20
cmovae rbx, rsi
sub rax, rbx
lea rcx, [rbx - 1]
mov rdx, rax
test rcx, rbx
je 0x8005625
cmp rsi, 0x20
jbe 0x8005830
mov eax, 0x20
nop dword [rax]
add rax, rax
cmp rbx, rax
ja 0x8005610
mov rdx, 0xffffffffffffff80
mov rbx, rax
sub rdx, rax
cmp rdi, rdx
jae __errno_location
lea rax, [rdi + 0x17]
mov r13d, 0x20
and rax, 0xfffffffffffffff0
cmp rdi, 0x16
cmova r13, rax
lea rdi, [rbx + r13 + 0x18]
call dlmalloc
mov r14, rax
test rax, rax
je 0x8005703
lea r15, [rax - 0x10]
test byte [0x08005665], 2
jne 0x80057e8
lea rax, [rbx - 1]
test r14, rax
je 0x8005720
mov rdx, rbx
add rax, r14
neg rdx
and rax, rdx
lea r12, [rax - 0x10]
mov rdx, r12
sub rdx, r15
cmp rdx, 0x1f
ja 0x800569d
add r12, rbx
mov rdx, r12
sub rdx, r15
mov rcx, qword [r14 - 8]
lea rbx, [r12 + 0x10]
mov rax, rcx
and rax, 0xfffffffffffffff8
sub rax, rdx
and ecx, 3
jne 0x8005798
add rdx, qword [r14 - 0x10]
mov qword [r12 + 8], rax
mov qword [r12], rdx
jmp 0x800572a
nop dword [rax + rax]
call dlmalloc
mov rbx, rax
test rax, rax
je 0x8005703
mov qword [rbp], rbx
xor eax, eax
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
call __errno_location
mov dword [rax], 0xc
add rsp, 8
mov eax, 0xc
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word [rax + rax]
mov rax, qword [r14 - 8]
mov rbx, r14
mov r12, r15
test al, 3
je 0x800573e
mov rdx, rax
lea rcx, [r13 + 0x20]
and rdx, 0xfffffffffffffff8
cmp rdx, rcx
ja 0x8005758
test byte [0x08005745], 2
je 0x80056dd
mov dword [0x08005751], 0
jmp 0x80056dd
nop dword [rax + rax]
and eax, 1
mov r8, rdx
lea rsi, [r12 + r13]
or rax, r13
sub r8, r13
lea rdi, [0x0800576f]
or rax, 2
mov qword [r12 + 8], rax
mov rax, r8
or rax, 3
mov qword [rsi + 8], rax
or qword [r12 + rdx + 8], 1
mov rdx, r8
call sym.dispose_chunk
jmp 0x800573e
nop dword [rax + rax]
mov rcx, qword [r12 + 8]
mov rsi, r15
lea rdi, [0x080057a7]
and ecx, 1
or rcx, rax
or rcx, 2
mov qword [r12 + 8], rcx
or qword [r12 + rax + 8], 1
mov rax, qword [r14 - 8]
and eax, 1
or rax, rdx
or rax, 2
mov qword [r14 - 8], rax
or qword [r15 + rdx + 8], 1
call sym.dispose_chunk
mov rax, qword [r12 + 8]
jmp 0x800572a
nop dword [rax + rax]
mov eax, 1
xchg dword [0x080057f3], eax
test eax, eax
je 0x800566b
xor r12d, r12d
nop
mov eax, dword [0x08005806]
test eax, eax
jne 0x800581d
mov eax, 1
xchg dword [0x08005815], eax
test eax, eax
je 0x800566b
add r12d, 1
test r12b, 0x3f
jne 0x8005800
call sched_yield
jmp 0x8005800
nop
mov rdx, 0xffffffffffffff60
mov ebx, 0x20
jmp 0x8005625
