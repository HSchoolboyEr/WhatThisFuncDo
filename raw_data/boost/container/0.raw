push r15
push r14
mov r14, rdi
push r13
mov r13, rdx
push r12
mov r12, rcx
push rbp
mov rbp, rsi
push rbx
sub rsp, 0x28
cmp qword [0x08006a72], 0
je 0x8006c40
test r12, r12
je 0x8006c4e
mov r10, r12
test rbp, rbp
je 0x8006bc3
mov qword [rsp], 0
mov rax, qword [r13]
mov rdi, rbp
lea rbx, [rax + 0x17]
and rbx, 0xfffffffffffffff0
cmp rax, 0x16
mov eax, 0x20
cmovbe rbx, rax
mov eax, dword [r14 + 0x370]
imul rdi, rbx
mov r15d, eax
and eax, 0xfffffffe
mov dword [r14 + 0x370], eax
mov rax, qword [rsp]
and r15d, 1
lea rsi, [rax + rdi - 8]
lea rax, [0x08006add]
mov qword [var_10h], rdi
cmp r14, rax
je dlmalloc
mov rdi, r14
call mspace_malloc
mov rdi, rax
test r15d, r15d
je 0x8006b03
or dword [r14 + 0x370], 1
test rdi, rdi
je 0x8006d60
test byte [r14 + 0x370], 2
jne 0x8006cc0
mov rcx, qword [rdi - 8]
xor esi, esi
lea r15, [rdi - 0x10]
and rcx, 0xfffffffffffffff8
mov rax, rcx
sub rax, qword [rsp]
mov qword [var_8h], rcx
lea rdx, [rax - 8]
call memset
test r12, r12
mov rcx, qword [var_8h]
mov r10, r12
mov rdi, rax
je 0x8006d30
mov rdx, rbp
mov qword [r10], rdi
sub rdx, 1
je 0x8006d50
test rbx, rbx
je 0x8006c05
mov rdi, rbx
lea rdx, [r10 + 8]
lea r9, [r10 + rbp*8]
mov rax, r15
or rdi, 3
nop dword [rax]
mov qword [rax + 8], rdi
add rax, rbx
add rdx, 8
lea rsi, [rax + 0x10]
mov qword [rdx - 8], rsi
cmp r9, rdx
jne 0x8006b80
sub rbp, 2
sub rcx, rbx
imul rbp, rbx
add rbx, rbp
sub rcx, rbp
lea rax, [r15 + rbx]
or rcx, 3
mov qword [rax + 8], rcx
test byte [r14 + 0x370], 2
jne 0x8006c80
add rsp, 0x28
mov rax, r10
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
add rax, 0x17
add rbx, 1
and rax, 0xfffffffffffffff0
mov rsi, rax
sub rcx, rax
add rax, r15
or rsi, 3
mov qword [r15 + 8], rsi
lea rsi, [rax + 0x10]
mov qword [r10 + rbx*8], rsi
cmp rbx, rdx
je 0x8006bad
mov r15, rax
mov rax, qword [r13 + rbx*8]
cmp rax, 0x16
ja 0x8006bd8
mov qword [r15 + 8], 0x23
lea rax, [r15 + 0x20]
add rbx, 1
add r15, 0x30
mov qword [r10 + rbx*8], r15
sub rcx, 0x20
cmp rbx, rdx
jne 0x8006c02
jmp 0x8006bad
nop word cs:[rax + rax]
call sym.init_mparams.isra.0
test r12, r12
jne 0x8006a81
test rbp, rbp
je 0x8006c90
lea rax, [rbp*8]
lea rdx, [rax + 0x17]
and rdx, 0xfffffffffffffff0
cmp rax, 0x16
mov eax, 0x20
cmova rax, rdx
mov qword [rsp], rax
jmp 0x8006a95
nop dword [rax]
mov dword [r14 + 0x374], 0
jmp 0x8006bc3
lea rax, [0x08006c97]
cmp r14, rax
je 0x8006d68
add rsp, 0x28
mov rdi, r14
xor esi, esi
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
jmp sym.mspace_malloc
nop dword [rax + rax]
lea rcx, [r14 + 0x374]
mov eax, 1
xchg dword [rcx], eax
test eax, eax
je 0x8006b1a
xor r15d, r15d
nop dword [rax]
mov eax, dword [r14 + 0x374]
test eax, eax
jne 0x8006cfa
mov eax, 1
xchg dword [rcx], eax
test eax, eax
je 0x8006b1a
add r15d, 1
test r15b, 0x3f
jne 0x8006ce0
mov qword [var_18h], rcx
mov qword [var_8h], rdi
call sched_yield
mov rdi, qword [var_8h]
mov rcx, qword [var_18h]
jmp 0x8006ce0
nop
mov rdi, rsi
call dlmalloc
mov rdi, rax
jmp 0x8006af6
mov rsi, qword [var_10h]
sub rcx, rsi
lea rax, [r15 + rsi]
or rcx, 3
lea r10, [rax + 0x10]
mov qword [rax + 8], rcx
mov rcx, rsi
jmp 0x8006b51
mov rax, r15
jmp 0x8006bad
nop dword [rax + rax]
xor r10d, r10d
jmp 0x8006bc3
add rsp, 0x28
xor edi, edi
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
jmp sym.dlmalloc
