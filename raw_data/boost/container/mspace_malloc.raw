push r14
push r13
push r12
push rbp
mov rbp, rsi
push rbx
mov rbx, rdi
test byte [rdi + 0x370], 2
jne 0x8006440
cmp rbp, 0xe8
ja 0x8006498
cmp rbp, 0x16
ja 0x8006318
mov esi, dword [rbx]
mov ecx, 4
mov ebp, 0x20
mov eax, esi
shr eax, cl
test al, 3
je 0x8006335
not eax
and eax, 1
add ecx, eax
lea eax, [rcx + rcx + 9]
lea rdi, [rbx + rax*8]
mov rax, qword [rdi + 0x10]
mov rdx, qword [rax + 0x10]
cmp rdi, rdx
je 0x80065b0
cmp qword [rbx + 0x18], rdx
ja .text.unlikely
cmp qword [rdx + 0x18], rax
jne .text.unlikely
mov qword [rdx + 0x18], rdi
mov qword [rdi + 0x10], rdx
shl ecx, 3
mov edx, ecx
or edx, 3
mov esi, edx
mov qword [rax + 8], rsi
or qword [rax + rcx + 8], 1
add rax, 0x10
test byte [rbx + 0x370], 2
jne 0x8006501
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
add rbp, 0x17
mov esi, dword [rbx]
and rbp, 0xfffffffffffffff0
mov rcx, rbp
mov eax, esi
shr rcx, 3
shr eax, cl
test al, 3
jne 0x80062aa
mov rdx, qword [rbx + 8]
cmp rdx, rbp
jae 0x8006568
test eax, eax
je 0x8006540
mov r8d, 1
shl eax, cl
mov edi, r8d
shl edi, cl
lea r9d, [rdi + rdi]
mov edi, r9d
neg edi
or edi, r9d
and eax, edi
mov ecx, eax
neg ecx
and eax, ecx
xor ecx, ecx
tzcnt ecx, eax
lea eax, [rcx + rcx + 9]
lea r9, [rbx + rax*8]
mov rax, qword [r9 + 0x10]
mov rdi, qword [rax + 0x10]
cmp r9, rdi
je 0x8006620
cmp qword [rbx + 0x18], rdi
ja .text.unlikely
cmp qword [rdi + 0x18], rax
jne .text.unlikely
mov qword [rdi + 0x18], r9
mov qword [r9 + 0x10], rdi
lea edi, [rcx*8]
mov r8, rdi
mov rcx, rdi
add rdi, rax
sub r8, rbp
cmp r8, 0x1f
jbe 0x8006630
mov rcx, rbp
add rbp, rax
or rcx, 3
mov qword [rax + 8], rcx
mov rcx, r8
or rcx, 1
mov qword [arg_8h], rcx
mov qword [rdi], r8
test rdx, rdx
je 0x800642f
shr rdx, 3
mov r9, qword [rbx + 0x20]
mov rcx, rdx
lea edx, [rdx + rdx + 9]
lea rdi, [rbx + rdx*8]
mov edx, 1
shl edx, cl
test edx, esi
je 0x8006610
mov rdx, qword [rdi + 0x10]
cmp rdx, qword [rbx + 0x18]
jb .text.unlikely
movq xmm0, rdx
movq xmm1, rdi
mov qword [rdi + 0x10], r9
punpcklqdq xmm0, xmm1
mov qword [rdx + 0x18], r9
movups xmmword [r9 + 0x10], xmm0
mov qword [rbx + 8], r8
mov qword [rbx + 0x20], rbp
jmp 0x80064f0
nop dword [rax]
lea r13, [rdi + 0x374]
mov eax, 1
xchg dword [r13], eax
xor r12d, r12d
mov r14d, 1
test eax, eax
je 0x800627b
nop dword [rax]
mov eax, dword [rbx + 0x374]
test eax, eax
jne 0x8006481
mov eax, r14d
xchg dword [r13], eax
test eax, eax
je 0x800627b
add r12d, 1
test r12b, 0x3f
jne 0x8006468
call sched_yield
jmp 0x8006468
nop word [rax + rax]
cmp rbp, 0xffffffffffffff7f
ja 0x8006518
mov eax, dword [rbx + 4]
add rbp, 0x17
and rbp, 0xfffffffffffffff0
test eax, eax
jne 0x80065f0
mov rdx, qword [rbx + 8]
cmp rdx, rbp
jae 0x8006568
mov rax, qword [rbx + 0x10]
cmp rbp, rax
jae 0x800652d
sub rax, rbp
mov qword [rbx + 0x10], rax
mov rdx, rax
mov rax, qword [rbx + 0x28]
or rdx, 1
lea rcx, [rax + rbp]
or rbp, 3
mov qword [rbx + 0x28], rcx
mov qword [rcx + 8], rdx
mov qword [rax + 8], rbp
add rax, 0x10
test byte [rbx + 0x370], 2
je 0x800630b
mov dword [rbx + 0x374], 0
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
mov rdx, qword [rbx + 8]
mov rbp, 0xffffffffffffffff
cmp rdx, 0xffffffffffffffff
je 0x80065c0
mov rsi, rbp
mov rdi, rbx
call sym.sys_alloc
jmp 0x80062fe
nop dword [rax]
mov edx, dword [rbx + 4]
test edx, edx
je 0x80064c1
mov rsi, rbp
mov rdi, rbx
call sym.tmalloc_small
test rax, rax
jne 0x80062fe
jmp 0x80064b4
nop dword [rax]
mov rax, qword [rbx + 0x20]
mov rcx, rdx
sub rcx, rbp
lea rsi, [rax + rdx]
cmp rcx, 0x1f
jbe 0x8006648
mov rdi, rcx
lea rdx, [rax + rbp]
or rbp, 3
mov qword [rbx + 8], rcx
or rdi, 1
mov qword [rbx + 0x20], rdx
mov qword [rdx + 8], rdi
mov qword [rsi], rcx
mov qword [rax + 8], rbp
jmp 0x80064f0
nop word [rax + rax]
btr esi, ecx
mov dword [rbx], esi
jmp 0x80062e6
nop word [rax + rax]
mov rax, qword [rbx + 0x20]
lea rsi, [rax - 1]
mov qword [rbx + 8], 0
mov qword [rbx + 0x20], 0
mov qword [rax + 8], rdx
or qword [rsi + 8], 1
jmp 0x80064f0
nop word cs:[rax + rax]
mov rsi, rbp
mov rdi, rbx
call sym.tmalloc_large
test rax, rax
jne 0x80062fe
jmp 0x80064b4
nop dword [rax]
or edx, esi
mov dword [rbx], edx
mov rdx, rdi
jmp 0x8006414
nop dword [rax]
shl r8d, cl
not r8d
and esi, r8d
mov dword [rbx], esi
jmp 0x80063a6
or ecx, 3
mov esi, ecx
mov qword [rax + 8], rsi
or qword [rdi + 8], 1
jmp 0x80064f0
nop dword [rax + rax]
or rdx, 3
jmp 0x80065c8
