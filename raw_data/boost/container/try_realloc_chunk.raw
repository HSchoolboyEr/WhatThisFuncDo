push r13
mov r8, rdx
push r12
push rbp
mov rbp, rsi
push rbx
sub rsp, 8
mov rax, qword [rsi + 8]
mov r11, qword [rdi + 0x18]
mov rdx, rax
and rdx, 0xfffffffffffffff8
add rsi, rdx
cmp r11, rbp
ja .text.unlikely
mov r9, rax
and r9d, 3
cmp r9, 1
je .text.unlikely
cmp rbp, rsi
jae .text.unlikely
mov r10, qword [rsi + 8]
test r10b, 1
je .text.unlikely
test r9, r9
je 0x8001680
cmp rdx, r8
jb 0x8001550
sub rdx, r8
mov r12, rbp
cmp rdx, 0x1f
ja 0x80016f8
add rsp, 8
mov rax, r12
pop rbx
pop rbp
pop r12
pop r13
ret
nop
cmp qword [rdi + 0x28], rsi
je 0x8001738
cmp qword [rdi + 0x20], rsi
je 0x8001698
test r10b, 2
jne 0x8001780
and r10, 0xfffffffffffffff8
add rdx, r10
cmp rdx, r8
jb 0x8001780
mov r12, rdx
mov rcx, r10
mov r9, qword [rsi + 0x18]
sub r12, r8
shr rcx, 3
cmp r10, 0xf8
jbe 0x8001790
mov r13, qword [rsi + 0x30]
cmp r9, rsi
je 0x8001820
mov rcx, qword [rsi + 0x10]
cmp r11, rcx
ja .text.unlikely
cmp qword [rcx + 0x18], rsi
jne .text.unlikely
cmp qword [r9 + 0x10], rsi
jne .text.unlikely
mov qword [rcx + 0x18], r9
mov qword [r9 + 0x10], rcx
test r13, r13
je 0x8001650
mov ecx, dword [rsi + 0x38]
lea r10, [rcx + 0x4a]
cmp qword [rdi + rcx*8 + 0x258], rsi
je 0x8001865
cmp r11, r13
ja .text.unlikely
cmp qword [r13 + 0x20], rsi
je 0x800186f
mov qword [r13 + 0x28], r9
test r9, r9
je 0x8001650
cmp r11, r9
ja .text.unlikely
mov rcx, qword [rsi + 0x20]
mov qword [r9 + 0x30], r13
test rcx, rcx
je 0x800162f
cmp r11, rcx
ja .text.unlikely
mov qword [r9 + 0x20], rcx
mov qword [rcx + 0x30], r9
mov rcx, qword [rsi + 0x28]
test rcx, rcx
je 0x8001650
cmp r11, rcx
ja .text.unlikely
mov qword [r9 + 0x28], rcx
mov qword [rcx + 0x30], r9
nop dword [rax]
and eax, 1
lea rcx, [rbp + rdx]
cmp r12, 0x1f
ja 0x80017c0
or rax, rdx
mov r12, rbp
or rax, 2
mov qword [arg_8h], rax
or qword [rcx + 8], 1
jmp 0x8001541
nop word [rax + rax]
add rsp, 8
mov rsi, rbp
mov rdx, r8
pop rbx
pop rbp
pop r12
pop r13
jmp sym.mmap_resize
nop dword [rax]
add rdx, qword [rdi + 8]
xor r12d, r12d
cmp rdx, r8
jb 0x8001541
mov rsi, rdx
lea rcx, [rbp + rdx]
and eax, 1
sub rsi, r8
cmp rsi, 0x1f
jbe 0x80017f0
or rax, r8
lea rdx, [rbp + r8]
mov r12, rbp
or rax, 2
mov qword [arg_8h], rax
mov rax, rsi
or rax, 1
mov qword [rdx + 8], rax
mov qword [rcx], rsi
and qword [rcx + 8], 0xfffffffffffffffe
mov qword [rdi + 8], rsi
mov qword [rdi + 0x20], rdx
jmp 0x8001541
nop dword [rax + rax]
and eax, 1
lea r9, [rbp + r8]
or rax, r8
or rax, 2
mov qword [arg_8h], rax
mov rax, rdx
or rax, 3
mov qword [r9 + 8], rax
or qword [rsi + 8], 1
mov rsi, r9
call sym.dispose_chunk
add rsp, 8
mov rax, r12
pop rbx
pop rbp
pop r12
pop r13
ret
nop dword [rax]
add rdx, qword [rdi + 0x10]
xor r12d, r12d
cmp rdx, r8
jbe 0x8001541
and eax, 1
sub rdx, r8
lea rcx, [rbp + r8]
mov r12, rbp
or rax, r8
or rax, 2
mov qword [arg_8h], rax
mov rax, rdx
or rax, 1
mov qword [rcx + 8], rax
mov qword [rdi + 0x28], rcx
mov qword [rdi + 0x10], rdx
jmp 0x8001541
nop dword [rax]
xor r12d, r12d
jmp 0x8001541
nop dword [rax + rax]
lea ebx, [rcx + rcx + 9]
mov r10, qword [rsi + 0x10]
lea rbx, [rdi + rbx*8]
cmp rbx, r10
jne .text.unlikely
cmp r9, r10
jne .text.unlikely
mov esi, 0xfffffffe
rol esi, cl
and dword [rdi], esi
jmp 0x8001650
nop dword [rax]
or rax, r8
lea rsi, [rbp + r8]
mov rdx, r12
or rax, 2
mov qword [arg_8h], rax
mov rax, r12
mov r12, rbp
or rax, 3
mov qword [rsi + 8], rax
or qword [rcx + 8], 1
call sym.dispose_chunk
jmp 0x8001541
or rdx, rax
mov r12, rbp
or rdx, 2
mov qword [arg_8h], rdx
or qword [rcx + 8], 1
mov qword [rdi + 8], 0
mov qword [rdi + 0x20], 0
jmp 0x8001541
nop dword [rax + rax]
mov rcx, qword [rsi + 0x28]
lea r10, [rsi + 0x28]
test rcx, rcx
je 0x80018a6
nop dword [rax]
mov rbx, r10
mov r9, rcx
lea r10, [rcx + 0x28]
mov rcx, qword [rcx + 0x28]
test rcx, rcx
jne 0x8001830
mov rcx, qword [r9 + 0x20]
lea r10, [r9 + 0x20]
test rcx, rcx
jne 0x8001830
cmp r11, rbx
ja .text.unlikely
mov qword [rbx], 0
jmp 0x80015d2
mov qword [rdi + r10*8 + 8], r9
jmp 0x8001608
mov qword [r13 + 0x20], r9
jmp 0x8001603
cmp r11, r10
ja .text.unlikely
cmp qword [r10 + 0x18], rsi
jne .text.unlikely
cmp r9, r10
je 0x80017ae
cmp rbx, r9
jne 0x80018b8
mov qword [r10 + 0x18], r9
mov qword [r9 + 0x10], r10
jmp 0x8001650
mov rcx, qword [rsi + 0x20]
test rcx, rcx
je 0x80018d0
lea r10, [rsi + 0x20]
jmp 0x8001830
cmp r11, r9
ja .text.unlikely
cmp qword [r9 + 0x10], rsi
je 0x8001899
jmp .text.unlikely
nop dword [rax]
test r13, r13
je 0x8001650
mov ebx, dword [rsi + 0x38]
xor r9d, r9d
mov rcx, rbx
lea r10, [rbx + 0x4a]
cmp qword [rdi + rbx*8 + 0x258], rsi
jne .text.unlikely
mov qword [rdi + r10*8 + 8], 0
mov esi, 0xfffffffe
rol esi, cl
and dword [rdi + 4], esi
jmp 0x8001650
