push r15
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x18
cmp rdx, 0x10
ja .text.unlikely
mov rax, qword [rdi + 0x18]
mov rbx, rdi
mov rbp, rsi
lea rsi, [rax + rdx - 1]
neg rdx
and rsi, rdx
mov rdx, qword [rbx + 0x20]
mov rdi, rsi
sub rdi, rax
lea rcx, [rax + rdx]
sub rcx, rsi
cmp rdi, rdx
mov esi, 0
cmovae rcx, rsi
add rax, rdi
cmp rbp, rcx
jbe 0x80002fc
mov rdx, qword [rbx + 0x28]
mov r13, qword [rbx + 0x10]
cmp rbp, rdx
ja 0x8000320
cmp rdx, 0xffffffffffffffef
ja .text.unlikely
mov rax, qword [r13]
lea r8, [0x0800027c]
add byte [rax], al
add byte [rax], al
lea r12, [rdx + 0x10]
mov rax, qword [rax + 0x10]
cmp rax, r8
jne 0x8000438
mov rax, qword [r13 + 0x18]
mov rcx, qword [r13 + 0x20]
lea rsi, [rax + 0xf]
and rsi, 0xfffffffffffffff0
mov rdi, rsi
sub rdi, rax
cmp rdi, rcx
jae 0x8000350
lea r9, [rax + rcx]
sub r9, rsi
cmp r12, r9
ja 0x8000350
add rax, rdi
sub rcx, r12
lea rsi, [rax + r12]
sub rcx, rdi
mov qword [r13 + 0x18], rsi
mov qword [r13 + 0x20], rcx
mov rcx, qword [rbx + 8]
mov qword [rax + 8], r12
mov rsi, 0xffffffffffffffff
mov qword [rax], rcx
lea rcx, [rdx + rdx]
mov qword [rbx + 8], rax
add rax, 0x10
test rdx, rdx
cmovs rcx, rsi
xor edi, edi
mov qword [rbx + 0x28], rcx
sub rdx, rbp
lea rcx, [rax + rbp]
sub rdx, rdi
mov qword [rbx + 0x18], rcx
mov qword [rbx + 0x20], rdx
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
lea rax, [var_1h]
test rax, rbp
je 0x8000390
test rbp, rbp
js 0x8000390
bsr rax, rbp
mov ecx, 0x40
mov edx, 1
xor rax, 0x3f
sub ecx, eax
shl rdx, cl
mov qword [rbx + 0x28], rdx
jmp 0x8000271
nop
mov rcx, qword [r13 + 0x28]
mov r14, qword [r13 + 0x10]
cmp r12, rcx
jbe 0x80003a7
add rdx, 0xf
test rdx, r12
je 0x80003a0
test r12, r12
js 0x80003a0
bsr rax, r12
mov ecx, 0x40
xor rax, 0x3f
sub ecx, eax
mov eax, 1
shl rax, cl
mov qword [r13 + 0x28], rax
mov rcx, rax
jmp 0x80003b1
nop dword [rax + rax]
mov qword [rbx + 0x28], rbp
mov rdx, rbp
jmp 0x8000267
nop dword [rax]
mov qword [r13 + 0x28], r12
mov rcx, r12
cmp rcx, 0xffffffffffffffef
ja .text.unlikely
mov rax, qword [r14]
lea r15, [rcx + 0x10]
mov rax, qword [rax + 0x10]
cmp rax, r8
jne 0x80004f8
mov rax, qword [r14 + 0x18]
mov rdx, qword [r14 + 0x20]
lea rsi, [rax + 0xf]
and rsi, 0xfffffffffffffff0
mov rdi, rsi
sub rdi, rax
cmp rdi, rdx
jae 0x8000450
lea r8, [rax + rdx]
sub r8, rsi
cmp r15, r8
ja 0x8000450
add rax, rdi
sub rdx, r15
lea rsi, [rax + r15]
sub rdx, rdi
mov qword [r14 + 0x18], rsi
mov qword [r14 + 0x20], rdx
mov rdx, qword [r13 + 8]
mov qword [rax + 8], r15
mov rsi, 0xffffffffffffffff
mov qword [rax], rdx
lea rdx, [rcx + rcx]
mov qword [r13 + 8], rax
add rax, 0x10
test rcx, rcx
cmovs rdx, rsi
xor edi, edi
mov qword [r13 + 0x28], rdx
mov rdx, qword [rbx + 0x28]
jmp 0x80002bf
nop dword [rax]
mov edx, 0x10
mov rsi, r12
mov rdi, r13
call rax
mov rdx, qword [rbx + 0x28]
jmp 0x80002d1
nop
mov rax, qword [r14 + 0x28]
mov rdi, qword [r14 + 0x10]
cmp r15, rax
jbe 0x8000497
add rcx, 0xf
test rcx, r15
je 0x8000490
test r15, r15
js 0x8000490
bsr rax, r15
mov ecx, 0x40
xor rax, 0x3f
sub ecx, eax
mov eax, 1
shl rax, cl
mov qword [r14 + 0x28], rax
jmp 0x80004a1
nop dword [rax + rax]
mov qword [r14 + 0x28], r15
mov rax, r15
cmp rax, 0xffffffffffffffef
ja .text.unlikely
lea rcx, [rax + 0x10]
mov rax, qword [rdi]
mov edx, 0x10
mov rsi, rcx
mov qword [var_8h], rcx
call qword [rax + 0x10]
mov rdx, qword [r14 + 8]
mov rcx, qword [var_8h]
mov rsi, 0xffffffffffffffff
mov qword [rax], rdx
mov rdx, qword [r14 + 0x28]
mov qword [rax + 8], rcx
mov qword [r14 + 8], rax
lea rcx, [rdx + rdx]
add rax, 0x10
test rdx, rdx
cmovs rcx, rsi
xor edi, edi
mov qword [r14 + 0x28], rcx
mov rcx, qword [r13 + 0x28]
jmp 0x80003ef
nop dword [rax]
mov edx, 0x10
mov rsi, r15
mov rdi, r14
call rax
mov rcx, qword [r13 + 0x28]
jmp 0x8000401
