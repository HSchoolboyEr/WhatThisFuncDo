push r15
push r14
push r13
push r12
mov r12, rdi
push rbp
push rbx
mov rbx, rsi
sub rsp, 0x18
mov r14, qword [rdi + 8]
cmp r14, qword [rdi + 0x10]
je 0x80005c8
movzx eax, byte [rsi]
add r14, 0x38
mov byte [r14 - 0x38], al
mov eax, dword [rsi + 4]
mov dword [r14 - 0x34], eax
mov rax, qword [rsi + 8]
mov qword [r14 - 0x30], rax
mov rax, qword [rsi + 0x10]
mov qword [r14 - 0x28], rax
mov rax, qword [rsi + 0x18]
mov qword [rsi + 0x18], 0
mov qword [r14 - 0x20], rax
mov rax, qword [rsi + 0x20]
mov qword [rsi + 0x10], 0
mov qword [r14 - 0x18], rax
mov rax, qword [rsi + 0x28]
mov qword [rsi + 0x28], 0
mov qword [r14 - 0x10], rax
movzx eax, byte [rsi + 0x30]
mov qword [rsi + 0x20], 0
mov byte [r14 - 8], al
mov qword [rdi + 8], r14
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
movabs rcx, 0x6db6db6db6db6db7
mov r15, qword [rdi]
mov rbp, r14
movabs rsi, 0x249249249249249
sub rbp, r15
mov rax, rbp
sar rax, 3
imul rax, rcx
cmp rax, rsi
je .LC0
test rax, rax
mov ecx, 1
cmovne rcx, rax
add rax, rcx
jb 0x80007b7
test rax, rax
jne 0x8000778
mov qword [var_8h], 0
mov r13d, 0x38
mov qword [rsp], 0
mov rdx, qword [rsp]
movzx ecx, byte [rbx]
pxor xmm0, xmm0
lea rax, [rdx + rbp]
mov byte [rax], cl
mov ecx, dword [rbx + 4]
mov dword [rax + 4], ecx
mov rcx, qword [rbx + 8]
mov qword [rax + 8], rcx
mov rcx, qword [rbx + 0x10]
mov qword [rax + 0x10], rcx
mov rcx, qword [rbx + 0x18]
movups xmmword [rbx + 0x10], xmm0
mov qword [rax + 0x18], rcx
mov rcx, qword [rbx + 0x20]
mov qword [rax + 0x20], rcx
mov rcx, qword [rbx + 0x28]
movups xmmword [rbx + 0x20], xmm0
mov qword [rax + 0x28], rcx
movzx ecx, byte [rbx + 0x30]
mov byte [rax + 0x30], cl
cmp r14, r15
je 0x8000734
mov rbp, rdx
mov rbx, r15
jmp 0x80006a4
nop dword [rax]
add rbx, 0x38
lea rax, [arg_38h]
cmp r14, rbx
je 0x8000730
mov rbp, rax
movzx eax, byte [rbx]
pxor xmm0, xmm0
mov byte [rbp], al
mov eax, dword [rbx + 4]
mov dword [arg_4h], eax
mov rax, qword [rbx + 8]
mov qword [arg_8h], rax
mov rax, qword [rbx + 0x10]
mov qword [arg_10h], rax
mov rax, qword [rbx + 0x18]
mov qword [arg_18h], rax
mov rax, qword [rbx + 0x20]
movups xmmword [rbx + 0x10], xmm0
mov qword [arg_20h], rax
mov rax, qword [rbx + 0x28]
mov qword [arg_28h], rax
movzx eax, byte [rbx + 0x30]
mov r13, qword [rbx + 0x18]
mov byte [arg_30h], al
test r13, r13
je 0x8000690
lock sub dword [r13 + 8], 1
jne 0x8000690
mov rax, qword [r13]
mov rdi, r13
call qword [rax + 0x10]
lock sub dword [r13 + 0xc], 1
jne 0x8000690
mov rax, qword [r13]
lea rdx, [0x08000715]
mov rdi, r13
mov rcx, qword [rax + 0x18]
cmp rcx, rdx
jne 0x80007b0
call qword [rax + 8]
jmp 0x8000690
nop dword [rax]
lea r13, [arg_70h]
test r15, r15
je 0x8000749
mov rsi, qword [r12 + 0x10]
mov rdi, r15
sub rsi, r15
call _ZdlPvm
movq xmm0, qword [rsp]
mov rax, qword [var_8h]
movq xmm1, r13
punpcklqdq xmm0, xmm1
mov qword [r12 + 0x10], rax
movups xmmword [r12], xmm0
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
cmp rax, rsi
cmova rax, rsi
lea r13, [rax*8]
sub r13, rax
shl r13, 3
mov rdi, r13
call _Znwm
add r13, rax
mov qword [rsp], rax
mov qword [var_8h], r13
lea r13, [rax + 0x38]
jmp 0x800062e
nop dword [rax + rax]
call rcx
jmp 0x8000690
movabs r13, 0x7ffffffffffffff8
jmp 0x800078e
lea rdi, [0x080007ca]
call _ZSt20__throw_length_errorPKc
add byte [rax], al
add byte [rax], al
nop
