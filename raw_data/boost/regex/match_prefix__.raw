push rbx
xor eax, eax
mov rbx, rdi
sub rsp, 0x10
mov word [rdi + 0x79], ax
mov rax, qword [rdi + 0x48]
mov rdx, qword [rdi + 0x10]
mov rax, qword [rax]
mov r8, qword [rdx + 8]
mov rax, qword [rax + 0x48]
mov qword [rdi + 0x58], rax
mov rax, qword [rdx]
movabs rdx, 0xaaaaaaaaaaaaaaab
mov rdi, qword [rdi + 0x28]
cmp qword [rax + 0x18], rdi
lea rcx, [rax + 0x48]
setne byte [rax + 0x28]
sub r8, rax
mov rsi, r8
mov qword [rax + 0x20], rdi
sar rsi, 3
mov qword [rax + 0x30], rdi
imul rsi, rdx
mov edx, 3
cmp r8, 0x48
jbe 0x8020b30
nop dword [rax + rax]
movq xmm0, qword [rax + 8]
add rdx, 1
add rcx, 0x18
punpcklqdq xmm0, xmm0
movups xmmword [rcx - 0x18], xmm0
cmp rsi, rdx
ja 0x8020af8
add rax, 0x58
mov edx, 3
nop dword [rax + rax]
add rdx, 1
mov byte [rax], 0
add rax, 0x18
cmp rdx, rsi
jb 0x8020b20
mov qword [rbx + 0x30], rdi
mov rdi, rbx
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE16match_all_statesEv
movzx eax, byte [rbx + 0x7a]
test al, al
jne 0x8020ba9
cmp byte [rbx + 0x79], 0
jne 0x8020b60
mov rdx, qword [rbx + 0x30]
mov qword [rbx + 0x28], rdx
add rsp, 0x10
pop rbx
ret
nop dword [rax + rax]
mov edi, dword [rbx + 0x60]
test edi, 0x2000
je 0x8020b4a
mov rsi, qword [rbx + 0x10]
mov rdx, qword [rbx + 0x20]
mov byte [rbx + 0x7a], 1
mov rcx, qword [rsi]
cmp qword [rcx + 8], rdx
mov qword [rcx + 0x38], rdx
setne byte [rcx + 0x10]
and edi, 0x20000
mov byte [rcx + 0x40], 0
mov qword [rcx], rdx
mov qword [rsi + 0x20], rdx
mov qword [rsi + 0x28], rdx
mov byte [rsi + 0x30], 0
mov byte [rsi + 0x4c], 0
mov qword [rbx + 0x28], rdx
jne 0x8020bb4
add rsp, 0x10
mov eax, 1
pop rbx
ret
mov rdi, qword [rbx]
mov byte [var_fh], al
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE12maybe_assignERKS6_
movzx edx, byte [rbx + 0x7a]
movzx eax, byte [var_fh]
test dl, dl
je 0x8020b4a
mov eax, edx
jmp 0x8020b52
