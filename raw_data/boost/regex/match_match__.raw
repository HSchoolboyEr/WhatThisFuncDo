push r15
mov r15, rdi
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x78
mov rax, qword [rdi + 0xc0]
cmp qword [rdi + 0xb8], rax
jne 0x8021418
mov edx, dword [rdi + 0x60]
mov rax, qword [rdi + 0x28]
test dh, 8
jne 0x80213d0
test dh, 0x80
jne 0x80213c0
test dh, 0x40
je 0x8021359
cmp qword [r15 + 0x38], rax
je 0x802140f
mov rsi, qword [r15 + 0x10]
movq xmm0, rax
mov r8d, 1
punpcklqdq xmm0, xmm0
mov rcx, qword [rsi]
cmp qword [rcx + 8], rax
mov qword [rcx + 0x38], rax
setne byte [rcx + 0x10]
and edx, 0x20000
mov byte [rcx + 0x40], 1
mov qword [rcx], rax
mov byte [rsi + 0x30], 0
mov byte [rsi + 0x4c], 0
movups xmmword [rsi + 0x20], xmm0
mov qword [r15 + 0x58], 0
mov byte [r15 + 0x7a], 1
jne _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE12maybe_assignERKS6_
add rsp, 0x78
mov eax, r8d
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
xor r8d, r8d
cmp qword [r15 + 0x20], rax
jne 0x80213a7
jmp 0x802134a
nop
mov rdi, qword [rdi + 0x10]
cmp byte [rdi + 0x4c], 0
mov rcx, qword [rdi + 8]
mov rsi, qword [rdi]
je 0x80213ea
cmp rsi, rcx
je _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE17raise_logic_errorEv
sub rcx, rsi
add rdi, 0x20
add rsi, 0x30
sar rcx, 3
imul ecx, ecx, 0xaaaaaaab
cmp ecx, 2
cmovle rsi, rdi
cmp qword [rsi], rax
jne 0x8021345
xor r8d, r8d
jmp 0x80213a7
nop dword [rax]
mov rbp, qword [rax - 0x68]
mov r14d, dword [rax - 0x70]
lea r12, [rax - 0x60]
mov rax, qword [rdi + 0xd8]
mov r13, qword [rdi + 0x10]
mov qword [rdi + 0x58], rbp
lea rbx, [rax - 0xb8]
cmp rbx, qword [rdi + 0xd0]
jb _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE12extend_stackEv
mov qword [rbx + 0x10], rbp
lea rbp, [rbx + 0x18]
mov rsi, r13
mov dword [rbx], 0xe
mov rdi, rbp
mov dword [rbx + 8], r14d
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEEC1ERKS6_
lea rdi, [rbx + 0x68]
mov rsi, r12
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEEC1ERKS6_
mov r14, qword [r15 + 0xc0]
mov r13, qword [r15 + 0x10]
mov qword [r15 + 0xd8], rbx
lea rax, [r14 - 0x60]
cmp r13, rax
je 0x8021a84
mov r12, qword [r14 - 0x58]
mov r10, qword [r14 - 0x60]
mov r9, qword [r13]
mov rsi, qword [r13 + 0x10]
mov rbx, r12
sub rbx, r10
sub rsi, r9
cmp rbx, rsi
ja 0x80219f8
mov r8, qword [r13 + 8]
lea rdi, [r9 + rbx]
mov qword [var_10h], rdi
mov rax, r8
sub rax, r9
cmp rbx, rax
ja 0x8021c00
test rbx, rbx
jle 0x8021a7b
movabs rax, 0xaaaaaaaaaaaaaaab
mov rdx, rbx
sar rdx, 3
imul rdx, rax
mov rax, r9
sub rax, r10
sub rax, 0x18
cmp rax, 0x150
mov qword [var_20h], rdx
seta cl
cmp rbx, 0x180
setg al
test cl, al
lea rax, [r10 + 0x18]
je 0x8021b94
mov rcx, r9
sub rcx, rax
add rcx, 8
cmp rcx, 0x160
jbe 0x8021b94
mov rax, rdx
mov qword [var_30h], r13
mov rcx, r9
lea rdx, [r10 + 0x10]
sub rax, 1
mov qword [var_38h], r14
mov qword [var_28h], rax
shr rax, 4
lea rax, [rax + rax*2]
mov qword [var_40h], r10
shl rax, 7
mov qword [var_48h], r9
add rax, r9
mov qword [var_50h], r15
mov qword [var_18h], rax
movdqu xmm3, xmmword [rdx + 0x10]
movdqu xmm7, xmmword [rdx]
add rcx, 0x180
add rdx, 0x180
movdqu xmm4, xmmword [rdx - 0x140]
movdqu xmm6, xmmword [rdx - 0x150]
shufpd xmm7, xmm3, 1
movdqu xmm5, xmmword [rdx - 0x120]
movdqu xmm3, xmmword [rdx - 0x110]
shufpd xmm6, xmm4, 1
movdqu xmm0, xmmword [rdx - 0x50]
movdqu xmm15, xmmword [rdx - 0x20]
movdqu xmm2, xmmword [rdx - 0xe0]
shufpd xmm5, xmm3, 1
movdqu xmm1, xmmword [rdx - 0xb0]
movdqu xmm4, xmmword [rdx - 0xf0]
movdqu xmm9, xmmword [rdx - 0x70]
movdqu xmm3, xmmword [rdx - 0xc0]
movdqu xmm8, xmmword [rdx - 0x40]
movdqu xmm14, xmmword [rdx - 0x160]
shufpd xmm4, xmm2, 1
movdqu xmm2, xmmword [rdx - 0x90]
movdqu xmm13, xmmword [rdx - 0x130]
shufpd xmm3, xmm1, 1
movdqu xmm1, xmmword [rdx - 0x80]
movdqu xmm12, xmmword [rdx - 0x100]
movdqu xmm11, xmmword [rdx - 0xd0]
movdqu xmm10, xmmword [rdx - 0xa0]
shufpd xmm2, xmm1, 1
movdqu xmm1, xmmword [rdx - 0x60]
shufpd xmm1, xmm0, 1
movdqu xmm0, xmmword [rdx - 0x30]
shufpd xmm0, xmm15, 1
movdqu xmm15, xmmword [rdx - 0x190]
movups xmmword [rcx - 0x168], xmm7
movups xmmword [rcx - 0x150], xmm14
movups xmmword [rcx - 0x180], xmm15
movups xmmword [rcx - 0x138], xmm6
movups xmmword [rcx - 0x120], xmm13
movups xmmword [rcx - 0x108], xmm5
movups xmmword [rcx - 0xf0], xmm12
movups xmmword [rcx - 0xd8], xmm4
movups xmmword [rcx - 0xc0], xmm11
movzx eax, byte [rdx - 0x90]
movzx edi, byte [rdx - 0x78]
movzx ebx, byte [rdx - 0xf0]
movzx r15d, byte [rdx - 0x168]
movups xmmword [rcx - 0xa8], xmm3
movzx r14d, byte [rdx - 0x150]
movzx r13d, byte [rdx - 0x138]
mov byte [rsp], al
movzx r12d, byte [rdx - 0x120]
movzx eax, byte [rdx - 0x30]
movups xmmword [rcx - 0x78], xmm2
movzx ebp, byte [rdx - 0x108]
movzx esi, byte [rdx - 0x180]
mov byte [var_eh], dil
movzx r11d, byte [rdx - 0xd8]
movzx edi, byte [rdx - 0x48]
mov byte [var_fh], al
movzx r8d, byte [rdx - 0x60]
movzx eax, byte [rdx - 0x18]
movups xmmword [rcx - 0x90], xmm10
movzx r10d, byte [rdx - 0xc0]
movzx r9d, byte [rdx - 0xa8]
movups xmmword [rcx - 0x60], xmm9
movups xmmword [rcx - 0x48], xmm1
movups xmmword [rcx - 0x30], xmm8
movups xmmword [rcx - 0x18], xmm0
mov byte [rcx - 0x170], sil
mov byte [rcx - 0x158], r15b
mov byte [rcx - 0x140], r14b
mov byte [rcx - 0x128], r13b
mov byte [rcx - 0x110], r12b
mov byte [rcx - 0xf8], bpl
mov byte [rcx - 0xe0], bl
movzx ebx, byte [rsp]
mov byte [rcx - 0x38], dil
movzx edi, byte [var_fh]
mov byte [rcx - 0x80], bl
movzx ebx, byte [var_eh]
mov byte [rcx - 0xc8], r11b
mov byte [rcx - 0xb0], r10b
mov byte [rcx - 0x98], r9b
mov byte [rcx - 0x68], bl
mov byte [rcx - 0x50], r8b
mov byte [rcx - 0x20], dil
mov byte [rcx - 8], al
cmp rcx, qword [var_18h]
jne 0x8021570
mov rax, qword [var_28h]
mov r10, qword [var_40h]
mov rdx, qword [var_20h]
mov r9, qword [var_48h]
and rax, 0xfffffffffffffff0
mov r13, qword [var_30h]
mov r14, qword [var_38h]
lea rdi, [rax + rax*2]
sub rdx, rax
mov r15, qword [var_50h]
shl rdi, 3
lea rax, [r10 + rdi]
add rdi, r9
movdqu xmm6, xmmword [rax]
movzx ecx, byte [rax + 0x10]
movups xmmword [rdi], xmm6
mov byte [rdi + 0x10], cl
cmp rdx, 1
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x18]
movzx ecx, byte [rax + 0x28]
movups xmmword [rdi + 0x18], xmm7
mov byte [rdi + 0x28], cl
cmp rdx, 2
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x30]
movzx ecx, byte [rax + 0x40]
movups xmmword [rdi + 0x30], xmm7
mov byte [rdi + 0x40], cl
cmp rdx, 3
je 0x8021a7b
movdqu xmm5, xmmword [rax + 0x48]
movzx ecx, byte [rax + 0x58]
movups xmmword [rdi + 0x48], xmm5
mov byte [rdi + 0x58], cl
cmp rdx, 4
je 0x8021a7b
movdqu xmm6, xmmword [rax + 0x60]
movzx ecx, byte [rax + 0x70]
movups xmmword [rdi + 0x60], xmm6
mov byte [rdi + 0x70], cl
cmp rdx, 5
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x78]
movzx ecx, byte [rax + 0x88]
movups xmmword [rdi + 0x78], xmm7
mov byte [rdi + 0x88], cl
cmp rdx, 6
je 0x8021a7b
movdqu xmm5, xmmword [rax + 0x90]
movzx ecx, byte [rax + 0xa0]
movups xmmword [rdi + 0x90], xmm5
mov byte [rdi + 0xa0], cl
cmp rdx, 7
je 0x8021a7b
movdqu xmm5, xmmword [rax + 0xa8]
movzx ecx, byte [rax + 0xb8]
movups xmmword [rdi + 0xa8], xmm5
mov byte [rdi + 0xb8], cl
cmp rdx, 8
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0xc0]
movzx ecx, byte [rax + 0xd0]
movups xmmword [rdi + 0xc0], xmm7
mov byte [rdi + 0xd0], cl
cmp rdx, 9
je 0x8021a7b
movdqu xmm6, xmmword [rax + 0xd8]
movzx ecx, byte [rax + 0xe8]
movups xmmword [rdi + 0xd8], xmm6
mov byte [rdi + 0xe8], cl
cmp rdx, 0xa
je 0x8021a7b
movdqu xmm6, xmmword [rax + 0xf0]
movzx ecx, byte [rax + 0x100]
movups xmmword [rdi + 0xf0], xmm6
mov byte [rdi + 0x100], cl
cmp rdx, 0xb
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x108]
movzx ecx, byte [rax + 0x118]
movups xmmword [rdi + 0x108], xmm7
mov byte [rdi + 0x118], cl
cmp rdx, 0xc
je 0x8021a7b
movdqu xmm5, xmmword [rax + 0x120]
movzx ecx, byte [rax + 0x130]
movups xmmword [rdi + 0x120], xmm5
mov byte [rdi + 0x130], cl
cmp rdx, 0xd
je 0x8021a7b
movdqu xmm5, xmmword [rax + 0x138]
movzx ecx, byte [rax + 0x148]
movups xmmword [rdi + 0x138], xmm5
mov byte [rdi + 0x148], cl
cmp rdx, 0xe
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x150]
movzx ecx, byte [rax + 0x160]
movups xmmword [rdi + 0x150], xmm7
mov byte [rdi + 0x160], cl
cmp rdx, 0xf
je 0x8021a7b
movdqu xmm7, xmmword [rax + 0x168]
movzx eax, byte [rax + 0x178]
movups xmmword [rdi + 0x168], xmm7
mov byte [rdi + 0x178], al
jmp 0x8021a7b
nop dword [rax]
test rbx, rbx
je 0x8022210
movabs rax, 0x7ffffffffffffff8
cmp rbx, rax
ja _ZSt17__throw_bad_allocv
mov rdi, rbx
mov qword [rsp], r10
call _Znwm
mov r9, qword [r13]
mov rsi, qword [r13 + 0x10]
mov r10, qword [rsp]
mov rbp, rax
sub rsi, r9
mov rax, r10
mov rdx, rbp
cmp r12, r10
je 0x8021a5c
nop dword [rax]
movdqu xmm2, xmmword [rax]
movzx ecx, byte [rax + 0x10]
add rax, 0x18
add rdx, 0x18
movups xmmword [rdx - 0x18], xmm2
mov byte [rdx - 8], cl
cmp r12, rax
jne 0x8021a40
test r9, r9
je 0x8021a69
mov rdi, r9
call _ZdlPvm
lea rax, [rbp + rbx]
mov qword [r13], rbp
mov qword [var_10h], rax
mov qword [r13 + 0x10], rax
mov rax, qword [var_10h]
mov qword [r13 + 8], rax
mov rax, qword [r14 - 0x28]
mov rbx, qword [r14 - 0x20]
mov rbp, qword [r13 + 0x40]
mov qword [r13 + 0x38], rax
cmp rbx, rbp
je 0x8021adb
test rbx, rbx
je 0x8021ab0
cmp qword [0x08021aa6], 0
jne 0x8022200
add dword [rbx + 8], 1
test rbp, rbp
je 0x8021ad7
mov r12, qword [0x08021abc]
test r12, r12
jne 0x80221f0
mov eax, dword [arg_8h]
lea edx, [rax - 1]
mov dword [arg_8h], edx
cmp eax, 1
je 0x80221b0
mov qword [r13 + 0x40], rbx
mov eax, dword [r14 - 0x18]
mov dword [r13 + 0x48], eax
movzx eax, byte [r14 - 0x14]
mov byte [r13 + 0x4c], al
test al, al
jne 0x8021b0c
movdqu xmm6, xmmword [r14 - 0x48]
movups xmmword [r13 + 0x18], xmm6
mov rax, qword [r14 - 0x38]
mov qword [r13 + 0x28], rax
movzx eax, byte [r14 - 0x30]
mov byte [r13 + 0x30], al
mov rbx, qword [r15 + 0xc0]
mov rbp, qword [rbx - 0x20]
lea rax, [rbx - 0x70]
mov qword [r15 + 0xc0], rax
test rbp, rbp
je 0x8021b70
mov r12, qword [0x08021b2e]
test r12, r12
jne 0x80221a0
mov eax, dword [arg_8h]
lea edx, [rax - 1]
mov dword [arg_8h], edx
cmp eax, 1
jne 0x8021b70
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x10]
test r12, r12
jne 0x80221e0
mov eax, dword [arg_ch]
lea edx, [rax - 1]
mov dword [arg_ch], edx
cmp eax, 1
jne 0x8021b70
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x18]
mov rdi, qword [rbx - 0x60]
test rdi, rdi
je 0x8021b85
mov rsi, qword [rbx - 0x50]
sub rsi, rdi
call _ZdlPvm
mov r8d, 1
jmp 0x80213a7
add rax, 0x18
movdqu xmm7, xmmword [r10]
movzx ecx, byte [r10 + 0x10]
add r9, 0x18
mov r10, rax
movups xmmword [r9 - 0x18], xmm7
mov byte [r9 - 8], cl
sub rdx, 1
jne 0x8021b90
jmp 0x8021a7b
nop dword [rax]
mov rdi, qword [r15]
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE12maybe_assignERKS6_
mov r8d, dword [r15 + 0x60]
shr r8d, 0xa
and r8d, 1
jmp 0x80213a7
nop dword [rax]
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE12extend_stackEv
mov rax, qword [r15 + 0xd8]
lea rbx, [rax - 0xb8]
jmp 0x8021447
nop dword [rax + rax]
lea rsi, [r10 + rax]
test rax, rax
jle 0x8022161
movabs rdx, 0xaaaaaaaaaaaaaaab
mov rcx, rax
sar rcx, 3
imul rcx, rdx
mov qword [var_20h], rcx
mov rdx, rcx
mov rcx, r9
sub rcx, r10
sub rcx, 0x18
cmp rcx, 0x150
seta cl
cmp rax, 0x180
setg al
test cl, al
lea rax, [r10 + 0x18]
je 0x8022174
mov rcx, r9
sub rcx, rax
add rcx, 8
cmp rcx, 0x160
jbe 0x8022174
mov rax, qword [var_20h]
mov qword [var_30h], r13
mov rcx, r9
lea rdx, [r10 + 0x10]
mov qword [var_38h], r14
sub rax, 1
mov qword [var_40h], r12
mov qword [var_28h], rax
shr rax, 4
lea rax, [rax + rax*2]
mov qword [var_48h], rsi
shl rax, 7
mov qword [var_50h], r8
add rax, r9
mov qword [var_58h], r10
mov qword [var_18h], rax
mov qword [var_60h], r9
mov qword [var_68h], r15
nop dword [rax + rax]
movdqu xmm5, xmmword [rdx + 0x10]
movdqu xmm7, xmmword [rdx]
add rcx, 0x180
add rdx, 0x180
movdqu xmm4, xmmword [rdx - 0x140]
movdqu xmm6, xmmword [rdx - 0x150]
shufpd xmm7, xmm5, 1
movdqu xmm1, xmmword [rdx - 0x80]
movdqu xmm0, xmmword [rdx - 0x50]
movdqu xmm3, xmmword [rdx - 0x110]
shufpd xmm6, xmm4, 1
movdqu xmm2, xmmword [rdx - 0xe0]
movdqu xmm5, xmmword [rdx - 0x120]
movdqu xmm15, xmmword [rdx - 0x20]
movdqu xmm4, xmmword [rdx - 0xf0]
movdqu xmm9, xmmword [rdx - 0x70]
shufpd xmm5, xmm3, 1
movdqu xmm8, xmmword [rdx - 0x40]
movdqu xmm3, xmmword [rdx - 0xc0]
movdqu xmm14, xmmword [rdx - 0x160]
shufpd xmm4, xmm2, 1
movdqu xmm2, xmmword [rdx - 0xb0]
movdqu xmm13, xmmword [rdx - 0x130]
movdqu xmm12, xmmword [rdx - 0x100]
movdqu xmm11, xmmword [rdx - 0xd0]
shufpd xmm3, xmm2, 1
movdqu xmm2, xmmword [rdx - 0x90]
movdqu xmm10, xmmword [rdx - 0xa0]
shufpd xmm2, xmm1, 1
movdqu xmm1, xmmword [rdx - 0x60]
shufpd xmm1, xmm0, 1
movdqu xmm0, xmmword [rdx - 0x30]
shufpd xmm0, xmm15, 1
movdqu xmm15, xmmword [rdx - 0x190]
movups xmmword [rcx - 0x168], xmm7
movups xmmword [rcx - 0x150], xmm14
movups xmmword [rcx - 0x180], xmm15
movups xmmword [rcx - 0x138], xmm6
movups xmmword [rcx - 0x120], xmm13
movups xmmword [rcx - 0x108], xmm5
movups xmmword [rcx - 0xf0], xmm12
movups xmmword [rcx - 0xd8], xmm4
movups xmmword [rcx - 0xc0], xmm11
movzx eax, byte [rdx - 0x78]
movzx ebx, byte [rdx - 0xf0]
movzx r15d, byte [rdx - 0x168]
movzx r14d, byte [rdx - 0x150]
movups xmmword [rcx - 0xa8], xmm3
mov byte [rsp], al
movzx eax, byte [rdx - 0x48]
movzx r13d, byte [rdx - 0x138]
movzx esi, byte [rdx - 0x60]
movups xmmword [rcx - 0x78], xmm2
movzx r12d, byte [rdx - 0x120]
movzx ebp, byte [rdx - 0x108]
mov byte [var_eh], al
movzx edi, byte [rdx - 0x180]
movzx eax, byte [rdx - 0x30]
movups xmmword [rcx - 0x90], xmm10
movzx r11d, byte [rdx - 0xd8]
movzx r10d, byte [rdx - 0xc0]
movups xmmword [rcx - 0x60], xmm9
movzx r9d, byte [rdx - 0xa8]
movzx r8d, byte [rdx - 0x90]
mov byte [var_fh], al
movups xmmword [rcx - 0x48], xmm1
movzx eax, byte [rdx - 0x18]
movups xmmword [rcx - 0x30], xmm8
movups xmmword [rcx - 0x18], xmm0
mov byte [rcx - 0x170], dil
mov byte [rcx - 0x158], r15b
mov byte [rcx - 0x140], r14b
mov byte [rcx - 0x128], r13b
mov byte [rcx - 0x110], r12b
mov byte [rcx - 0xf8], bpl
mov byte [rcx - 0xe0], bl
movzx ebx, byte [rsp]
mov byte [rcx - 0x50], sil
movzx esi, byte [var_fh]
mov byte [rcx - 0x68], bl
movzx ebx, byte [var_eh]
mov byte [rcx - 0xc8], r11b
mov byte [rcx - 0xb0], r10b
mov byte [rcx - 0x98], r9b
mov byte [rcx - 0x80], r8b
mov byte [rcx - 0x38], bl
mov byte [rcx - 0x20], sil
mov byte [rcx - 8], al
cmp rcx, qword [var_18h]
jne 0x8021cc0
mov rax, qword [var_28h]
mov r10, qword [var_58h]
mov rdx, qword [var_20h]
mov r9, qword [var_60h]
and rax, 0xfffffffffffffff0
mov r13, qword [var_30h]
mov r14, qword [var_38h]
lea rdi, [rax + rax*2]
sub rdx, rax
mov r12, qword [var_40h]
mov rsi, qword [var_48h]
shl rdi, 3
mov r8, qword [var_50h]
mov r15, qword [var_68h]
lea rax, [r10 + rdi]
add rdi, r9
movdqu xmm6, xmmword [rax]
movzx ecx, byte [rax + 0x10]
movups xmmword [rdi], xmm6
mov byte [rdi + 0x10], cl
cmp rdx, 1
je 0x8022161
movdqu xmm6, xmmword [rax + 0x18]
movzx ecx, byte [rax + 0x28]
movups xmmword [rdi + 0x18], xmm6
mov byte [rdi + 0x28], cl
cmp rdx, 2
je 0x8022161
movdqu xmm6, xmmword [rax + 0x30]
movzx ecx, byte [rax + 0x40]
movups xmmword [rdi + 0x30], xmm6
mov byte [rdi + 0x40], cl
cmp rdx, 3
je 0x8022161
movdqu xmm7, xmmword [rax + 0x48]
movzx ecx, byte [rax + 0x58]
movups xmmword [rdi + 0x48], xmm7
mov byte [rdi + 0x58], cl
cmp rdx, 4
je 0x8022161
movdqu xmm5, xmmword [rax + 0x60]
movzx ecx, byte [rax + 0x70]
movups xmmword [rdi + 0x60], xmm5
mov byte [rdi + 0x70], cl
cmp rdx, 5
je 0x8022161
movdqu xmm6, xmmword [rax + 0x78]
movzx ecx, byte [rax + 0x88]
movups xmmword [rdi + 0x78], xmm6
mov byte [rdi + 0x88], cl
cmp rdx, 6
je 0x8022161
movdqu xmm7, xmmword [rax + 0x90]
movzx ecx, byte [rax + 0xa0]
movups xmmword [rdi + 0x90], xmm7
mov byte [rdi + 0xa0], cl
cmp rdx, 7
je 0x8022161
movdqu xmm6, xmmword [rax + 0xa8]
movzx ecx, byte [rax + 0xb8]
movups xmmword [rdi + 0xa8], xmm6
mov byte [rdi + 0xb8], cl
cmp rdx, 8
je 0x8022161
movdqu xmm5, xmmword [rax + 0xc0]
movzx ecx, byte [rax + 0xd0]
movups xmmword [rdi + 0xc0], xmm5
mov byte [rdi + 0xd0], cl
cmp rdx, 9
je 0x8022161
movdqu xmm7, xmmword [rax + 0xd8]
movzx ecx, byte [rax + 0xe8]
movups xmmword [rdi + 0xd8], xmm7
mov byte [rdi + 0xe8], cl
cmp rdx, 0xa
je 0x8022161
movdqu xmm5, xmmword [rax + 0xf0]
movzx ecx, byte [rax + 0x100]
movups xmmword [rdi + 0xf0], xmm5
mov byte [rdi + 0x100], cl
cmp rdx, 0xb
je 0x8022161
movdqu xmm6, xmmword [rax + 0x108]
movzx ecx, byte [rax + 0x118]
movups xmmword [rdi + 0x108], xmm6
mov byte [rdi + 0x118], cl
cmp rdx, 0xc
je 0x8022161
movdqu xmm7, xmmword [rax + 0x120]
movzx ecx, byte [rax + 0x130]
movups xmmword [rdi + 0x120], xmm7
mov byte [rdi + 0x130], cl
cmp rdx, 0xd
je 0x8022161
movdqu xmm6, xmmword [rax + 0x138]
movzx ecx, byte [rax + 0x148]
movups xmmword [rdi + 0x138], xmm6
mov byte [rdi + 0x148], cl
cmp rdx, 0xe
je 0x8022161
movdqu xmm5, xmmword [rax + 0x150]
movzx ecx, byte [rax + 0x160]
movups xmmword [rdi + 0x150], xmm5
mov byte [rdi + 0x160], cl
cmp rdx, 0xf
je 0x8022161
movdqu xmm6, xmmword [rax + 0x168]
movzx eax, byte [rax + 0x178]
movups xmmword [rdi + 0x168], xmm6
mov byte [rdi + 0x178], al
jmp 0x8022161
nop dword [rax]
movdqu xmm1, xmmword [rsi]
movzx eax, byte [rsi + 0x10]
add r8, 0x18
add rsi, 0x18
mov byte [r8 - 8], al
movups xmmword [r8 - 0x18], xmm1
cmp r12, rsi
jne 0x8022148
jmp 0x8021a7b
nop dword [rax + rax]
add rax, 0x18
movdqu xmm7, xmmword [r10]
movzx ecx, byte [r10 + 0x10]
add r9, 0x18
mov r10, rax
movups xmmword [r9 - 0x18], xmm7
mov byte [r9 - 8], cl
sub rdx, 1
jne 0x8022170
jmp 0x8022161
nop word cs:[rax + rax]
mov eax, 0xffffffff
lock xadd dword [arg_8h], eax
jmp 0x8021b40
nop
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x10]
test r12, r12
jne 0x8022220
mov eax, dword [arg_ch]
lea edx, [rax - 1]
mov dword [arg_ch], edx
cmp eax, 1
jne 0x8021ad7
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x18]
jmp 0x8021ad7
mov eax, 0xffffffff
lock xadd dword [arg_ch], eax
jmp 0x8021b61
nop
mov eax, 0xffffffff
lock xadd dword [arg_8h], eax
jmp 0x8021ace
nop
lock add dword [rbx + 8], 1
mov rbp, qword [r13 + 0x40]
jmp 0x8021ab0
nop
xor ebp, ebp
jmp 0x8021a32
nop word [rax + rax]
mov eax, 0xffffffff
lock xadd dword [arg_ch], eax
jmp 0x80221c8
call _ZSt17__throw_bad_allocv
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE17raise_logic_errorEv
mov r12, rax
mov rdi, rbp
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEED1Ev
mov rdi, r12
call _Unwind_Resume
