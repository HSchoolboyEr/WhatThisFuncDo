push r15
mov r15, rdi
push r14
push r13
push r12
push rbp
push rbx
sub rsp, 0x88
mov rax, qword [rdi + 0x58]
mov r14d, dword [rax + 0x10]
movzx edx, byte [rax + 0x14]
mov byte [rdi + 0x78], dl
test r14d, r14d
jle 0x8016520
test byte [rdi + 0x62], 4
jne 0x80164e1
mov rdx, qword [rdi + 0x10]
mov rsi, qword [rdi + 0x28]
movsxd rcx, r14d
lea rcx, [rcx + rcx*2 + 6]
mov dword [rdx + 0x48], r14d
mov rdx, qword [rdx]
lea rdx, [rdx + rcx*8]
mov qword [rdx + 8], rsi
mov byte [rdx + 0x10], 1
mov r8, qword [r15 + 0xc0]
cmp r8, qword [r15 + 0xb8]
je 0x80164f7
cmp dword [r8 - 0x70], r14d
je 0x8016530
mov rdx, qword [rax + 8]
mov qword [r15 + 0x58], rdx
add rsp, 0x88
mov eax, 1
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop word cs:[rax + rax]
jns 0x80164f7
xor edx, edx
cmp r14d, 0xfffffffc
jne 0x80164fb
jmp 0x80164f7
nop dword [rax]
mov rax, qword [r8 - 0x68]
mov r13, qword [r15 + 0x10]
mov qword [r15 + 0x58], rax
lea rax, [r8 - 0x60]
cmp r13, rax
je 0x8016b76
mov r12, qword [r8 - 0x58]
mov r10, qword [r8 - 0x60]
mov r9, qword [r13]
mov rsi, qword [r13 + 0x10]
mov rbx, r12
sub rbx, r10
sub rsi, r9
cmp rbx, rsi
ja 0x8016ad0
mov rdi, qword [r13 + 8]
lea rsi, [r9 + rbx]
mov qword [var_18h], rsi
mov rax, rdi
sub rax, r9
cmp rbx, rax
ja 0x8016e40
test rbx, rbx
jle 0x8016b6d
movabs rax, 0xaaaaaaaaaaaaaaab
mov rdx, rbx
sar rdx, 3
imul rdx, rax
mov rax, r9
sub rax, r10
sub rax, 0x18
cmp rax, 0x150
mov qword [var_28h], rdx
seta cl
cmp rbx, 0x180
setg al
test cl, al
lea rax, [r10 + 0x18]
je 0x8016db4
mov rcx, r9
sub rcx, rax
add rcx, 8
cmp rcx, 0x160
jbe 0x8016db4
mov rax, rdx
mov qword [var_38h], r13
mov rcx, r9
lea rdx, [r10 + 0x10]
sub rax, 1
mov dword [var_44h], r14d
mov qword [var_30h], rax
shr rax, 4
lea rax, [rax + rax*2]
mov qword [var_48h], r8
shl rax, 7
mov qword [var_50h], r10
add rax, r9
mov qword [var_58h], r9
mov qword [var_20h], rax
mov qword [var_60h], r15
nop
movdqu xmm2, xmmword [rdx + 0x10]
movdqu xmm7, xmmword [rdx]
add rcx, 0x180
add rdx, 0x180
movdqu xmm4, xmmword [rdx - 0x110]
movdqu xmm5, xmmword [rdx - 0x120]
shufpd xmm7, xmm2, 1
movdqu xmm3, xmmword [rdx - 0x140]
movdqu xmm2, xmmword [rdx - 0xe0]
shufpd xmm5, xmm4, 1
movdqu xmm0, xmmword [rdx - 0x80]
movdqu xmm15, xmmword [rdx - 0x20]
movdqu xmm6, xmmword [rdx - 0x150]
movdqu xmm9, xmmword [rdx - 0x70]
movdqu xmm4, xmmword [rdx - 0xf0]
movdqu xmm8, xmmword [rdx - 0x40]
movdqu xmm1, xmmword [rdx - 0xb0]
shufpd xmm6, xmm3, 1
movdqu xmm3, xmmword [rdx - 0xc0]
movdqu xmm14, xmmword [rdx - 0x160]
shufpd xmm4, xmm2, 1
movdqu xmm2, xmmword [rdx - 0x90]
movdqu xmm13, xmmword [rdx - 0x130]
shufpd xmm3, xmm1, 1
movdqu xmm1, xmmword [rdx - 0x60]
movdqu xmm12, xmmword [rdx - 0x100]
shufpd xmm2, xmm0, 1
movdqu xmm0, xmmword [rdx - 0x50]
movdqu xmm11, xmmword [rdx - 0xd0]
movdqu xmm10, xmmword [rdx - 0xa0]
shufpd xmm1, xmm0, 1
movdqu xmm0, xmmword [rdx - 0x30]
shufpd xmm0, xmm15, 1
movdqu xmm15, xmmword [rdx - 0x190]
movups xmmword [rcx - 0x168], xmm7
movups xmmword [rcx - 0x150], xmm14
movups xmmword [rcx - 0x180], xmm15
movups xmmword [rcx - 0x138], xmm6
movups xmmword [rcx - 0x120], xmm13
movups xmmword [rcx - 0x108], xmm5
movups xmmword [rcx - 0xf0], xmm12
movups xmmword [rcx - 0xd8], xmm4
movups xmmword [rcx - 0xc0], xmm11
movzx eax, byte [rdx - 0x78]
movzx esi, byte [rdx - 0x60]
movzx ebx, byte [rdx - 0xf0]
movzx r15d, byte [rdx - 0x168]
movups xmmword [rcx - 0xa8], xmm3
movzx r14d, byte [rdx - 0x150]
movzx r13d, byte [rdx - 0x138]
mov byte [var_8h], al
movzx r12d, byte [rdx - 0x120]
movzx eax, byte [rdx - 0x48]
movups xmmword [rcx - 0x78], xmm2
movzx ebp, byte [rdx - 0x108]
movzx edi, byte [rdx - 0x180]
mov byte [var_10h], sil
movzx r11d, byte [rdx - 0xd8]
movzx esi, byte [rdx - 0x30]
mov byte [var_43h], al
movzx r10d, byte [rdx - 0xc0]
movzx eax, byte [rdx - 0x18]
movups xmmword [rcx - 0x90], xmm10
movzx r9d, byte [rdx - 0xa8]
movzx r8d, byte [rdx - 0x90]
movups xmmword [rcx - 0x60], xmm9
movups xmmword [rcx - 0x48], xmm1
movups xmmword [rcx - 0x30], xmm8
movups xmmword [rcx - 0x18], xmm0
mov byte [rcx - 0x170], dil
mov byte [rcx - 0x158], r15b
mov byte [rcx - 0x140], r14b
mov byte [rcx - 0x128], r13b
mov byte [rcx - 0x110], r12b
mov byte [rcx - 0xf8], bpl
mov byte [rcx - 0xe0], bl
movzx ebx, byte [var_8h]
mov byte [rcx - 0xc8], r11b
mov byte [rcx - 0x68], bl
movzx ebx, byte [var_10h]
mov byte [rcx - 0xb0], r10b
mov byte [rcx - 0x50], bl
movzx ebx, byte [var_43h]
mov byte [rcx - 0x98], r9b
mov byte [rcx - 0x80], r8b
mov byte [rcx - 0x38], bl
mov byte [rcx - 0x20], sil
mov byte [rcx - 8], al
cmp rcx, qword [var_20h]
jne 0x8016630
mov rax, qword [var_30h]
mov rcx, qword [var_28h]
mov r10, qword [var_50h]
mov r9, qword [var_58h]
and rax, 0xfffffffffffffff0
mov r13, qword [var_38h]
mov r14d, dword [var_44h]
sub rcx, rax
lea rax, [rax + rax*2]
mov r8, qword [var_48h]
mov r15, qword [var_60h]
shl rax, 3
lea rdx, [r10 + rax]
add rax, r9
movdqu xmm6, xmmword [rdx]
movzx esi, byte [rdx + 0x10]
movups xmmword [rax], xmm6
mov byte [rax + 0x10], sil
cmp rcx, 1
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0x18]
movzx esi, byte [rdx + 0x28]
movups xmmword [rax + 0x18], xmm7
mov byte [rax + 0x28], sil
cmp rcx, 2
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0x30]
movzx esi, byte [rdx + 0x40]
movups xmmword [rax + 0x30], xmm7
mov byte [rax + 0x40], sil
cmp rcx, 3
je 0x8016b6d
movdqu xmm5, xmmword [rdx + 0x48]
movzx esi, byte [rdx + 0x58]
movups xmmword [rax + 0x48], xmm5
mov byte [rax + 0x58], sil
cmp rcx, 4
je 0x8016b6d
movdqu xmm5, xmmword [rdx + 0x60]
movzx esi, byte [rdx + 0x70]
movups xmmword [rax + 0x60], xmm5
mov byte [rax + 0x70], sil
cmp rcx, 5
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0x78]
movzx esi, byte [rdx + 0x88]
movups xmmword [rax + 0x78], xmm7
mov byte [rax + 0x88], sil
cmp rcx, 6
je 0x8016b6d
movdqu xmm6, xmmword [rdx + 0x90]
movzx esi, byte [rdx + 0xa0]
movups xmmword [rax + 0x90], xmm6
mov byte [rax + 0xa0], sil
cmp rcx, 7
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0xa8]
movzx esi, byte [rdx + 0xb8]
movups xmmword [rax + 0xa8], xmm7
mov byte [rax + 0xb8], sil
cmp rcx, 8
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0xc0]
movzx esi, byte [rdx + 0xd0]
movups xmmword [rax + 0xc0], xmm7
mov byte [rax + 0xd0], sil
cmp rcx, 9
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0xd8]
movzx esi, byte [rdx + 0xe8]
movups xmmword [rax + 0xd8], xmm7
mov byte [rax + 0xe8], sil
cmp rcx, 0xa
je 0x8016b6d
movdqu xmm5, xmmword [rdx + 0xf0]
movzx esi, byte [rdx + 0x100]
movups xmmword [rax + 0xf0], xmm5
mov byte [rax + 0x100], sil
cmp rcx, 0xb
je 0x8016b6d
movdqu xmm6, xmmword [rdx + 0x108]
movzx esi, byte [rdx + 0x118]
movups xmmword [rax + 0x108], xmm6
mov byte [rax + 0x118], sil
cmp rcx, 0xc
je 0x8016b6d
movdqu xmm6, xmmword [rdx + 0x120]
movzx esi, byte [rdx + 0x130]
movups xmmword [rax + 0x120], xmm6
mov byte [rax + 0x130], sil
cmp rcx, 0xd
je 0x8016b6d
movdqu xmm7, xmmword [rdx + 0x138]
movzx esi, byte [rdx + 0x148]
movups xmmword [rax + 0x138], xmm7
mov byte [rax + 0x148], sil
cmp rcx, 0xe
je 0x8016b6d
movdqu xmm5, xmmword [rdx + 0x150]
movzx esi, byte [rdx + 0x160]
movups xmmword [rax + 0x150], xmm5
mov byte [rax + 0x160], sil
cmp rcx, 0xf
je 0x8016b6d
movdqu xmm5, xmmword [rdx + 0x168]
movzx edx, byte [rdx + 0x178]
movups xmmword [rax + 0x168], xmm5
mov byte [rax + 0x178], dl
jmp 0x8016b6d
nop word [rax + rax]
test rbx, rbx
je 0x801741f
movabs rax, 0x7ffffffffffffff8
cmp rbx, rax
ja _ZSt17__throw_bad_allocv
mov rdi, rbx
mov qword [var_10h], r10
mov qword [var_8h], r8
call _Znwm
mov r9, qword [r13]
mov rsi, qword [r13 + 0x10]
mov r8, qword [var_8h]
mov r10, qword [var_10h]
mov rbp, rax
sub rsi, r9
mov rax, r10
mov rdx, rbp
cmp r12, r10
je 0x8016b44
nop dword [rax]
movdqu xmm1, xmmword [rax]
movzx ecx, byte [rax + 0x10]
add rax, 0x18
add rdx, 0x18
movups xmmword [rdx - 0x18], xmm1
mov byte [rdx - 8], cl
cmp r12, rax
jne 0x8016b28
test r9, r9
je 0x8016b5b
mov rdi, r9
mov qword [var_8h], r8
call _ZdlPvm
mov r8, qword [var_8h]
lea rax, [rbp + rbx]
mov qword [r13], rbp
mov qword [var_18h], rax
mov qword [r13 + 0x10], rax
mov rax, qword [var_18h]
mov qword [r13 + 8], rax
mov rax, qword [r8 - 0x28]
mov rbx, qword [r8 - 0x20]
mov r12, qword [r13 + 0x40]
mov qword [r13 + 0x38], rax
cmp rbx, r12
je 0x8016c14
test rbx, rbx
je 0x8016ba6
cmp qword [0x08016b9c], 0
jne 0x8017411
add dword [rbx + 8], 1
test r12, r12
je 0x8016c10
mov rbp, qword [0x08016bb2]
test rbp, rbp
jne 0x8017400
mov eax, dword [r12 + 8]
lea edx, [rax - 1]
mov dword [r12 + 8], edx
cmp eax, 1
jne 0x8016c10
mov rax, qword [r12]
mov qword [var_8h], r8
mov rdi, r12
call qword [rax + 0x10]
test rbp, rbp
mov r8, qword [var_8h]
jne 0x8017426
mov eax, dword [r12 + 0xc]
lea edx, [rax - 1]
mov dword [r12 + 0xc], edx
cmp eax, 1
jne 0x8016c10
mov rax, qword [r12]
mov qword [var_8h], r8
mov rdi, r12
call qword [rax + 0x18]
mov r8, qword [var_8h]
mov qword [r13 + 0x40], rbx
mov eax, dword [r8 - 0x18]
mov dword [r13 + 0x48], eax
movzx eax, byte [r8 - 0x14]
mov byte [r13 + 0x4c], al
test al, al
je 0x8016d88
mov rax, qword [r15 + 0xc0]
mov rbx, qword [r15 + 0xd8]
mov r13, qword [r15 + 0x10]
mov rbp, qword [rax - 0x68]
lea r12, [rax - 0x60]
sub rbx, 0xb8
mov eax, dword [rax - 0x70]
cmp rbx, qword [r15 + 0xd0]
jb 0x8016df8
mov qword [rbx + 0x10], rbp
lea rbp, [rbx + 0x18]
mov rsi, r13
mov dword [rbx], 0xe
mov rdi, rbp
mov dword [rbx + 8], eax
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEEC1ERKS6_
lea rdi, [rbx + 0x68]
mov rsi, r12
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEEC1ERKS6_
mov rdi, qword [r15 + 0xc0]
mov qword [r15 + 0xd8], rbx
mov ebx, 0xfffffffe
lea rbp, [r15 + 0x80]
sub ebx, r14d
lea rax, [rdi - 0x70]
sub rdi, 0x60
mov qword [r15 + 0xc0], rax
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEED1Ev
mov rax, qword [r15 + 0xd8]
lea r8, [rax - 0x30]
cmp r8, qword [r15 + 0xd0]
jb _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE12extend_stackEv
mov rax, qword [r15 + 0xc0]
mov r9d, 0x80000003
cmp rax, qword [r15 + 0xb8]
je 0x8016ce9
mov r9d, dword [rax - 0x70]
mov rax, qword [r15 + 0x28]
mov dword [r8], 5
mov dword [r8 + 0x18], ebx
mov qword [r8 + 0x28], rax
mov rax, qword [r15 + 0x80]
mov qword [r8 + 8], rbp
mov qword [r8 + 0x10], rax
lea rax, [r8 + 8]
mov qword [r15 + 0x80], rax
mov rsi, qword [r8 + 0x10]
mov edi, dword [rsi + 0x10]
test edi, edi
js 0x8016d40
cmp ebx, edi
jle 0x8016d40
mov qword [r8 + 0x20], 0
mov qword [r15 + 0xd8], r8
mov rax, qword [r15 + 0x58]
jmp 0x80164f7
nop dword [rax]
mov r10d, 0xfffffffe
cmp ebx, edi
je 0x8016de0
mov eax, r10d
sub eax, r9d
cmp eax, edi
je 0x8016d25
mov rsi, qword [rsi + 8]
test rsi, rsi
je 0x8016d25
mov edi, dword [rsi + 0x10]
test edi, edi
jns 0x8016d46
mov edx, r9d
call .text
test rax, rax
je 0x8016d25
mov rsi, qword [rax + 8]
test rsi, rsi
je 0x8016d25
mov edi, dword [rsi + 0x10]
jmp 0x8016d46
nop dword [rax + rax]
movdqu xmm6, xmmword [r8 - 0x48]
movups xmmword [r13 + 0x18], xmm6
mov rax, qword [r8 - 0x38]
mov qword [r13 + 0x28], rax
movzx eax, byte [r8 - 0x30]
mov byte [r13 + 0x30], al
jmp 0x8016c2d
nop dword [rax]
add rax, 0x18
movdqu xmm7, xmmword [r10]
movzx ecx, byte [r10 + 0x10]
add r9, 0x18
mov r10, rax
movups xmmword [r9 - 0x18], xmm7
mov byte [r9 - 8], cl
sub rdx, 1
jne 0x8016db0
jmp 0x8016b6d
nop dword [rax]
mov rax, qword [rsi + 0x18]
mov qword [r8 + 0x20], rax
mov rax, qword [rsi + 0x20]
mov qword [r8 + 0x28], rax
jmp 0x8016d2d
nop dword [rax]
mov rdi, r15
mov dword [var_8h], eax
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE12extend_stackEv
mov rax, qword [r15 + 0xd8]
lea rbx, [rax - 0xb8]
mov eax, dword [var_8h]
jmp 0x8016c5e
nop dword [rax + rax]
mov rdi, r15
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE12extend_stackEv
mov rax, qword [r15 + 0xd8]
lea r8, [rax - 0x30]
jmp 0x8016ccf
nop dword [rax + rax]
lea rsi, [r10 + rax]
test rax, rax
jle 0x80173c7
movabs rdx, 0xaaaaaaaaaaaaaaab
mov rcx, rax
sar rcx, 3
imul rcx, rdx
mov qword [var_28h], rcx
mov rdx, rcx
mov rcx, r9
sub rcx, r10
sub rcx, 0x18
cmp rcx, 0x150
seta cl
cmp rax, 0x180
setg al
test cl, al
lea rax, [r10 + 0x18]
je 0x80173dc
mov rcx, r9
sub rcx, rax
add rcx, 8
cmp rcx, 0x160
jbe 0x80173dc
mov rax, qword [var_28h]
mov qword [var_38h], r13
mov rcx, r9
lea rdx, [r10 + 0x10]
mov dword [var_44h], r14d
sub rax, 1
mov qword [var_48h], rsi
mov qword [var_30h], rax
shr rax, 4
lea rax, [rax + rax*2]
mov qword [var_50h], r8
shl rax, 7
mov qword [var_58h], r12
add rax, r9
mov qword [var_60h], rdi
mov qword [var_20h], rax
mov qword [var_68h], r10
mov qword [var_70h], r9
mov qword [var_78h], r15
movdqu xmm5, xmmword [rdx + 0x10]
movdqu xmm7, xmmword [rdx]
add rcx, 0x180
add rdx, 0x180
movdqu xmm3, xmmword [rdx - 0x140]
movdqu xmm4, xmmword [rdx - 0x110]
shufpd xmm7, xmm5, 1
movdqu xmm6, xmmword [rdx - 0x150]
movdqu xmm5, xmmword [rdx - 0x120]
movdqu xmm2, xmmword [rdx - 0xe0]
movdqu xmm1, xmmword [rdx - 0xb0]
shufpd xmm6, xmm3, 1
shufpd xmm5, xmm4, 1
movdqu xmm3, xmmword [rdx - 0xc0]
movdqu xmm4, xmmword [rdx - 0xf0]
movdqu xmm0, xmmword [rdx - 0x50]
movdqu xmm15, xmmword [rdx - 0x20]
shufpd xmm4, xmm2, 1
shufpd xmm3, xmm1, 1
movdqu xmm2, xmmword [rdx - 0x90]
movdqu xmm1, xmmword [rdx - 0x80]
movdqu xmm14, xmmword [rdx - 0x160]
movdqu xmm9, xmmword [rdx - 0x70]
shufpd xmm2, xmm1, 1
movdqu xmm1, xmmword [rdx - 0x60]
movdqu xmm13, xmmword [rdx - 0x130]
movdqu xmm12, xmmword [rdx - 0x100]
movdqu xmm8, xmmword [rdx - 0x40]
movdqu xmm11, xmmword [rdx - 0xd0]
shufpd xmm1, xmm0, 1
movdqu xmm0, xmmword [rdx - 0x30]
movdqu xmm10, xmmword [rdx - 0xa0]
shufpd xmm0, xmm15, 1
movdqu xmm15, xmmword [rdx - 0x190]
movups xmmword [rcx - 0x168], xmm7
movups xmmword [rcx - 0x150], xmm14
movups xmmword [rcx - 0x180], xmm15
movups xmmword [rcx - 0x138], xmm6
movups xmmword [rcx - 0x120], xmm13
movups xmmword [rcx - 0x108], xmm5
movups xmmword [rcx - 0xf0], xmm12
movups xmmword [rcx - 0xd8], xmm4
movups xmmword [rcx - 0xc0], xmm11
movzx eax, byte [rdx - 0x48]
movzx r15d, byte [rdx - 0x168]
movzx r14d, byte [rdx - 0x150]
movzx r13d, byte [rdx - 0x138]
movups xmmword [rcx - 0xa8], xmm3
mov byte [var_8h], al
movzx eax, byte [rdx - 0x30]
movzx r12d, byte [rdx - 0x120]
movzx ebp, byte [rdx - 0x108]
movups xmmword [rcx - 0x90], xmm10
mov byte [var_10h], al
movzx eax, byte [rdx - 0x18]
movzx ebx, byte [rdx - 0xf0]
movzx r11d, byte [rdx - 0xd8]
movups xmmword [rcx - 0x78], xmm2
movzx r10d, byte [rdx - 0xc0]
movzx edi, byte [rdx - 0x78]
mov byte [var_43h], al
movzx eax, byte [rdx - 0x180]
movzx r9d, byte [rdx - 0xa8]
movups xmmword [rcx - 0x60], xmm9
movzx r8d, byte [rdx - 0x90]
movzx esi, byte [rdx - 0x60]
movups xmmword [rcx - 0x48], xmm1
mov byte [rcx - 0x170], al
movups xmmword [rcx - 0x30], xmm8
movups xmmword [rcx - 0x18], xmm0
mov byte [rcx - 0x158], r15b
mov byte [rcx - 0x140], r14b
mov byte [rcx - 0x128], r13b
mov byte [rcx - 0x110], r12b
mov byte [rcx - 0xf8], bpl
mov byte [rcx - 0xe0], bl
movzx eax, byte [var_8h]
mov byte [rcx - 0xc8], r11b
mov byte [rcx - 0x38], al
movzx eax, byte [var_10h]
mov byte [rcx - 0xb0], r10b
mov byte [rcx - 0x20], al
movzx eax, byte [var_43h]
mov byte [rcx - 0x98], r9b
mov byte [rcx - 0x80], r8b
mov byte [rcx - 0x68], dil
mov byte [rcx - 0x50], sil
mov byte [rcx - 8], al
cmp rcx, qword [var_20h]
jne 0x8016f00
mov rax, qword [var_30h]
mov rdx, qword [var_28h]
mov r10, qword [var_68h]
mov r9, qword [var_70h]
and rax, 0xfffffffffffffff0
mov r13, qword [var_38h]
mov r14d, dword [var_44h]
sub rdx, rax
lea rax, [rax + rax*2]
mov rsi, qword [var_48h]
mov r8, qword [var_50h]
shl rax, 3
mov r12, qword [var_58h]
mov rdi, qword [var_60h]
lea rcx, [r10 + rax]
add rax, r9
mov r15, qword [var_78h]
movdqu xmm6, xmmword [rcx]
movzx r9d, byte [rcx + 0x10]
movups xmmword [rax], xmm6
mov byte [rax + 0x10], r9b
cmp rdx, 1
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x18]
movzx r9d, byte [rcx + 0x28]
movups xmmword [rax + 0x18], xmm6
mov byte [rax + 0x28], r9b
cmp rdx, 2
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x30]
movzx r9d, byte [rcx + 0x40]
movups xmmword [rax + 0x30], xmm6
mov byte [rax + 0x40], r9b
cmp rdx, 3
je 0x80173c7
movdqu xmm7, xmmword [rcx + 0x48]
movzx r9d, byte [rcx + 0x58]
movups xmmword [rax + 0x48], xmm7
mov byte [rax + 0x58], r9b
cmp rdx, 4
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x60]
movzx r9d, byte [rcx + 0x70]
movups xmmword [rax + 0x60], xmm6
mov byte [rax + 0x70], r9b
cmp rdx, 5
je 0x80173c7
movdqu xmm5, xmmword [rcx + 0x78]
movzx r9d, byte [rcx + 0x88]
movups xmmword [rax + 0x78], xmm5
mov byte [rax + 0x88], r9b
cmp rdx, 6
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x90]
movzx r9d, byte [rcx + 0xa0]
movups xmmword [rax + 0x90], xmm6
mov byte [rax + 0xa0], r9b
cmp rdx, 7
je 0x80173c7
movdqu xmm5, xmmword [rcx + 0xa8]
movzx r9d, byte [rcx + 0xb8]
movups xmmword [rax + 0xa8], xmm5
mov byte [rax + 0xb8], r9b
cmp rdx, 8
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0xc0]
movzx r9d, byte [rcx + 0xd0]
movups xmmword [rax + 0xc0], xmm6
mov byte [rax + 0xd0], r9b
cmp rdx, 9
je 0x80173c7
movdqu xmm7, xmmword [rcx + 0xd8]
movzx r9d, byte [rcx + 0xe8]
movups xmmword [rax + 0xd8], xmm7
mov byte [rax + 0xe8], r9b
cmp rdx, 0xa
je 0x80173c7
movdqu xmm5, xmmword [rcx + 0xf0]
movzx r9d, byte [rcx + 0x100]
movups xmmword [rax + 0xf0], xmm5
mov byte [rax + 0x100], r9b
cmp rdx, 0xb
je 0x80173c7
movdqu xmm5, xmmword [rcx + 0x108]
movzx r9d, byte [rcx + 0x118]
movups xmmword [rax + 0x108], xmm5
mov byte [rax + 0x118], r9b
cmp rdx, 0xc
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x120]
movzx r9d, byte [rcx + 0x130]
movups xmmword [rax + 0x120], xmm6
mov byte [rax + 0x130], r9b
cmp rdx, 0xd
je 0x80173c7
movdqu xmm7, xmmword [rcx + 0x138]
movzx r9d, byte [rcx + 0x148]
movups xmmword [rax + 0x138], xmm7
mov byte [rax + 0x148], r9b
cmp rdx, 0xe
je 0x80173c7
movdqu xmm6, xmmword [rcx + 0x150]
movzx r9d, byte [rcx + 0x160]
movups xmmword [rax + 0x150], xmm6
mov byte [rax + 0x160], r9b
cmp rdx, 0xf
je 0x80173c7
movdqu xmm7, xmmword [rcx + 0x168]
movzx edx, byte [rcx + 0x178]
movups xmmword [rax + 0x168], xmm7
mov byte [rax + 0x178], dl
jmp 0x80173c7
nop dword [rax]
movdqu xmm0, xmmword [rsi]
movzx eax, byte [rsi + 0x10]
add rdi, 0x18
add rsi, 0x18
mov byte [rdi - 8], al
movups xmmword [rdi - 0x18], xmm0
cmp r12, rsi
jne 0x80173b0
jmp 0x8016b6d
nop dword [rax]
add rax, 0x18
movdqu xmm7, xmmword [r10]
movzx ecx, byte [r10 + 0x10]
add r9, 0x18
mov r10, rax
movups xmmword [r9 - 0x18], xmm7
mov byte [r9 - 8], cl
sub rdx, 1
jne 0x80173d8
jmp 0x80173c7
nop
mov eax, 0xffffffff
lock xadd dword [r12 + 8], eax
jmp 0x8016bc8
lock add dword [rbx + 8], 1
mov r12, qword [r13 + 0x40]
jmp 0x8016ba6
xor ebp, ebp
jmp 0x8016b16
mov eax, 0xffffffff
lock xadd dword [r12 + 0xc], eax
jmp 0x8016bf7
call _ZSt17__throw_bad_allocv
mov r12, rax
mov rdi, rbp
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEED1Ev
mov rdi, r12
call _Unwind_Resume
inc dword [rcx + 0x56]
push r14
push r13
push r12
push rbp
push rbx
mov rbx, qword [rdi + 0x58]
test rbx, rbx
je 0x8017491
mov rbp, rdi
mov r12d, esi
lea r14, [0x0801746e]
mov r13d, edx
mov eax, dword [rbx]
cmp eax, 1
je 0x80174a0
cmp eax, 6
je 0x8017491
mov rdx, qword [rbx + 8]
test eax, eax
je 0x80174e0
mov qword [arg_58h], rdx
mov rbx, rdx
test rbx, rbx
jne 0x8017471
pop rbx
mov eax, 1
pop rbp
pop r12
pop r13
pop r14
ret
nop
cmp dword [rbx + 0x10], r12d
jne 0x8017500
test r13b, r13b
jne 0x80174c8
mov rax, qword [rbx + 8]
mov qword [arg_58h], rax
mov eax, 1
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
pop rbx
mov rdi, rbp
pop rbp
pop r12
pop r13
pop r14
jmp _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE13match_endmarkEv
nop dword [rax + rax]
mov esi, dword [rbx + 0x10]
mov qword [arg_58h], rdx
mov rdi, rbp
xor edx, edx
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE16skip_until_parenEib
mov rbx, qword [arg_58h]
jmp 0x801748c
nop word [rax + rax]
mov rdi, rbp
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE13match_endmarkEv
mov rax, qword [arg_58h]
test rax, rax
je 0x8017520
mov rbx, rax
jmp 0x8017471
nop dword [rax]
mov eax, 1
mov byte [arg_e6h], 0
mov esi, 1
mov word [arg_e4h], ax
jmp 0x8017552
nop word [rax + rax]
mov rax, qword [rdi]
call qword [rdx + rax - 1]
test al, al
je 0x8017577
movzx esi, byte [arg_e4h]
mov rax, qword [arg_d8h]
mov eax, dword [rax]
shl rax, 4
add rax, r14
mov rdi, qword [rax + 8]
mov rdx, qword [rax]
add rdi, rbp
test dl, 1
jne 0x8017540
call rdx
test al, al
jne 0x801754b
mov rax, qword [arg_58h]
test rax, rax
jne 0x8017511
mov rbx, qword [rbx + 8]
mov qword [arg_58h], rbx
jmp 0x801748c
