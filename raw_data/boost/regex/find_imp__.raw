push r15
lea rax, [rdi + 0xd0]
push r14
push r13
push r12
push rbp
push rbx
mov rbx, rdi
sub rsp, 0x58
mov qword [var_28h], rax
movzx eax, byte [0x08022e44]
test al, al
je _ZGVZN5boost13re_detail_50015mem_block_cache8instanceEvE11block_cache
lea r14, [0x08022e53]
xor ecx, ecx
mov rdx, r14
mov rax, qword [rdx]
test rax, rax
jne 0x8022e80
add rdx, 8
lea rax, [0x08022e6b]
cmp rdx, rax
jne 0x8022e58
mov edi, 0x1000
call _Znwm
jmp 0x8022e87
nop dword [rax]
lock cmpxchg qword [rdx], rcx
jne 0x8022e60
lea rdx, [rax + 0xff8]
mov qword [rbx + 0xd0], rax
mov qword [rbx + 0xd8], rdx
mov dword [rax + 0xff8], 0
mov eax, dword [rbx + 0x60]
mov dword [rbx + 0xe0], 0x400
mov qword [rbx + 0x68], 0
test ah, 2
jne 0x80239a0
mov r15, qword [rbx + 0x48]
mov r12, qword [rbx + 0x18]
mov rbp, qword [rbx + 0x10]
mov rcx, qword [r15]
mov qword [rbx + 0x28], r12
mov qword [rbx + 0x38], r12
mov rdx, qword [rcx + 0x48]
mov qword [rbx + 0x58], rdx
mov rdx, qword [rbx + 0x20]
test eax, 0x40000
je 0x80238b8
mov qword [rsp], 3
mov qword [var_8h], 1
mov rsi, qword [arg_8h]
mov rax, qword [rbp]
movq xmm0, rdx
movabs r8, 0xaaaaaaaaaaaaaaab
punpcklqdq xmm0, xmm0
mov byte [var_40h], 0
mov rdi, rsi
movaps xmmword [var_30h], xmm0
sub rdi, rax
sar rdi, 3
imul rdi, r8
cmp rdi, qword [rsp]
ja 0x8023eb0
cmp rsi, rax
je 0x8023300
mov qword [rax], rdx
mov qword [rax + 8], rdx
lea rdx, [rax + 0x18]
mov byte [rax + 0x10], 0
cmp rsi, rdx
je 0x8023300
lea r8, [rsi - 0x30]
lea r10, [var_40h]
movabs r9, 0xaaaaaaaaaaaaaab
sub r8, rax
lea r11, [var_30h]
shr r8, 3
mov qword [var_10h], r11
lea r11, [var_41h]
imul r8, r9
mov qword [var_18h], r11
lea r11, [rax + 0x28]
movabs r9, 0x1fffffffffffffff
and r8, r9
lea r9, [r8 + r8*2]
shl r9, 3
lea r13, [rax + r9 + 0x29]
lea r9, [rax + r9 + 0x28]
cmp r10, r13
setae r13b
cmp qword [var_18h], r11
setbe byte [var_18h]
movzx r11d, byte [var_18h]
or r13d, r11d
cmp qword [var_10h], r9
setae r9b
cmp rdx, r10
setae r10b
or r9d, r10d
test r13b, r9b
je 0x8023890
cmp r8, 0xe
jbe 0x8023890
lea r11, [r8 + 1]
movzx r10d, byte [var_40h]
mov r9, qword [var_38h]
mov r8, rdx
mov r13, r11
mov qword [var_10h], r11
mov r11, qword [var_30h]
shr r13, 4
lea r13, [r13 + r13*2]
shl r13, 7
add r13, rdx
nop dword [rax]
mov qword [r8], r11
add r8, 0x180
mov qword [r8 - 0x168], r11
mov qword [r8 - 0x150], r11
mov qword [r8 - 0x138], r11
mov qword [r8 - 0x120], r11
mov qword [r8 - 0x108], r11
mov qword [r8 - 0xf0], r11
mov qword [r8 - 0xd8], r11
mov qword [r8 - 0xc0], r11
mov qword [r8 - 0xa8], r11
mov qword [r8 - 0x90], r11
mov qword [r8 - 0x78], r11
mov qword [r8 - 0x60], r11
mov qword [r8 - 0x48], r11
mov qword [r8 - 0x30], r11
mov qword [r8 - 0x18], r11
mov qword [r8 - 0x178], r9
mov qword [r8 - 0x160], r9
mov qword [r8 - 0x148], r9
mov qword [r8 - 0x130], r9
mov qword [r8 - 0x118], r9
mov qword [r8 - 0x100], r9
mov qword [r8 - 0xe8], r9
mov qword [r8 - 0xd0], r9
mov qword [r8 - 0xb8], r9
mov qword [r8 - 0xa0], r9
mov qword [r8 - 0x88], r9
mov qword [r8 - 0x70], r9
mov qword [r8 - 0x58], r9
mov qword [r8 - 0x40], r9
mov qword [r8 - 0x28], r9
mov qword [r8 - 0x10], r9
mov byte [r8 - 0x170], r10b
mov byte [r8 - 0x158], r10b
mov byte [r8 - 0x140], r10b
mov byte [r8 - 0x128], r10b
mov byte [r8 - 0x110], r10b
mov byte [r8 - 0xf8], r10b
mov byte [r8 - 0xe0], r10b
mov byte [r8 - 0xc8], r10b
mov byte [r8 - 0xb0], r10b
mov byte [r8 - 0x98], r10b
mov byte [r8 - 0x80], r10b
mov byte [r8 - 0x68], r10b
mov byte [r8 - 0x50], r10b
mov byte [r8 - 0x38], r10b
mov byte [r8 - 0x20], r10b
mov byte [r8 - 8], r10b
cmp r13, r8
jne 0x8023028
mov r11, qword [var_10h]
mov r8, r11
and r8, 0xfffffffffffffff0
lea r9, [r8 + r8*2]
lea rdx, [rdx + r9*8]
cmp r11, r8
je 0x8023300
movzx r8d, byte [var_40h]
movdqa xmm5, xmmword [var_30h]
mov byte [rdx + 0x10], r8b
lea r8, [rdx + 0x18]
movups xmmword [rdx], xmm5
cmp rsi, r8
je 0x8023300
movzx r8d, byte [var_40h]
movdqa xmm0, xmmword [var_30h]
lea r9, [rdx + 0x30]
mov byte [rdx + 0x28], r8b
movups xmmword [rdx + 0x18], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x48]
mov byte [rdx + 0x40], r8b
movups xmmword [rdx + 0x30], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x60]
mov byte [rdx + 0x58], r8b
movups xmmword [rdx + 0x48], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x78]
mov byte [rdx + 0x70], r8b
movups xmmword [rdx + 0x60], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x90]
mov byte [rdx + 0x88], r8b
movups xmmword [rdx + 0x78], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0xa8]
mov byte [rdx + 0xa0], r8b
movups xmmword [rdx + 0x90], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0xc0]
mov byte [rdx + 0xb8], r8b
movups xmmword [rdx + 0xa8], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0xd8]
mov byte [rdx + 0xd0], r8b
movups xmmword [rdx + 0xc0], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0xf0]
mov byte [rdx + 0xe8], r8b
movups xmmword [rdx + 0xd8], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x108]
mov byte [rdx + 0x100], r8b
movups xmmword [rdx + 0xf0], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x120]
mov byte [rdx + 0x118], r8b
movups xmmword [rdx + 0x108], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x138]
mov byte [rdx + 0x130], r8b
movups xmmword [rdx + 0x120], xmm0
cmp rsi, r9
je 0x8023300
lea r9, [rdx + 0x150]
mov byte [rdx + 0x148], r8b
movups xmmword [rdx + 0x138], xmm0
cmp rsi, r9
je 0x8023300
mov byte [rdx + 0x160], r8b
movups xmmword [rdx + 0x150], xmm0
nop word [rax + rax]
cmp rdi, qword [rsp]
je 0x8023948
mov rax, qword [var_8h]
lea rcx, [var_30h]
sub rax, rdi
mov rdi, rbp
lea rdx, [rax + 2]
call _ZNSt6vectorIN5boost9sub_matchIPKwEESaIS4_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS4_S6_EEmRKS4_
mov r15, qword [rbx + 0x48]
mov r13, qword [rbx + 0x10]
mov rdx, qword [rbx + 0x18]
mov rax, qword [rbp]
mov rcx, qword [r15]
mov qword [rax + 0x18], r12
mov dword [arg_48h], 0
mov rbp, qword [r15 + 8]
mov qword [r13 + 0x18], rdx
test rbp, rbp
je 0x8023e60
mov r15, qword [0x08023359]
lea rdx, [arg_8h]
test r15, r15
jne 0x8024bd0
add dword [arg_8h], 1
mov r12, qword [r13 + 0x40]
mov qword [r13 + 0x38], rcx
cmp r12, rbp
je 0x8023391
test r15, r15
jne 0x8024c18
add dword [arg_8h], 1
test r12, r12
jne 0x8023e78
mov qword [r13 + 0x40], rbp
test r15, r15
jne 0x80247a8
mov eax, dword [arg_8h]
lea edx, [rax - 1]
mov dword [arg_8h], edx
cmp eax, 1
je 0x8024770
mov rax, qword [rbx + 0x48]
mov rcx, qword [rax]
mov eax, dword [rbx + 0x60]
or ah, 2
mov dword [rbx + 0x60], eax
test eax, 0x20000
je 0x80237f6
mov rsi, qword [rbx + 0x18]
mov rbp, qword [rbx]
mov r8, qword [rbx + 0x20]
mov qword [var_8h], rsi
test rcx, rcx
je 0x8024758
mov rsi, qword [rcx + 0x40]
mov qword [var_10h], rsi
add rsi, 2
mov qword [rsp], rsi
mov rsi, qword [arg_8h]
mov rdx, qword [rbp]
movq xmm0, r8
movabs rdi, 0xaaaaaaaaaaaaaaab
punpcklqdq xmm0, xmm0
mov byte [var_40h], 0
mov r15, rsi
movaps xmmword [var_30h], xmm0
sub r15, rdx
sar r15, 3
imul r15, rdi
cmp r15, qword [rsp]
ja 0x8024360
cmp rsi, rdx
je 0x80237d0
lea rdi, [rdx + 0x18]
mov qword [rdx], r8
mov qword [rdx + 8], r8
mov byte [rdx + 0x10], 0
cmp rsi, rdi
je 0x80237d0
lea r8, [rsi - 0x30]
lea r10, [var_40h]
movabs r9, 0xaaaaaaaaaaaaaab
sub r8, rdx
lea r13, [var_41h]
lea r11, [var_30h]
shr r8, 3
mov qword [var_18h], r13
lea r13, [rdx + 0x28]
imul r8, r9
movabs r9, 0x1fffffffffffffff
and r8, r9
lea r9, [r8 + r8*2]
shl r9, 3
lea r12, [rdx + r9 + 0x29]
lea r9, [rdx + r9 + 0x28]
cmp r10, r12
setae r12b
cmp qword [var_18h], r13
setbe r13b
or r12d, r13d
cmp r11, r9
setae r9b
cmp rdi, r10
setae r10b
or r9d, r10d
test r12b, r9b
je 0x80238d0
cmp r8, 0xe
jbe 0x80238d0
lea r13, [r8 + 1]
mov r11, qword [var_30h]
mov r9, qword [var_38h]
mov r8, rdi
mov r12, r13
movzx r10d, byte [var_40h]
shr r12, 4
lea r12, [r12 + r12*2]
shl r12, 7
add r12, rdi
nop
mov qword [r8], r11
add r8, 0x180
mov qword [r8 - 0x168], r11
mov qword [r8 - 0x150], r11
mov qword [r8 - 0x138], r11
mov qword [r8 - 0x120], r11
mov qword [r8 - 0x108], r11
mov qword [r8 - 0xf0], r11
mov qword [r8 - 0xd8], r11
mov qword [r8 - 0xc0], r11
mov qword [r8 - 0xa8], r11
mov qword [r8 - 0x90], r11
mov qword [r8 - 0x78], r11
mov qword [r8 - 0x60], r11
mov qword [r8 - 0x48], r11
mov qword [r8 - 0x30], r11
mov qword [r8 - 0x18], r11
mov qword [r8 - 0x178], r9
mov qword [r8 - 0x160], r9
mov qword [r8 - 0x148], r9
mov qword [r8 - 0x130], r9
mov qword [r8 - 0x118], r9
mov qword [r8 - 0x100], r9
mov qword [r8 - 0xe8], r9
mov qword [r8 - 0xd0], r9
mov qword [r8 - 0xb8], r9
mov qword [r8 - 0xa0], r9
mov qword [r8 - 0x88], r9
mov qword [r8 - 0x70], r9
mov qword [r8 - 0x58], r9
mov qword [r8 - 0x40], r9
mov qword [r8 - 0x28], r9
mov qword [r8 - 0x10], r9
mov byte [r8 - 0x170], r10b
mov byte [r8 - 0x158], r10b
mov byte [r8 - 0x140], r10b
mov byte [r8 - 0x128], r10b
mov byte [r8 - 0x110], r10b
mov byte [r8 - 0xf8], r10b
mov byte [r8 - 0xe0], r10b
mov byte [r8 - 0xc8], r10b
mov byte [r8 - 0xb0], r10b
mov byte [r8 - 0x98], r10b
mov byte [r8 - 0x80], r10b
mov byte [r8 - 0x68], r10b
mov byte [r8 - 0x50], r10b
mov byte [r8 - 0x38], r10b
mov byte [r8 - 0x20], r10b
mov byte [r8 - 8], r10b
cmp r8, r12
jne 0x8023500
mov r8, r13
and r8, 0xfffffffffffffff0
lea r9, [r8 + r8*2]
lea rdi, [rdi + r9*8]
cmp r13, r8
je 0x80237d0
movzx r8d, byte [var_40h]
movdqa xmm7, xmmword [var_30h]
mov byte [rdi + 0x10], r8b
lea r8, [rdi + 0x18]
movups xmmword [rdi], xmm7
cmp rsi, r8
je 0x80237d0
movzx r8d, byte [var_40h]
movdqa xmm0, xmmword [var_30h]
lea r9, [rdi + 0x30]
mov byte [rdi + 0x28], r8b
movups xmmword [rdi + 0x18], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x48]
mov byte [rdi + 0x40], r8b
movups xmmword [rdi + 0x30], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x60]
mov byte [rdi + 0x58], r8b
movups xmmword [rdi + 0x48], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x78]
mov byte [rdi + 0x70], r8b
movups xmmword [rdi + 0x60], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x90]
mov byte [rdi + 0x88], r8b
movups xmmword [rdi + 0x78], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0xa8]
mov byte [rdi + 0xa0], r8b
movups xmmword [rdi + 0x90], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0xc0]
mov byte [rdi + 0xb8], r8b
movups xmmword [rdi + 0xa8], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0xd8]
mov byte [rdi + 0xd0], r8b
movups xmmword [rdi + 0xc0], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0xf0]
mov byte [rdi + 0xe8], r8b
movups xmmword [rdi + 0xd8], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x108]
mov byte [rdi + 0x100], r8b
movups xmmword [rdi + 0xf0], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x120]
mov byte [rdi + 0x118], r8b
movups xmmword [rdi + 0x108], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x138]
mov byte [rdi + 0x130], r8b
movups xmmword [rdi + 0x120], xmm0
cmp rsi, r9
je 0x80237d0
lea r9, [rdi + 0x150]
mov byte [rdi + 0x148], r8b
movups xmmword [rdi + 0x138], xmm0
cmp rsi, r9
je 0x80237d0
mov byte [rdi + 0x160], r8b
movups xmmword [rdi + 0x150], xmm0
nop dword [rax]
cmp r15, qword [rsp]
jne 0x80242c0
mov rdi, qword [var_8h]
mov rsi, rbp
mov r15, qword [var_8h]
mov qword [rdx + 0x18], r15
mov dword [arg_48h], 0
mov qword [rsi + 0x18], rdi
mov edx, eax
and edx, 0xa0000
cmp edx, 0xa0000
je 0x8024c6e
mov rdi, rbx
lea rdx, [0x08023814]
test ah, 0x10
jne 0x8023834
mov eax, dword [rcx + 0x50]
shl rax, 4
mov rdx, rax
lea rax, [0x0802382a]
add rax, rdx
mov rdx, qword [rax]
add rdi, qword [rax + 8]
test dl, 1
je 0x8023841
mov rax, qword [rdi]
mov rdx, qword [rax + rdx - 1]
call rdx
mov r13d, eax
mov rax, qword [var_28h]
mov rbp, qword [rax]
movzx eax, byte [0x08023855]
test al, al
je _ZGVZN5boost13re_detail_50015mem_block_cache8instanceEvE11block_cache
mov rax, qword [r14]
test rax, rax
je 0x80238f8
add r14, 8
lea rax, [0x08023874]
cmp r14, rax
jne 0x802385d
mov rdi, rbp
call _ZdlPv
jmp 0x8023903
nop word cs:[rax + rax]
movzx r8d, byte [var_40h]
movdqa xmm1, xmmword [var_30h]
add rdx, 0x18
movups xmmword [rdx - 0x18], xmm1
mov byte [rdx - 8], r8b
cmp rsi, rdx
jne 0x8023890
jmp 0x8023300
nop word [rax + rax]
mov rax, qword [rcx + 0x40]
mov qword [var_8h], rax
add rax, 2
mov qword [rsp], rax
jmp 0x8022f03
nop
movzx r8d, byte [var_40h]
movdqa xmm2, xmmword [var_30h]
add rdi, 0x18
movups xmmword [rdi - 0x18], xmm2
mov byte [rdi - 8], r8b
cmp rsi, rdi
jne 0x80238d0
jmp 0x80237d0
nop word [rax + rax]
lock cmpxchg qword [r14], rbp
jne 0x8023869
mov rax, qword [var_28h]
mov qword [rax], 0
add rsp, 0x58
mov eax, r13d
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax]
movzx esi, byte [var_40h]
movdqa xmm3, xmmword [var_30h]
add rdx, 0x18
movups xmmword [rdx - 0x18], xmm3
mov byte [rdx - 8], sil
cmp rdi, rdx
jne 0x8023928
nop dword [rax]
mov rdx, r12
mov r13, rbp
jmp 0x8023336
nop dword [rax + rax]
lea rdi, [0x0802395f]
call __cxa_guard_acquire
test eax, eax
je _ZZN5boost13re_detail_50015mem_block_cache8instanceEvE11block_cache
lea rdi, [0x08023973]
call __cxa_guard_release
lea rdx, [0x0802397f]
lea rsi, [0x08023986]
lea rdi, [0x0802398d]
call __cxa_atexit
jmp _ZZN5boost13re_detail_50015mem_block_cache8instanceEvE11block_cache
nop word [rax + rax]
mov rcx, qword [rbx]
movzx r13d, byte [rcx + 0x4c]
mov rdx, qword [rcx + 8]
mov rdi, qword [rcx]
test r13b, r13b
jne 0x80242a8
sub rdx, rdi
add rcx, 0x20
movabs rsi, 0xaaaaaaaaaaaaaaab
sar rdx, 3
imul rdx, rsi
lea rsi, [rdi + 0x30]
cmp edx, 2
cmovg rcx, rsi
mov r12, qword [rcx + 8]
mov qword [rbx + 0x28], r12
mov qword [rbx + 0x38], r12
test ah, 8
je 0x80247c0
mov rcx, qword [rbx + 0x20]
mov rbp, qword [rbx + 0x10]
test eax, 0x40000
je 0x80242f8
mov qword [rsp], 3
mov qword [var_8h], 1
mov rsi, qword [arg_8h]
mov rdx, qword [rbp]
movq xmm0, rcx
movabs rdi, 0xaaaaaaaaaaaaaaab
punpcklqdq xmm0, xmm0
mov byte [var_40h], 0
mov r15, rsi
movaps xmmword [var_30h], xmm0
sub r15, rdx
sar r15, 3
imul r15, rdi
cmp r15, qword [rsp]
ja 0x8024810
cmp rsi, rdx
je 0x8023df0
mov qword [rdx], rcx
lea rcx, [rdx + 0x18]
mov byte [rdx + 0x10], 0
movhps qword [rdx + 8], xmm0
cmp rsi, rcx
je 0x8023df0
lea rdi, [rsi - 0x30]
lea r9, [var_40h]
movabs r8, 0xaaaaaaaaaaaaaab
sub rdi, rdx
lea r13, [var_41h]
lea r10, [var_30h]
shr rdi, 3
mov qword [var_10h], r13
lea r13, [rdx + 0x28]
imul rdi, r8
movabs r8, 0x1fffffffffffffff
and rdi, r8
lea r8, [rdi + rdi*2]
shl r8, 3
lea r11, [rdx + r8 + 0x29]
lea r8, [rdx + r8 + 0x28]
cmp r9, r11
setae r11b
cmp qword [var_10h], r13
setbe r13b
or r11d, r13d
cmp r10, r8
setae r8b
cmp rcx, r9
setae r9b
or r8d, r9d
test r11b, r8b
je 0x8024280
cmp rdi, 0xe
jbe 0x8024280
lea r13, [rdi + 1]
mov r10, qword [var_30h]
mov r8, qword [var_38h]
mov rdi, rcx
mov r11, r13
movzx r9d, byte [var_40h]
shr r11, 4
lea r11, [r11 + r11*2]
shl r11, 7
add r11, rcx
nop dword [rax + rax]
mov qword [rdi], r10
add rdi, 0x180
mov qword [rdi - 0x168], r10
mov qword [rdi - 0x150], r10
mov qword [rdi - 0x138], r10
mov qword [rdi - 0x120], r10
mov qword [rdi - 0x108], r10
mov qword [rdi - 0xf0], r10
mov qword [rdi - 0xd8], r10
mov qword [rdi - 0xc0], r10
mov qword [rdi - 0xa8], r10
mov qword [rdi - 0x90], r10
mov qword [rdi - 0x78], r10
mov qword [rdi - 0x60], r10
mov qword [rdi - 0x48], r10
mov qword [rdi - 0x30], r10
mov qword [rdi - 0x18], r10
mov qword [rdi - 0x178], r8
mov qword [rdi - 0x160], r8
mov qword [rdi - 0x148], r8
mov qword [rdi - 0x130], r8
mov qword [rdi - 0x118], r8
mov qword [rdi - 0x100], r8
mov qword [rdi - 0xe8], r8
mov qword [rdi - 0xd0], r8
mov qword [rdi - 0xb8], r8
mov qword [rdi - 0xa0], r8
mov qword [rdi - 0x88], r8
mov qword [rdi - 0x70], r8
mov qword [rdi - 0x58], r8
mov qword [rdi - 0x40], r8
mov qword [rdi - 0x28], r8
mov qword [rdi - 0x10], r8
mov byte [rdi - 0x170], r9b
mov byte [rdi - 0x158], r9b
mov byte [rdi - 0x140], r9b
mov byte [rdi - 0x128], r9b
mov byte [rdi - 0x110], r9b
mov byte [rdi - 0xf8], r9b
mov byte [rdi - 0xe0], r9b
mov byte [rdi - 0xc8], r9b
mov byte [rdi - 0xb0], r9b
mov byte [rdi - 0x98], r9b
mov byte [rdi - 0x80], r9b
mov byte [rdi - 0x68], r9b
mov byte [rdi - 0x50], r9b
mov byte [rdi - 0x38], r9b
mov byte [rdi - 0x20], r9b
mov byte [rdi - 8], r9b
cmp rdi, r11
jne 0x8023b28
mov rdi, r13
and rdi, 0xfffffffffffffff0
lea r8, [rdi + rdi*2]
lea rcx, [rcx + r8*8]
cmp r13, rdi
je 0x8023df0
movzx edi, byte [var_40h]
movdqa xmm5, xmmword [var_30h]
mov byte [rcx + 0x10], dil
lea rdi, [rcx + 0x18]
movups xmmword [rcx], xmm5
cmp rsi, rdi
je 0x8023df0
movzx edi, byte [var_40h]
movdqa xmm0, xmmword [var_30h]
lea r8, [rcx + 0x30]
mov byte [rcx + 0x28], dil
movups xmmword [rcx + 0x18], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x48]
mov byte [rcx + 0x40], dil
movups xmmword [rcx + 0x30], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x60]
mov byte [rcx + 0x58], dil
movups xmmword [rcx + 0x48], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x78]
mov byte [rcx + 0x70], dil
movups xmmword [rcx + 0x60], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x90]
mov byte [rcx + 0x88], dil
movups xmmword [rcx + 0x78], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0xa8]
mov byte [rcx + 0xa0], dil
movups xmmword [rcx + 0x90], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0xc0]
mov byte [rcx + 0xb8], dil
movups xmmword [rcx + 0xa8], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0xd8]
mov byte [rcx + 0xd0], dil
movups xmmword [rcx + 0xc0], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0xf0]
mov byte [rcx + 0xe8], dil
movups xmmword [rcx + 0xd8], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x108]
mov byte [rcx + 0x100], dil
movups xmmword [rcx + 0xf0], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x120]
mov byte [rcx + 0x118], dil
movups xmmword [rcx + 0x108], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x138]
mov byte [rcx + 0x130], dil
movups xmmword [rcx + 0x120], xmm0
cmp rsi, r8
je 0x8023df0
lea r8, [rcx + 0x150]
mov byte [rcx + 0x148], dil
movups xmmword [rcx + 0x138], xmm0
cmp rsi, r8
je 0x8023df0
mov byte [rcx + 0x160], dil
movups xmmword [rcx + 0x150], xmm0
nop
cmp r15, qword [rsp]
jne 0x8024320
mov qword [rdx + 0x18], r12
mov rdx, qword [rbx + 0x48]
mov dword [arg_48h], 0
mov rcx, qword [rdx]
jmp 0x80233bc
nop dword [rax]
lea rdi, [0x08023e1f]
call __cxa_guard_acquire
test eax, eax
je 0x802385d
lea rdi, [0x08023e33]
call __cxa_guard_release
lea rdx, [0x08023e3f]
lea rsi, [0x08023e46]
lea rdi, [0x08023e4d]
call __cxa_atexit
jmp 0x802385d
nop word [rax + rax]
mov r12, qword [r13 + 0x40]
mov qword [r13 + 0x38], rcx
test r12, r12
je 0x80233b3
mov r15, qword [0x08023e78]
test r15, r15
jne 0x8024348
mov eax, dword [r12 + 8]
lea edx, [rax - 1]
mov dword [r12 + 8], edx
cmp eax, 1
je 0x8024be0
mov qword [r13 + 0x40], rbp
test rbp, rbp
je 0x80233ac
lea rdx, [arg_8h]
jmp 0x8023391
nop dword [rax]
mov rdi, qword [var_8h]
lea rdi, [rdi + rdi*2]
lea rdi, [rax + rdi*8 + 0x30]
cmp rsi, rdi
je 0x8023ec7
mov qword [arg_8h], rdi
cmp rax, rdi
je 0x8023948
mov qword [rax], rdx
mov qword [rax + 8], rdx
lea rdx, [rax + 0x18]
mov byte [rax + 0x10], 0
cmp rdi, rdx
je 0x8023948
mov rsi, rdi
lea r9, [var_40h]
lea r13, [var_41h]
movabs r8, 0xaaaaaaaaaaaaaab
sub rsi, rax
mov qword [rsp], r13
lea r13, [rax + 0x28]
lea r10, [var_30h]
sub rsi, 0x30
shr rsi, 3
imul rsi, r8
movabs r8, 0x1fffffffffffffff
and rsi, r8
lea r8, [rsi + rsi*2]
shl r8, 3
lea r11, [rax + r8 + 0x29]
lea r8, [rax + r8 + 0x28]
cmp r9, r11
setae r11b
cmp qword [rsp], r13
setbe r13b
or r11d, r13d
cmp r10, r8
setae r8b
cmp rdx, r9
setae r9b
or r8d, r9d
test r11b, r8b
je 0x8023928
cmp rsi, 0xe
jbe 0x8023928
add rsi, 1
mov r11, qword [var_30h]
mov r9, qword [var_38h]
mov r8, rdx
mov r13, rsi
movzx r10d, byte [var_40h]
shr r13, 4
lea r13, [r13 + r13*2]
shl r13, 7
add r13, rdx
nop word [rax + rax]
mov qword [r8], r11
add r8, 0x180
mov qword [r8 - 0x168], r11
mov qword [r8 - 0x150], r11
mov qword [r8 - 0x138], r11
mov qword [r8 - 0x120], r11
mov qword [r8 - 0x108], r11
mov qword [r8 - 0xf0], r11
mov qword [r8 - 0xd8], r11
mov qword [r8 - 0xc0], r11
mov qword [r8 - 0xa8], r11
mov qword [r8 - 0x90], r11
mov qword [r8 - 0x78], r11
mov qword [r8 - 0x60], r11
mov qword [r8 - 0x48], r11
mov qword [r8 - 0x30], r11
mov qword [r8 - 0x18], r11
mov qword [r8 - 0x178], r9
mov qword [r8 - 0x160], r9
mov qword [r8 - 0x148], r9
mov qword [r8 - 0x130], r9
mov qword [r8 - 0x118], r9
mov qword [r8 - 0x100], r9
mov qword [r8 - 0xe8], r9
mov qword [r8 - 0xd0], r9
mov qword [r8 - 0xb8], r9
mov qword [r8 - 0xa0], r9
mov qword [r8 - 0x88], r9
mov qword [r8 - 0x70], r9
mov qword [r8 - 0x58], r9
mov qword [r8 - 0x40], r9
mov qword [r8 - 0x28], r9
mov qword [r8 - 0x10], r9
mov byte [r8 - 0x170], r10b
mov byte [r8 - 0x158], r10b
mov byte [r8 - 0x140], r10b
mov byte [r8 - 0x128], r10b
mov byte [r8 - 0x110], r10b
mov byte [r8 - 0xf8], r10b
mov byte [r8 - 0xe0], r10b
mov byte [r8 - 0xc8], r10b
mov byte [r8 - 0xb0], r10b
mov byte [r8 - 0x98], r10b
mov byte [r8 - 0x80], r10b
mov byte [r8 - 0x68], r10b
mov byte [r8 - 0x50], r10b
mov byte [r8 - 0x38], r10b
mov byte [r8 - 0x20], r10b
mov byte [r8 - 8], r10b
cmp r13, r8
jne 0x8023fa0
mov r8, rsi
and r8, 0xfffffffffffffff0
lea r9, [r8 + r8*2]
lea rdx, [rdx + r9*8]
cmp rsi, r8
je 0x8023948
movzx esi, byte [var_40h]
movdqa xmm6, xmmword [var_30h]
mov byte [rdx + 0x10], sil
lea rsi, [rdx + 0x18]
movups xmmword [rdx], xmm6
cmp rdi, rsi
je 0x8023948
movzx esi, byte [var_40h]
movdqa xmm0, xmmword [var_30h]
lea r8, [rdx + 0x30]
mov byte [rdx + 0x28], sil
movups xmmword [rdx + 0x18], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x48]
mov byte [rdx + 0x40], sil
movups xmmword [rdx + 0x30], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x60]
mov byte [rdx + 0x58], sil
movups xmmword [rdx + 0x48], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x78]
mov byte [rdx + 0x70], sil
movups xmmword [rdx + 0x60], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x90]
mov byte [rdx + 0x88], sil
movups xmmword [rdx + 0x78], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0xa8]
mov byte [rdx + 0xa0], sil
movups xmmword [rdx + 0x90], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0xc0]
mov byte [rdx + 0xb8], sil
movups xmmword [rdx + 0xa8], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0xd8]
mov byte [rdx + 0xd0], sil
movups xmmword [rdx + 0xc0], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0xf0]
mov byte [rdx + 0xe8], sil
movups xmmword [rdx + 0xd8], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x108]
mov byte [rdx + 0x100], sil
movups xmmword [rdx + 0xf0], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x120]
mov byte [rdx + 0x118], sil
movups xmmword [rdx + 0x108], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x138]
mov byte [rdx + 0x130], sil
movups xmmword [rdx + 0x120], xmm0
cmp rdi, r8
je 0x8023948
lea r8, [rdx + 0x150]
mov byte [rdx + 0x148], sil
movups xmmword [rdx + 0x138], xmm0
cmp rdi, r8
je 0x8023948
mov byte [rdx + 0x160], sil
movups xmmword [rdx + 0x150], xmm0
jmp 0x8023948
movzx edi, byte [var_40h]
movdqa xmm4, xmmword [var_30h]
add rcx, 0x18
movups xmmword [rcx - 0x18], xmm4
mov byte [rcx - 8], dil
cmp rsi, rcx
jne 0x8024280
jmp 0x8023df0
nop dword [rax]
cmp rdx, rdi
jne 0x80239b8
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE17raise_logic_errorEv
nop word cs:[rax + rax]
mov rax, qword [var_10h]
lea rcx, [var_30h]
mov rdi, rbp
sub rax, r15
lea rdx, [rax + 2]
call _ZNSt6vectorIN5boost9sub_matchIPKwEESaIS4_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS4_S6_EEmRKS4_
mov rax, qword [rbx + 0x48]
mov rsi, qword [rbx]
mov rdi, qword [rbx + 0x18]
mov rdx, qword [rbp]
mov rcx, qword [rax]
mov eax, dword [rbx + 0x60]
jmp 0x80237e2
nop dword [rax + rax]
mov rdx, qword [rbx + 0x48]
mov rdx, qword [rdx]
test rdx, rdx
je 0x8023a04
mov rsi, qword [rdx + 0x40]
mov qword [var_8h], rsi
add rsi, 2
mov qword [rsp], rsi
jmp 0x8023a15
nop
mov rax, qword [var_8h]
lea rcx, [var_30h]
mov rdi, rbp
sub rax, r15
lea rdx, [rax + 2]
call _ZNSt6vectorIN5boost9sub_matchIPKwEESaIS4_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS4_S6_EEmRKS4_
mov rdx, qword [rbp]
mov eax, dword [rbx + 0x60]
jmp 0x8023dfa
nop dword [rax]
mov eax, 0xffffffff
lock xadd dword [r12 + 8], eax
jmp 0x8023e8e
nop dword [rax]
mov rdi, qword [var_10h]
lea rdi, [rdi + rdi*2]
lea rdi, [rdx + rdi*8 + 0x30]
cmp rsi, rdi
je 0x8024377
mov qword [arg_8h], rdi
cmp rdx, rdi
je 0x80237da
lea rsi, [rdx + 0x18]
mov qword [rdx], r8
mov qword [rdx + 8], r8
mov byte [rdx + 0x10], 0
cmp rsi, rdi
je 0x80237da
mov r8, rdi
lea r10, [var_40h]
lea r13, [rdx + 0x28]
movabs r9, 0xaaaaaaaaaaaaaab
sub r8, rdx
lea r15, [var_41h]
lea r11, [var_30h]
sub r8, 0x30
shr r8, 3
imul r8, r9
movabs r9, 0x1fffffffffffffff
and r8, r9
lea r9, [r8 + r8*2]
shl r9, 3
lea r12, [rdx + r9 + 0x29]
lea r9, [rdx + r9 + 0x28]
cmp r10, r12
setae r12b
cmp r15, r13
setbe r13b
or r12d, r13d
cmp r11, r9
setae r9b
cmp rsi, r10
setae r10b
or r9d, r10d
test r12b, r9b
je 0x8024730
cmp r8, 0xe
jbe 0x8024730
lea r13, [r8 + 1]
mov r11, qword [var_30h]
mov r9, qword [var_38h]
mov r8, rsi
mov r12, r13
movzx r10d, byte [var_40h]
shr r12, 4
lea r12, [r12 + r12*2]
shl r12, 7
add r12, rsi
nop dword [rax]
mov qword [r8], r11
add r8, 0x180
mov qword [r8 - 0x168], r11
mov qword [r8 - 0x150], r11
mov qword [r8 - 0x138], r11
mov qword [r8 - 0x120], r11
mov qword [r8 - 0x108], r11
mov qword [r8 - 0xf0], r11
mov qword [r8 - 0xd8], r11
mov qword [r8 - 0xc0], r11
mov qword [r8 - 0xa8], r11
mov qword [r8 - 0x90], r11
mov qword [r8 - 0x78], r11
mov qword [r8 - 0x60], r11
mov qword [r8 - 0x48], r11
mov qword [r8 - 0x30], r11
mov qword [r8 - 0x18], r11
mov qword [r8 - 0x178], r9
mov qword [r8 - 0x160], r9
mov qword [r8 - 0x148], r9
mov qword [r8 - 0x130], r9
mov qword [r8 - 0x118], r9
mov qword [r8 - 0x100], r9
mov qword [r8 - 0xe8], r9
mov qword [r8 - 0xd0], r9
mov qword [r8 - 0xb8], r9
mov qword [r8 - 0xa0], r9
mov qword [r8 - 0x88], r9
mov qword [r8 - 0x70], r9
mov qword [r8 - 0x58], r9
mov qword [r8 - 0x40], r9
mov qword [r8 - 0x28], r9
mov qword [r8 - 0x10], r9
mov byte [r8 - 0x170], r10b
mov byte [r8 - 0x158], r10b
mov byte [r8 - 0x140], r10b
mov byte [r8 - 0x128], r10b
mov byte [r8 - 0x110], r10b
mov byte [r8 - 0xf8], r10b
mov byte [r8 - 0xe0], r10b
mov byte [r8 - 0xc8], r10b
mov byte [r8 - 0xb0], r10b
mov byte [r8 - 0x98], r10b
mov byte [r8 - 0x80], r10b
mov byte [r8 - 0x68], r10b
mov byte [r8 - 0x50], r10b
mov byte [r8 - 0x38], r10b
mov byte [r8 - 0x20], r10b
mov byte [r8 - 8], r10b
cmp r12, r8
jne 0x8024448
mov r8, r13
and r8, 0xfffffffffffffff0
lea r9, [r8 + r8*2]
lea rsi, [rsi + r9*8]
cmp r13, r8
je 0x80237da
movzx r8d, byte [var_40h]
movdqa xmm4, xmmword [var_30h]
mov byte [rsi + 0x10], r8b
lea r8, [rsi + 0x18]
movups xmmword [rsi], xmm4
cmp rdi, r8
je 0x80237da
movzx r8d, byte [var_40h]
movdqa xmm0, xmmword [var_30h]
lea r9, [rsi + 0x30]
mov byte [rsi + 0x28], r8b
movups xmmword [rsi + 0x18], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x48]
mov byte [rsi + 0x40], r8b
movups xmmword [rsi + 0x30], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x60]
mov byte [rsi + 0x58], r8b
movups xmmword [rsi + 0x48], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x78]
mov byte [rsi + 0x70], r8b
movups xmmword [rsi + 0x60], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x90]
mov byte [rsi + 0x88], r8b
movups xmmword [rsi + 0x78], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0xa8]
mov byte [rsi + 0xa0], r8b
movups xmmword [rsi + 0x90], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0xc0]
mov byte [rsi + 0xb8], r8b
movups xmmword [rsi + 0xa8], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0xd8]
mov byte [rsi + 0xd0], r8b
movups xmmword [rsi + 0xc0], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0xf0]
mov byte [rsi + 0xe8], r8b
movups xmmword [rsi + 0xd8], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x108]
mov byte [rsi + 0x100], r8b
movups xmmword [rsi + 0xf0], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x120]
mov byte [rsi + 0x118], r8b
movups xmmword [rsi + 0x108], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x138]
mov byte [rsi + 0x130], r8b
movups xmmword [rsi + 0x120], xmm0
cmp rdi, r9
je 0x80237da
lea r9, [rsi + 0x150]
mov byte [rsi + 0x148], r8b
movups xmmword [rsi + 0x138], xmm0
cmp rdi, r9
je 0x80237da
mov byte [rsi + 0x160], r8b
movups xmmword [rsi + 0x150], xmm0
jmp 0x80237da
nop word [rax + rax]
movzx r8d, byte [var_40h]
movdqa xmm6, xmmword [var_30h]
add rsi, 0x18
movups xmmword [rsi - 0x18], xmm6
mov byte [rsi - 8], r8b
cmp rsi, rdi
jne 0x8024730
jmp 0x80237da
nop word [rax + rax]
mov qword [rsp], 3
mov qword [var_10h], 1
jmp 0x80233f1
nop
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x10]
test r15, r15
jne 0x8024c25
mov eax, dword [arg_ch]
lea edx, [rax - 1]
mov dword [arg_ch], edx
cmp eax, 1
jne 0x80233ac
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x18]
jmp 0x80233ac
nop dword [rax]
mov eax, 0xffffffff
lock xadd dword [rdx], eax
jmp 0x80233a3
nop word cs:[rax + rax]
test r13b, r13b
jne _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE17raise_logic_errorEv
mov rcx, qword [rbx + 0x20]
cmp edx, 2
jle 0x80247f0
cmp byte [rdi + 0x40], 0
je 0x80247f0
mov rsi, qword [rdi + 0x30]
cmp qword [rdi + 0x38], rsi
jne 0x80239f5
nop word cs:[rax + rax]
cmp r12, rcx
je 0x8023846
lea rdx, [r12 + 4]
mov qword [rbx + 0x28], rdx
jmp 0x80239f5
nop word [rax + rax]
mov rcx, qword [var_8h]
mov rdi, rsi
lea rcx, [rcx + rcx*2]
lea rcx, [rdx + rcx*8 + 0x30]
cmp rsi, rcx
je 0x8024832
mov rdi, rcx
cmp rcx, rsi
je 0x8024832
mov qword [arg_8h], rcx
cmp rdi, rdx
je 0x8023dfa
mov rsi, rdi
lea r9, [var_40h]
lea r13, [rdx + 0x10]
mov rcx, rdx
sub rsi, rdx
lea r15, [var_41h]
lea r10, [var_30h]
movabs r8, 0xaaaaaaaaaaaaaab
sub rsi, 0x18
shr rsi, 3
imul rsi, r8
movabs r8, 0x1fffffffffffffff
and rsi, r8
lea r8, [rsi + rsi*2]
shl r8, 3
lea r11, [rdx + r8 + 0x11]
lea r8, [rdx + r8 + 0x10]
cmp r9, r11
setae r11b
cmp r15, r13
setbe r13b
or r11d, r13d
cmp r10, r8
setae r8b
cmp rdx, r9
setae r9b
or r8d, r9d
test r11b, r8b
je 0x8024c42
cmp rsi, 0xe
jbe 0x8024c42
add rsi, 1
mov r10, qword [var_30h]
mov r9, qword [var_38h]
mov r11, rsi
movzx r8d, byte [var_40h]
shr r11, 4
lea r11, [r11 + r11*2]
shl r11, 7
add r11, rdx
nop word [rax + rax]
mov qword [rcx], r10
add rcx, 0x180
mov qword [rcx - 0x168], r10
mov qword [rcx - 0x150], r10
mov qword [rcx - 0x138], r10
mov qword [rcx - 0x120], r10
mov qword [rcx - 0x108], r10
mov qword [rcx - 0xf0], r10
mov qword [rcx - 0xd8], r10
mov qword [rcx - 0xc0], r10
mov qword [rcx - 0xa8], r10
mov qword [rcx - 0x90], r10
mov qword [rcx - 0x78], r10
mov qword [rcx - 0x60], r10
mov qword [rcx - 0x48], r10
mov qword [rcx - 0x30], r10
mov qword [rcx - 0x18], r10
mov qword [rcx - 0x178], r9
mov qword [rcx - 0x160], r9
mov qword [rcx - 0x148], r9
mov qword [rcx - 0x130], r9
mov qword [rcx - 0x118], r9
mov qword [rcx - 0x100], r9
mov qword [rcx - 0xe8], r9
mov qword [rcx - 0xd0], r9
mov qword [rcx - 0xb8], r9
mov qword [rcx - 0xa0], r9
mov qword [rcx - 0x88], r9
mov qword [rcx - 0x70], r9
mov qword [rcx - 0x58], r9
mov qword [rcx - 0x40], r9
mov qword [rcx - 0x28], r9
mov qword [rcx - 0x10], r9
mov byte [rcx - 0x170], r8b
mov byte [rcx - 0x158], r8b
mov byte [rcx - 0x140], r8b
mov byte [rcx - 0x128], r8b
mov byte [rcx - 0x110], r8b
mov byte [rcx - 0xf8], r8b
mov byte [rcx - 0xe0], r8b
mov byte [rcx - 0xc8], r8b
mov byte [rcx - 0xb0], r8b
mov byte [rcx - 0x98], r8b
mov byte [rcx - 0x80], r8b
mov byte [rcx - 0x68], r8b
mov byte [rcx - 0x50], r8b
mov byte [rcx - 0x38], r8b
mov byte [rcx - 0x20], r8b
mov byte [rcx - 8], r8b
cmp rcx, r11
jne 0x80248f0
mov r8, rsi
and r8, 0xfffffffffffffff0
lea rcx, [r8 + r8*2]
lea rcx, [rdx + rcx*8]
cmp rsi, r8
je 0x8023dfa
movzx esi, byte [var_40h]
movdqa xmm3, xmmword [var_30h]
mov byte [rcx + 0x10], sil
lea rsi, [rcx + 0x18]
movups xmmword [rcx], xmm3
cmp rdi, rsi
je 0x8023dfa
movdqa xmm0, xmmword [var_30h]
movzx esi, byte [var_40h]
lea r8, [rcx + 0x30]
mov byte [rcx + 0x28], sil
movups xmmword [rcx + 0x18], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x48]
mov byte [rcx + 0x40], sil
movups xmmword [rcx + 0x30], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x60]
mov byte [rcx + 0x58], sil
movups xmmword [rcx + 0x48], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x78]
mov byte [rcx + 0x70], sil
movups xmmword [rcx + 0x60], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x90]
mov byte [rcx + 0x88], sil
movups xmmword [rcx + 0x78], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0xa8]
mov byte [rcx + 0xa0], sil
movups xmmword [rcx + 0x90], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0xc0]
mov byte [rcx + 0xb8], sil
movups xmmword [rcx + 0xa8], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0xd8]
mov byte [rcx + 0xd0], sil
movups xmmword [rcx + 0xc0], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0xf0]
mov byte [rcx + 0xe8], sil
movups xmmword [rcx + 0xd8], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x108]
mov byte [rcx + 0x100], sil
movups xmmword [rcx + 0xf0], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x120]
mov byte [rcx + 0x118], sil
movups xmmword [rcx + 0x108], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x138]
mov byte [rcx + 0x130], sil
movups xmmword [rcx + 0x120], xmm0
cmp rdi, r8
je 0x8023dfa
lea r8, [rcx + 0x150]
mov byte [rcx + 0x148], sil
movups xmmword [rcx + 0x138], xmm0
cmp rdi, r8
je 0x8023dfa
mov byte [rcx + 0x160], sil
movups xmmword [rcx + 0x150], xmm0
jmp 0x8023dfa
lock add dword [rdx], 1
jmp 0x802336a
nop dword [rax]
mov rax, qword [r12]
mov rdi, r12
call qword [rax + 0x10]
test r15, r15
jne 0x8024c34
mov eax, dword [r12 + 0xc]
lea edx, [rax - 1]
mov dword [r12 + 0xc], edx
cmp eax, 1
jne 0x8023e97
mov rax, qword [r12]
mov rdi, r12
call qword [rax + 0x18]
jmp 0x8023e97
nop dword [rax]
lock add dword [rdx], 1
mov r12, qword [r13 + 0x40]
jmp 0x8023384
mov eax, 0xffffffff
lock xadd dword [arg_ch], eax
jmp 0x802478c
mov eax, 0xffffffff
lock xadd dword [r12 + 0xc], eax
jmp 0x8024bfc
mov rcx, rdx
nop dword [rax]
movdqa xmm7, xmmword [var_30h]
movzx esi, byte [var_40h]
add rcx, 0x18
movups xmmword [rcx - 0x18], xmm7
mov byte [rcx - 8], sil
cmp rdi, rcx
jne 0x8024c48
jmp 0x8023dfa
call _ZN5boost13match_resultsIPKwSaINS_9sub_matchIS2_EEEE17raise_logic_errorEv
lea r12, [var_30h]
lea rsi, [0x08024c7a]
mov rdi, r12
call _ZNSt11logic_errorC1EPKc
mov rdi, r12
call _ZN5boost15throw_exceptionISt11logic_errorEEvRKT_
mov rdi, rax
jmp __cxa_begin_catch
mov rbp, rax
mov rdi, r12
call _ZNSt11logic_errorD1Ev
mov rdi, rbp
call __cxa_begin_catch
mov esi, 1
mov rdi, rbx
call _ZN5boost13re_detail_50012perl_matcherIPKwSaINS_9sub_matchIS3_EEENS_14c_regex_traitsIwEEE6unwindEb
test al, al
jne 0x8024ca2
call __cxa_rethrow
mov rbp, rax
call __cxa_end_catch
lea rdi, [var_28h]
call _ZN5boost13re_detail_50015save_state_initD1Ev
add byte [rax], al
add byte [rax], al
mov rdi, rbp
call _Unwind_Resume
