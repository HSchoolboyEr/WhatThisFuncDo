push r15
mov edx, 0x400
push r14
push r13
lea r13, [rdi + 0x1040]
push r12
push rbp
mov rbp, rdi
push rbx
sub rsp, 0x18
mov rax, qword [rdi + 0x2040]
mov qword [var_8h], 0
lea rcx, [var_8h]
sub rdx, rax
lea rsi, [r13 + rax*4]
mov rax, qword [rdi]
call qword [rax + 0x70]
mov r12d, eax
xor eax, eax
test r12b, r12b
je 0x800055f
mov rdi, qword [var_8h]
add rdi, qword [rbp + 0x2040]
lea r14, [arg_40h]
mov qword [rbp + 0x2040], rdi
shl rdi, 2
lea rcx, [r13 + rdi]
cmp r13, rcx
je 0x80005ea
mov rdx, r13
mov rbx, r14
jmp 0x80004d7
nop
lea esi, [rax - 0xd800]
cmp esi, 0x7ff
jbe 0x80004e4
cmp eax, 0xd
je 0x80004d2
cmp eax, 0x7f
ja 0x8000609
mov byte [rbx], al
add rbx, 1
cmp rcx, rdx
je 0x8000510
mov eax, dword [rdx]
add rdx, 4
cmp eax, 0x10ffff
jbe 0x80004b0
mov eax, 0xffffffbd
mov r8d, 0xffffffbf
mov esi, 0xffffffef
mov byte [rbx], sil
add rbx, 3
mov byte [rbx - 2], r8b
mov byte [rbx - 1], al
cmp rcx, rdx
jne 0x80004d7
nop word [rax + rax]
sub rcx, rbp
lea rsi, [rcx - 0x1040]
sub rdi, rsi
mov rax, rdi
sar rax, 2
cmp r14, rbx
mov qword [rbp + 0x2040], rax
setb r15b
test rax, rax
jne 0x8000570
cmp byte [rbp + 0x2060], 0
je 0x8000545
test r15b, r15b
jne 0x8000590
cmp r14, rbx
je 0x8000552
cmp byte [rbx - 1], 0xa
sete r12b
mov byte [rbp + 0x2060], r12b
mov rax, rbx
sub rax, r14
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop
add rsi, r13
mov rdx, rdi
mov rdi, r13
call memmove
cmp byte [rbp + 0x2060], 0
jne 0x8000540
jmp 0x8000545
nop dword [rax]
cmp byte [arg_40h], 0x1a
jne 0x800054a
mov rax, qword [rbp]
lea rdx, [0x080005a1]
add byte [rax], al
add byte [rax], al
mov rax, qword [rax + 0x30]
cmp rax, rdx
jne 0x80005fd
mov byte [rbp + 0x2060], 1
mov rax, qword [rbp + 0x2048]
mov qword [rbp + 0x2040], 0
cmp rax, qword [rbp + 0x2050]
je 0x80005d3
mov qword [rbp + 0x2050], rax
pxor xmm0, xmm0
mov qword [arg_18h], 0
xor eax, eax
movups xmmword [arg_8h], xmm0
jmp 0x800055f
mov qword [rbp + 0x2040], 0
mov rbx, r14
jmp 0x8000552
mov rdi, rbp
call rax
xor eax, eax
jmp 0x800055f
mov r8d, eax
shr r8d, 6
cmp eax, 0x7ff
ja 0x8000631
and eax, 0x3f
or r8d, 0xffffffc0
add rbx, 2
or eax, 0xffffff80
mov byte [rbx - 2], r8b
mov byte [rbx - 1], al
jmp 0x80004d2
mov esi, eax
and r8d, 0x3f
shr esi, 0xc
or r8d, 0xffffff80
cmp eax, 0xffff
jbe 0x8000674
mov r9d, eax
and esi, 0x3f
and eax, 0x3f
mov byte [rbx + 2], r8b
shr r9d, 0x12
or esi, 0xffffff80
or eax, 0xffffff80
add rbx, 4
or r9d, 0xfffffff0
mov byte [rbx - 3], sil
mov byte [rbx - 4], r9b
mov byte [rbx - 1], al
jmp 0x80004d2
and eax, 0x3f
or esi, 0xffffffe0
or eax, 0xffffff80
jmp 0x80004f4
