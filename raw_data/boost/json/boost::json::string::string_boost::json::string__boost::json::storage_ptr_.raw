push r13
mov r13, rsi
push r12
push rbp
mov rbp, rdi
push rbx
sub rsp, 8
mov rdi, qword [rdx]
mov qword [rdx], 0
mov edx, 0x85
mov byte [arg_17h], 0xe
mov qword [rbp], rdi
mov word [arg_8h], dx
mov rsi, qword [rsi]
test rsi, rsi
jne 0x800bf00
lea rsi, [0x0800be1e]
test rdi, rdi
je 0x800bedb
and rdi, 0xfffffffffffffffc
cmp rdi, rsi
je 0x800bedb
mov rax, qword [rdi]
call qword [rax + 0x20]
test al, al
jne 0x800bea0
cmp rbp, r13
je 0x800bef4
movzx eax, byte [r13 + 8]
cmp al, 5
je 0x800bf20
movsx rdx, byte [r13 + 0x17]
mov r12d, 0xe
sub r12, rdx
cmp al, 0x85
je 0x800bf70
mov rbx, qword [r13 + 0x10]
lea r13, [rbx + 8]
lea rdi, [arg_8h]
mov rdx, rbp
mov rsi, r12
call _ZN5boost4json6detail11string_impl6assignEmRKNS0_11storage_ptrE
mov rdi, rax
test r12, r12
je 0x800bef4
add rsp, 8
mov rdx, r12
mov rsi, r13
pop rbx
pop rbp
pop r12
pop r13
jmp memcpy
nop
movzx eax, byte [arg_8h]
cmp al, 5
jne 0x800bf30
mov rax, qword [rbp]
mov rsi, qword [arg_10h]
mov ecx, 4
mov rdi, rax
mov edx, dword [rsi + 4]
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800becd]
cmove rdi, rax
add rdx, 9
mov rax, qword [rdi]
call qword [rax + 0x18]
movdqu xmm0, xmmword [r13 + 8]
mov eax, 0x85
movups xmmword [arg_8h], xmm0
mov byte [r13 + 0x17], 0xe
mov word [r13 + 8], ax
add rsp, 8
pop rbx
pop rbp
pop r12
pop r13
ret
nop
and rsi, 0xfffffffffffffffc
test rdi, rdi
jne 0x800be27
lea rdi, [0x0800bf14]
jmp 0x800be2b
nop dword [rax]
mov rbx, qword [r13 + 0x10]
mov r12d, dword [rbx]
jmp 0x800be6e
nop dword [rax]
cmp al, 0x45
jne 0x800bedb
mov rax, qword [rbp]
mov edx, dword [arg_ch]
mov ecx, 0x10
mov rsi, qword [arg_10h]
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800bf55]
cmove rdi, rax
add edx, 1
mov rax, qword [rdi]
call qword [rax + 0x18]
jmp 0x800bedb
nop word [rax + rax]
add r13, 9
jmp 0x800be72
