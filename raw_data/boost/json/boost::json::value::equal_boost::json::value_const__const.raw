push r12
mov r12, rsi
push rbp
mov rbp, rdi
push rbx
movzx esi, byte [rdi + 8]
movzx edi, byte [r12 + 8]
mov eax, esi
mov ecx, edi
and eax, 0x3f
and ecx, 0x3f
cmp al, 7
ja 0x8009710
lea rdx, [0x0800956d]
movzx eax, al
movsxd rax, dword [rdx + rax*4]
add rax, rdx
jmp rax
nop dword [rax]
cmp cl, 7
je 0x8009720
nop dword [rax]
xor eax, eax
pop rbx
pop rbp
pop r12
ret
nop word [rax + rax]
cmp cl, 1
jne 0x8009590
movzx eax, byte [r12 + 0x10]
cmp byte [rbp + 0x10], al
sete al
jmp 0x80095f4
nop dword [rax + rax]
cmp cl, 2
je 0x80095e8
cmp cl, 3
jne 0x8009590
mov rax, qword [rbp + 0x10]
test rax, rax
js 0x8009590
cmp qword [r12 + 0x10], rax
sete al
jmp 0x80095f4
nop dword [rax]
cmp cl, 2
je 0x8009730
xor eax, eax
cmp cl, 3
jne 0x80095f4
mov rax, qword [r12 + 0x10]
cmp qword [rbp + 0x10], rax
sete al
pop rbx
pop rbp
pop r12
ret
nop dword [rax]
cmp cl, 5
jne 0x8009590
cmp dil, 5
je 0x8009750
movsx rax, byte [r12 + 0x17]
mov edx, 0xe
sub rdx, rax
cmp dil, 0x85
je 0x800977a
mov r12, qword [r12 + 0x10]
add r12, 8
cmp sil, 5
je 0x8009760
movsx rcx, byte [rbp + 0x17]
mov eax, 0xe
lea rdi, [rbp + 9]
sub rax, rcx
cmp sil, 0x85
je 0x8009659
mov rdi, qword [rbp + 0x10]
add rdi, 8
cmp rdx, rax
jne 0x8009590
test rdx, rdx
je 0x8009770
mov rsi, r12
call memcmp
test eax, eax
sete al
jmp 0x80095f4
nop dword [rax]
cmp cl, 4
jne 0x8009590
movsd xmm0, qword [r12 + 0x10]
ucomisd xmm0, qword [rbp + 0x10]
mov edx, 0
setnp al
cmovne eax, edx
jmp 0x80095f4
nop dword [rax]
cmp cl, 6
jne 0x8009590
mov rdi, qword [rbp + 0x10]
mov rsi, qword [r12 + 0x10]
mov eax, dword [rdi]
cmp eax, dword [rsi]
jne 0x8009590
test eax, eax
je 0x8009770
xor ebx, ebx
jmp 0x80096e8
mov rdi, qword [rbp + 0x10]
add rbx, 1
mov eax, dword [rdi]
cmp rax, rbx
jbe 0x8009770
mov rsi, qword [r12 + 0x10]
lea rax, [rbx + rbx*2]
lea rax, [rax*8 + 8]
add rsi, rax
add rdi, rax
call _ZNK5boost4json5value5equalERKS1_
test al, al
jne 0x80096d0
xor eax, eax
jmp 0x8009592
nop word [rax + rax]
test cl, cl
pop rbx
pop rbp
sete al
pop r12
ret
