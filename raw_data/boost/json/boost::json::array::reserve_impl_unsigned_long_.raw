push r12
push rbp
push rbx
sub rsp, 0x20
cmp rsi, 0x7ffffffe
ja .text.unlikely
mov rax, qword [rdi + 0x10]
mov edx, 0x7ffffffe
mov rbp, rdi
mov rbx, rsi
mov eax, dword [rax + 4]
mov rcx, rax
shr rcx, 1
sub rdx, rcx
cmp rax, rdx
ja 0x8009bdc
add rax, rcx
cmp rsi, rax
cmovb rbx, rax
cmp rbx, 0x7ffffffe
ja 0x8009c91
mov rax, qword [rbp]
mov edx, 8
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x08009bf6]
cmove rdi, rax
lea rax, [rbx + rbx*2]
lea rsi, [rax*8 + 8]
mov rax, qword [rdi]
call qword [rax + 0x10]
mov rsi, qword [arg_10h]
xor edx, edx
mov dword [rax + 4], ebx
mov r12, rax
mov eax, dword [rsi]
test rax, rax
je 0x8009c3b
lea rdx, [rax + rax*2]
add rsi, 8
lea rdi, [r12 + 8]
shl rdx, 3
call memmove
mov rsi, qword [arg_10h]
mov edx, dword [rsi]
mov eax, dword [rsi + 4]
mov dword [r12], edx
mov qword [arg_10h], r12
test eax, eax
je 0x8009c88
mov rdx, qword [rbp]
lea rax, [rax + rax*2]
mov ecx, 8
mov rdi, rdx
and rdi, 0xfffffffffffffffc
test rdx, rdx
lea rdx, [0x08009c68]
cmove rdi, rdx
lea rdx, [rax*8 + 8]
mov rax, qword [rdi]
mov rax, qword [rax + 0x18]
add rsp, 0x20
pop rbx
pop rbp
pop r12
jmp rax
nop dword [rax]
add rsp, 0x20
pop rbx
pop rbp
pop r12
ret
call method boost::json::array::table::allocate(unsigned long, boost::json::storage_ptr const&) [clone .part.0]
nop word cs:[rax + rax]
