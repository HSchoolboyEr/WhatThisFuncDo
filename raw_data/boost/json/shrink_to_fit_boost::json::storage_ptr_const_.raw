cmp byte [rdi], 0x85
je 0x800fe90
push rbp
mov rbp, rsi
push rbx
mov rbx, rdi
sub rsp, 0x18
mov rsi, qword [rdi + 8]
mov eax, dword [rsi]
cmp eax, 0xe
jbe 0x800fe40
cmp eax, dword [rsi + 4]
jb 0x800fdd0
add rsp, 0x18
pop rbx
pop rbp
ret
mov esi, eax
mov rdi, rsp
mov rdx, rbp
call method boost::json::detail::string_impl::string_impl(unsigned long, boost::json::storage_ptr const&) [clone .part.0]
movzx eax, byte [rbx]
cmp al, 5
je 0x800fe98
movsx rcx, byte [rbx + 0xf]
mov edx, 0xe
lea rsi, [rbx + 1]
sub rdx, rcx
cmp al, 0x85
je 0x800fe05
mov rsi, qword [rbx + 8]
add rsi, 8
cmp byte [rsp], 0x85
lea rdi, [var_1h]
je memcpy
mov rax, qword [var_8h]
lea rdi, [rax + 8]
call memcpy
mov rsi, rbp
mov rdi, rbx
call _ZN5boost4json6detail11string_impl7destroyERKNS0_11storage_ptrE
movdqu xmm0, xmmword [rsp]
movups xmmword [rbx], xmm0
add rsp, 0x18
pop rbx
pop rbp
ret
nop dword [rax + rax]
mov byte [rdi], 0x85
mov eax, 0xe
sub al, byte [rsi]
mov ecx, 4
mov byte [rdi + 0xf], al
mov eax, dword [rsi]
mov byte [rdi + rax + 1], 0
mov rax, qword [rbp]
mov edx, dword [rsi + 4]
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800fe71]
cmove rdi, rax
add rdx, 9
mov rax, qword [rdi]
call qword [rax + 0x18]
add rsp, 0x18
pop rbx
pop rbp
ret
nop word cs:[rax + rax]
ret
nop dword [rax]
mov rsi, qword [rbx + 8]
mov edx, dword [rsi]
jmp 0x800fe01
