push r12
mov r12, rsi
push rbp
mov rbp, rdi
push rbx
mov ebx, edx
sub rsp, 0x10
mov rax, qword [rcx]
mov byte [rdi + 0x17], 0xe
mov qword [rcx], 0
mov qword [rdi], rax
mov eax, 0x85
mov word [rdi + 8], ax
cmp rsi, 0xe
ja 0x80075e0
mov eax, 0xe
lea rdi, [arg_9h]
sub eax, r12d
mov byte [arg_17h], al
mov byte [rbp + r12 + 9], 0
test r12, r12
jne 0x8007684
add rsp, 0x10
pop rbx
pop rbp
pop r12
ret
nop word [rax + rax]
cmp rsi, 0x7ffffffe
ja 0x80076d4
cmp rsi, 0x1c
mov esi, 0x1c
mov rdi, rsp
mov rdx, rbp
cmovae rsi, r12
call method boost::json::detail::string_impl::string_impl(unsigned long, boost::json::storage_ptr const&) [clone .part.0]
movzx eax, byte [arg_8h]
cmp al, 5
je 0x80076a0
cmp al, 0x45
jne 0x8007643
mov rax, qword [rbp]
mov edx, dword [arg_ch]
mov ecx, 0x10
mov rsi, qword [arg_10h]
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x08007636]
cmove rdi, rax
add edx, 1
mov rax, qword [rdi]
call qword [rax + 0x18]
movdqu xmm0, xmmword [rsp]
movzx eax, byte [rsp]
movups xmmword [arg_8h], xmm0
cmp al, 0x85
je 0x80075b0
mov rax, qword [arg_10h]
mov dword [rax], r12d
cmp byte [arg_8h], 0x85
lea rax, [arg_9h]
je 0x8007671
mov rax, qword [arg_10h]
add rax, 8
mov byte [rax + r12], 0
cmp byte [arg_8h], 0x85
je 0x80076d9
mov rdi, qword [arg_10h]
add rdi, 8
add rsp, 0x10
movsx esi, bl
mov rdx, r12
pop rbx
pop rbp
pop r12
jmp memset
nop word [rax + rax]
mov rax, qword [rbp]
mov rsi, qword [arg_10h]
mov ecx, 4
mov rdi, rax
mov edx, dword [rsi + 4]
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x080076c1]
cmove rdi, rax
add rdx, 9
mov rax, qword [rdi]
call qword [rax + 0x18]
jmp 0x8007643
call method boost::json::detail::string_impl::growth(unsigned long, unsigned long) [clone .part.0]
lea rdi, [arg_9h]
jmp 0x8007684
