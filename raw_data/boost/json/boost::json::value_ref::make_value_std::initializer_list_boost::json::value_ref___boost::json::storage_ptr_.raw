push r13
lea rax, [rdx + rdx*4]
push r12
mov r12, rdi
lea rdi, [rsi + rax*8]
push rbp
sub rsp, 0x30
cmp rdi, rsi
je 0x800d539
mov rax, rsi
cmp dword [rax + 0x20], 1
je 0x800d510
mov rax, qword [rcx]
mov qword [rcx], 0
lea rbp, [var_10h]
lea r13, [var_8h]
mov rcx, r13
mov rdi, rbp
mov qword [var_8h], rax
call _ZN5boost4json9value_ref10make_arrayESt16initializer_listIS1_ENS0_11storage_ptrE
add byte [rax], al
add byte [rax], al
mov rax, qword [var_10h]
mov qword [r12], rax
test al, 1
jne 0x800d600
mov rax, qword [var_20h]
mov byte [r12 + 8], 6
lea rcx, [0x0800d4d1]
mov rdi, rbp
mov qword [var_20h], rcx
mov qword [r12 + 0x10], rax
call _ZN5boost4json5array7destroyEv
mov rdi, qword [var_10h]
test dil, 1
jne 0x800d610
mov rdi, qword [var_8h]
test dil, 1
jne 0x800d5d0
add rsp, 0x30
mov rax, r12
pop rbp
pop r12
pop r13
ret
nop
cmp qword [rax + 8], 2
jne 0x800d48a
mov r8, qword [rax]
test dword [r8 + 0x20], 0xfffffffb
jne 0x800d48a
add rax, 0x28
cmp rdi, rax
jne 0x800d480
mov rax, qword [rcx]
mov qword [rcx], 0
lea rbp, [var_10h]
lea r13, [var_8h]
mov rcx, r13
mov rdi, rbp
mov qword [var_8h], rax
call _ZN5boost4json9value_ref11make_objectESt16initializer_listIS1_ENS0_11storage_ptrE
add byte [rax], al
add byte [rax], al
mov rax, qword [var_10h]
mov qword [r12], rax
test al, 1
jne 0x800d5f0
mov rax, qword [var_20h]
mov byte [r12 + 8], 7
lea rdx, [0x0800d580]
mov rdi, rbp
mov qword [var_20h], rdx
mov qword [r12 + 0x10], rax
call _ZN5boost4json6objectD1Ev
mov rdi, qword [var_8h]
test dil, 1
je 0x800d501
and rdi, 0xfffffffffffffffc
mov rax, 0xffffffffffffffff
lock xadd qword [rdi + 8], rax
test rdi, rdi
je 0x800d501
cmp rax, 1
jne 0x800d501
mov rax, qword [rdi]
call qword [rax + 8]
jmp 0x800d501
and rdi, 0xfffffffffffffffc
lock sub qword [rdi + 8], 1
jne 0x800d501
test rdi, rdi
je 0x800d501
jmp 0x800d5c5
nop dword [rax + rax]
and rax, 0xfffffffffffffffc
lock add qword [rax + 8], 1
jmp 0x800d56e
nop
and rax, 0xfffffffffffffffc
lock add qword [rax + 8], 1
jmp 0x800d4bf
nop
and rdi, 0xfffffffffffffffc
mov rax, 0xffffffffffffffff
lock xadd qword [rdi + 8], rax
test rdi, rdi
je 0x800d4f2
cmp rax, 1
jne 0x800d4f2
mov rax, qword [rdi]
call qword [rax + 8]
jmp 0x800d4f2
