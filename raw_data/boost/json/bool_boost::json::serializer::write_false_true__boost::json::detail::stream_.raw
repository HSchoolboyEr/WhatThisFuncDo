push r13
mov r13, rdi
push r12
mov r12, rsi
push rbp
push rbx
sub rsp, 0x18
mov rbx, qword [rsi]
mov rax, qword [rsi + 8]
cmp rax, rbx
jbe 0x8019680
lea rbp, [rbx + 1]
mov byte [rbx], 0x66
cmp rax, rbp
jbe 0x80196c0
lea rbp, [rbx + 2]
mov byte [rbx + 1], 0x61
cmp rax, rbp
jbe 0x80196f0
lea rbp, [rbx + 3]
mov byte [rbx + 2], 0x6c
cmp rax, rbp
jbe 0x8019720
lea rbp, [rbx + 4]
mov byte [rbx + 3], 0x73
cmp rax, rbp
jbe 0x8019748
mov byte [rbx + 4], 0x65
lea rbp, [rbx + 5]
mov eax, 1
mov qword [r12], rbp
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
ret
nop dword [rax + rax]
mov rax, qword [rdi + 0x40]
lea rsi, [rax + 1]
cmp rsi, qword [rdi + 0x38]
jbe 0x801969b
lea rdi, [rdi + 0x30]
call .text
mov rax, qword [r13 + 0x40]
mov rdx, qword [r13 + 0x48]
mov rbp, rbx
mov byte [rdx + rax], 8
xor eax, eax
add qword [r13 + 0x40], 1
mov qword [r12], rbp
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
ret
nop dword [rax]
mov rax, qword [rdi + 0x40]
lea rsi, [rax + 1]
cmp rsi, qword [rdi + 0x38]
jbe 0x80196db
lea rdi, [rdi + 0x30]
call .text
mov rax, qword [r13 + 0x40]
mov rdx, qword [r13 + 0x48]
mov byte [rdx + rax], 9
xor eax, eax
add qword [r13 + 0x40], 1
jmp 0x801966c
nop dword [rax]
mov rax, qword [rdi + 0x40]
lea rsi, [rax + 1]
cmp rsi, qword [rdi + 0x38]
jbe 0x801970b
lea rdi, [rdi + 0x30]
call .text
mov rax, qword [r13 + 0x40]
mov rdx, qword [r13 + 0x48]
mov byte [rdx + rax], 0xa
xor eax, eax
add qword [r13 + 0x40], 1
jmp 0x801966c
nop
lea rsi, [var_eh]
lea rdi, [rdi + 0x30]
mov byte [var_eh], 0xb
call _ZN5boost4json6detail5stack4pushINS0_10serializer5stateEEEvRKT_
xor eax, eax
mov qword [r12], rbp
add rsp, 0x18
pop rbx
pop rbp
pop r12
pop r13
ret
nop dword [rax]
lea rsi, [var_fh]
lea rdi, [rdi + 0x30]
mov byte [var_fh], 0xc
call _ZN5boost4json6detail5stack4pushINS0_10serializer5stateEEEvRKT_
xor eax, eax
jmp 0x8019735
