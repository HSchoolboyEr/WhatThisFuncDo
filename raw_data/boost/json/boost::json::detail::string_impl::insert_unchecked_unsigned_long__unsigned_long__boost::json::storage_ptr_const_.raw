push r15
mov r15, rdx
push r14
mov r14, rsi
push r13
mov r13, rdi
push r12
mov r12, rcx
push rbp
push rbx
sub rsp, 0x38
movzx eax, byte [rdi]
cmp al, 5
je 0x800f4c0
movsx rdx, byte [rdi + 0xf]
mov ebp, 0xe
sub rbp, rdx
cmp rsi, rbp
ja .text.unlikely
cmp al, 0x85
je 0x800f420
mov rax, qword [rdi + 8]
lea rbx, [rax + 8]
mov eax, 0xe
mov rdx, rax
sub rdx, rbp
cmp rdx, r15
jae 0x800f438
mov edx, 0x7ffffffe
mov rcx, rdx
sub rcx, rbp
cmp rcx, r15
jb .text.unlikely
lea rcx, [r15 + rbp]
cmp rcx, 0x7ffffffe
ja 0x800f54a
sub rdx, rax
cmp rax, rdx
ja 0x800f470
add rax, rax
cmp rax, rcx
cmovb rax, rcx
mov esi, eax
cmp eax, 0xe
ja 0x800f475
mov eax, 0xe
mov byte [var_10h], 0x85
lea rdi, [var_11h]
sub eax, ecx
mov byte [rsp + rsi + 0x11], 0
mov byte [var_1fh], al
mov rdx, r14
mov rsi, rbx
sub rbp, r14
call memcpy
cmp byte [var_10h], 0x85
lea rdx, [arg_1h]
lea rsi, [rbx + r14]
lea rdi, [var_11h]
je 0x800f39a
mov rax, qword [var_18h]
lea rdi, [rax + 8]
add r15, r14
add rdi, r15
call memcpy
movzx eax, byte [r13]
cmp al, 5
je 0x800f4e0
cmp al, 0x45
jne 0x800f3e5
mov rax, qword [r12]
mov edx, dword [r13 + 4]
mov ecx, 0x10
mov rsi, qword [r13 + 8]
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800f3d8]
cmove rdi, rax
add edx, 1
mov rax, qword [rdi]
call qword [rax + 0x18]
movdqa xmm1, xmmword [var_10h]
movzx eax, byte [var_10h]
lea rbx, [r13 + 1]
movups xmmword [r13], xmm1
cmp al, 0x85
je 0x800f405
mov rbx, qword [r13 + 8]
add rbx, 8
lea r12, [rbx + r14]
add rsp, 0x38
mov rax, r12
pop rbx
pop rbp
pop r12
pop r13
pop r14
pop r15
ret
nop dword [rax + rax]
mov eax, 0xe
lea rbx, [rdi + 1]
mov rdx, rax
sub rdx, rbp
cmp rdx, r15
jb 0x800f30f
mov rax, rbp
lea r12, [rbx + r14]
add rbp, r15
sub rax, r14
lea rdi, [r12 + r15]
mov rsi, r12
lea rdx, [rax + 1]
call memmove
cmp byte [r13], 5
je 0x800f518
mov eax, 0xe
sub eax, ebp
mov byte [r13 + 0xf], al
jmp 0x800f409
nop dword [rax]
mov esi, 0x7ffffffe
lea rdi, [var_10h]
mov rdx, r12
mov qword [var_8h], rcx
call method boost::json::detail::string_impl::string_impl(unsigned long, boost::json::storage_ptr const&) [clone .part.0]
movzx eax, byte [var_10h]
mov rcx, qword [var_8h]
cmp al, 5
jne 0x800f528
mov rax, qword [var_18h]
mov dword [rax], ecx
movzx eax, byte [var_10h]
cmp al, 0x85
je 0x800f540
mov rax, qword [var_18h]
lea rdi, [rax + 8]
jmp 0x800f36f
nop dword [rax + rax]
mov rax, qword [rdi + 8]
mov ebp, dword [rax]
cmp rsi, rbp
ja .text.unlikely
lea rbx, [rax + 8]
mov eax, dword [rax + 4]
jmp 0x800f300
nop dword [rax + rax]
mov rax, qword [r12]
mov rsi, qword [r13 + 8]
mov ecx, 4
mov rdi, rax
mov edx, dword [rsi + 4]
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800f501]
cmove rdi, rax
add rdx, 9
mov rax, qword [rdi]
call qword [rax + 0x18]
jmp 0x800f3e5
nop dword [rax]
mov rax, qword [r13 + 8]
mov dword [rax], ebp
jmp 0x800f409
nop dword [rax + rax]
mov edx, 0xe
sub edx, ecx
mov byte [var_1fh], dl
jmp 0x800f4a5
nop dword [rax + rax]
lea rdi, [var_11h]
jmp 0x800f36f
call method boost::json::detail::string_impl::growth(unsigned long, unsigned long) [clone .part.0]
jmp .text.unlikely
nop word cs:[rax + rax]
nop
