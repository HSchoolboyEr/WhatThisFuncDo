push r12
mov r12, rdx
push rbp
mov rbp, rsi
push rbx
mov rbx, rdi
sub rsp, 0x10
movzx eax, byte [rdi]
cmp al, 5
je 0x800b430
cmp rsi, 0xe
jbe 0x800b3d7
cmp rsi, 0x7ffffffe
ja 0x800b4a5
mov edx, 0xe
add rdx, rdx
cmp rdx, rbp
cmovb rdx, rbp
mov esi, edx
cmp edx, 0xe
ja 0x800b45b
mov ecx, 0xe
mov byte [rsp], 0x85
sub ecx, edx
mov byte [arg_fh], cl
mov byte [rsp + rsi + 1], 0
cmp al, 5
je 0x800b471
cmp al, 0x45
jne 0x800b3cb
mov rax, qword [r12]
mov edx, dword [rbx + 4]
mov ecx, 0x10
mov rsi, qword [rbx + 8]
mov rdi, rax
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800b3be]
cmove rdi, rax
add edx, 1
mov rax, qword [rdi]
call qword [rax + 0x18]
movdqu xmm0, xmmword [rsp]
movzx eax, byte [rsp]
movups xmmword [rbx], xmm0
cmp al, 0x85
je 0x800b410
mov rcx, qword [rbx + 8]
mov dword [rcx], ebp
cmp byte [rbx], 0x85
lea rax, [rbx + 1]
je 0x800b3f2
mov rax, qword [rbx + 8]
add rax, 8
mov byte [rax + rbp], 0
cmp byte [rbx], 0x85
je 0x800b41f
mov rax, qword [rbx + 8]
add rsp, 0x10
pop rbx
pop rbp
add rax, 8
pop r12
ret
nop dword [rax]
mov eax, 0xe
sub eax, ebp
mov byte [rbx + 0xf], al
mov byte [rbx + rbp + 1], 0
add rsp, 0x10
lea rax, [rbx + 1]
pop rbx
pop rbp
pop r12
ret
nop dword [rax]
mov rcx, qword [rdi + 8]
mov edx, dword [rcx + 4]
cmp rsi, rdx
jbe 0x800b3df
cmp rsi, 0x7ffffffe
ja 0x800b4a5
mov ecx, 0x7ffffffe
mov esi, 0x7ffffffe
sub rcx, rdx
cmp rdx, rcx
jbe 0x800b368
mov rdi, rsp
mov rdx, r12
call method boost::json::detail::string_impl::string_impl(unsigned long, boost::json::storage_ptr const&) [clone .part.0]
movzx eax, byte [rbx]
cmp al, 5
jne 0x800b399
mov rax, qword [r12]
mov rsi, qword [rbx + 8]
mov ecx, 4
mov rdi, rax
mov edx, dword [rsi + 4]
and rdi, 0xfffffffffffffffc
test rax, rax
lea rax, [0x0800b492]
cmove rdi, rax
add rdx, 9
mov rax, qword [rdi]
call qword [rax + 0x18]
jmp 0x800b3cb
call method boost::json::detail::string_impl::growth(unsigned long, unsigned long) [clone .part.0]
nop word [rax + rax]
