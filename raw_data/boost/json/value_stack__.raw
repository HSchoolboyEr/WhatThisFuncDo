push rbp
push rbx
mov rbx, rdi
sub rsp, 8
mov rdi, qword [rdi + 0x38]
test dil, 1
jne 0x8004f98
mov rbp, qword [rbx + 0x18]
mov rsi, qword [rbx + 0x10]
cmp rbp, rsi
je 0x8004f1e
cmp byte [rbx + 0x30], 0
jne 0x8004f70
mov qword [rbx + 0x18], rsi
mov qword [rbx + 0x28], 0
mov rdi, qword [rbx]
cmp qword [rbx + 8], rsi
je 0x8004f5e
test rsi, rsi
je 0x8004f5e
mov rax, rdi
mov rdx, qword [rbx + 0x20]
mov ecx, 0x10
and rax, 0xfffffffffffffffc
test rdi, rdi
lea rdi, [0x08004f4e]
cmovne rdi, rax
sub rdx, rsi
mov rax, qword [rdi]
call qword [rax + 0x18]
mov rdi, qword [rbx]
test dil, 1
jne 0x8004fd0
add rsp, 8
pop rbx
pop rbp
ret
nop dword [rax + rax]
sub rbp, 0x18
nop dword [rax]
mov rdi, rbp
sub rbp, 0x18
call _ZN5boost4json5valueD1Ev
mov rsi, qword [rbx + 0x10]
lea rax, [arg_18h]
cmp rsi, rax
jne 0x8004f78
jmp 0x8004f1a
nop dword [rax + rax]
and rdi, 0xfffffffffffffffc
mov rax, 0xffffffffffffffff
lock xadd qword [rdi + 8], rax
test rdi, rdi
je 0x8004f07
cmp rax, 1
jne 0x8004f07
mov rax, qword [rdi]
call qword [rax + 8]
jmp 0x8004f07
nop word [rax + rax]
and rdi, 0xfffffffffffffffc
lock sub qword [rdi + 8], 1
jne 0x8004f64
test rdi, rdi
je 0x8004f64
mov rax, qword [rdi]
mov rax, qword [rax + 8]
add rsp, 8
pop rbx
pop rbp
jmp rax
