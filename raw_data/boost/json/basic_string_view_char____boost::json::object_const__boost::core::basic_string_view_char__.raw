push r14
mov r14, rsi
push r13
push r12
mov r12, rdx
push rbp
push rbx
mov r13, qword [rdi + 0x10]
mov esi, dword [r13 + 4]
cmp esi, 0x12
ja 0x8016250
mov eax, dword [r13]
lea rbx, [r13 + 0x10]
lea rax, [rax + rax*4]
lea rbp, [r13 + rax*8 + 0x10]
cmp rbp, rbx
je 0x801623f
test rdx, rdx
je 0x8016320
mov eax, dword [rbx + 0x20]
cmp r12, rax
je 0x8016370
add rbx, 0x28
cmp rbp, rbx
jne 0x801622a
xor eax, eax
xor edx, edx
jmp 0x8016340
nop dword [rax + rax]
movabs rax, 0xcbf29ce484222325
lea rcx, [r14 + rdx]
add rax, qword [r13 + 8]
mov rbp, rax
cmp rcx, r14
je 0x8016297
movabs rdi, 0x100000001b3
mov rdx, r14
nop word [rax + rax]
movsx rax, byte [rdx]
add rdx, 1
xor rax, rbp
imul rax, rdi
mov rbp, rax
cmp rdx, rcx
jne 0x8016280
mov ecx, esi
mov rax, rbp
xor edx, edx
div rcx
lea rax, [rcx + rcx*4]
shl rdx, 2
lea rax, [rdx + rax*8]
mov eax, dword [r13 + rax + 0x10]
cmp eax, 0xffffffff
je 0x80162d9
test r12, r12
je 0x80162e0
lea rax, [rax + rax*4]
lea rbx, [r13 + rax*8 + 0x10]
mov eax, dword [rbx + 0x20]
cmp r12, rax
je 0x8016350
mov eax, dword [rbx + 0x24]
cmp eax, 0xffffffff
jne 0x80162bc
xor eax, eax
mov rdx, rbp
jmp 0x8016340
lea rax, [rax + rax*4]
lea rbx, [r13 + rax*8 + 0x10]
mov eax, dword [rbx + 0x20]
test eax, eax
je 0x8016308
mov eax, dword [rbx + 0x24]
cmp eax, 0xffffffff
je 0x80162d9
lea rax, [rax + rax*4]
lea rbx, [r13 + rax*8 + 0x10]
mov eax, dword [rbx + 0x20]
test eax, eax
jne 0x80162f0
mov rax, rbx
mov rdx, rbp
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop word [rax + rax]
mov edx, dword [rbx + 0x20]
test edx, edx
je 0x801633b
add rbx, 0x28
cmp rbx, rbp
je 0x801623f
mov edx, dword [rbx + 0x20]
test edx, edx
jne 0x8016327
mov rax, rbx
xor edx, edx
pop rbx
pop rbp
pop r12
pop r13
pop r14
ret
nop dword [rax]
mov rsi, qword [rbx + 0x18]
mov rdx, r12
mov rdi, r14
call memcmp
test eax, eax
jne 0x80162d1
mov rax, rbx
mov rdx, rbp
jmp 0x801630e
nop
mov rsi, qword [rbx + 0x18]
mov rdx, r12
mov rdi, r14
call memcmp
test eax, eax
je 0x801633b
jmp 0x8016236
