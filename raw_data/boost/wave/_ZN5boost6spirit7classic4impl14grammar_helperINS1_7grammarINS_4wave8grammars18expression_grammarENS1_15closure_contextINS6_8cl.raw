mov rdx, qword [rdi + 8]
mov rax, qword [rdi + 0x10]
mov rcx, qword [rsi + 0x20]
and byte [rax + 0x29], r9b
ror byte [rax - 0x3f], 1
clc
add ecx, dword [rax + 0x39]
enter 0x7876, 0x41
jbe 0x8009b90
push r12
push rbp
lea rbp, [rcx*8]
add rdx, rbp
push rbx
mov rbx, rdi
mov r12, qword [rdx]
test r12, r12
je 0x8009b4e
mov rdi, r12
call _ZN5boost4wave8grammars18expression_grammar10definitionINS_6spirit7classic7scannerISt20_List_const_iteratorINS0_8cpplexer9lex_tokenINS0_4util13file_positionINSA_11flex_stringIcSt11char_traitsIcESaIcENSA_9CowStringINSA_22AllocatorStringStorageIcSF_EEPcEEE
mov esi, 0x2b8
mov rdi, r12
call _ZdlPvm
mov rdx, qword [rbx + 8]
add rdx, rbp
mov qword [rdx], 0
sub qword [rbx + 0x20], 1
jne 0x8009b85
mov rbp, qword [rbx + 0x30]
pxor xmm0, xmm0
movups xmmword [rbx + 0x28], xmm0
test rbp, rbp
je 0x8009b85
lock sub dword [arg_8h], 1
jne 0x8009b85
mov rax, qword [rbp]
mov rdi, rbp
call qword [rax + 0x10]
lock sub dword [arg_ch], 1
je 0x8009b98
pop rbx
xor eax, eax
pop rbp
pop r12
ret
nop dword [rax]
xor eax, eax
ret
nop dword [rax + rax]
mov rax, qword [rbp]
lea rcx, [0x08009ba3]
mov rdi, rbp
mov rdx, qword [rax + 0x18]
cmp rdx, rcx
jne 0x8009bb4
call qword [rax + 8]
jmp 0x8009b85
call rdx
jmp 0x8009b85
