sub rsp, 0x28
fld xword [rsp + 0x30]
fldz
fcomi st(1)
ja 0x8000c29
fxch st(1)
fucomi st(1)
fstp st(1)
jp 0x8000b53
jne 0x8000b53
fstp st(0)
call __errno_location
mov dword [rax], 0x22
jmp __errno_location
fstp st(0)
fstp st(0)
jmp __errno_location
fstp st(0)
call __errno_location
mov dword [rax], 0x22
add rsp, 0x28
ret
fld dword [0x08000b59]
fcompi st(1)
jae _ZZN5boost4math6detail12expint_i_impIeNS0_8policies6policyINS3_12domain_errorILNS3_17error_policy_typeE1EEENS3_10pole_errorILS6_1EEENS3_14overflow_errorILS6_1EEENS3_16evaluation_errorILS6_1EEENS3_14rounding_errorILS6_1EEENS3_13promote_floatILb0EEENS3_14p
fld dword [0x08000b67]
fcomi st(1)
jae 0x8000ddf
fld dword [0x08000b75]
fcompi st(2)
jae 0x8000f42
fld dword [0x08000b83]
fcompi st(2)
jae 0x8000f95
fstp st(0)
fld1
lea rdi, [0x08000b96]
fdiv st(1)
fxch st(1)
fstp xword [rsp + 0x30]
push r9
push r9
fld st(0)
fstp xword [rsp]
fstp xword [rsp + 0x20]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 9> const*) [clone .isra.0]
lea rdi, [0x08000bb7]
fstp xword [rsp + 0x10]
fld xword [rsp + 0x20]
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 9> const*) [clone .isra.0]
pop r10
pop r11
fld xword [rsp]
fdivrp st(1)
fadd dword [0x08000bd6]
fld xword [rsp + 0x30]
fld dword [0x08000be0]
fcompi st(1)
fld xword [0x08000be8]
ja 0x8000eb6
fsubr st(1)
fld dword [0x08000bf6]
fxch st(2)
fstp xword [rsp + 0x30]
fcomi st(1)
fstp st(1)
jbe 0x80010f7
fstp st(0)
fstp st(0)
jmp __errno_location
fstp st(0)
fstp st(0)
call __errno_location
fld dword [0x08000c1b]
fld xword [rsp + 0x30]
mov dword [rax], 0x22
faddp st(1)
jmp 0x8000c5d
fxch st(1)
fcomi st(1)
fstp st(1)
ja __errno_location
fld1
fchs
fxch st(1)
fcomi st(1)
jae 0x8001040
fld dword [0x08000c49]
fxch st(1)
fcomi st(1)
fstp st(1)
ja _ZZN5boost4math6detail17expint_1_rationalIeEET_RKS3_RKSt17integral_constantIiLi64EEE1P_0
fstp st(0)
fstp st(0)
fldz
fchs
fld st(0)
fabs
fld xword [0x08000c67]
fxch st(1)
fcomi st(1)
fstp st(1)
ja 0x8000b3b
fldz
mov edx, 1
mov ecx, 0
fucompi st(2)
fstp st(1)
setp al
cmovne eax, edx
setnp dl
cmovne edx, ecx
test dl, dl
je 0x8000c9b
test al, al
jne __errno_location
fld xword [0x08000ca1]
fcompi st(1)
fstp st(0)
jbe 0x8000b4e
test al, al
je 0x8000b4e
jmp __errno_location
fld st(0)
lea rdi, [0x08000cc1]
fstp xword [rsp + 0x30]
fdiv dword [0x08000ccb]
fld1
fsubp st(1)
fld st(0)
fmul st(1)
fld xword [0x08000cd9]
fmul st(1)
fld xword [0x08000ce1]
faddp st(1)
fmul st(1)
fld xword [0x08000ceb]
faddp st(1)
fmul st(1)
fld xword [0x08000cf5]
faddp st(1)
fmul st(1)
fld xword [0x08000cff]
faddp st(1)
fmul st(1)
fld xword [0x08000d09]
faddp st(1)
fld xword [0x08000d11]
fmul st(2)
fld xword [0x08000d19]
faddp st(1)
fmul st(2)
fld xword [0x08000d23]
faddp st(1)
fmul st(2)
fld xword [0x08000d2d]
faddp st(1)
fmulp st(2)
fld xword [0x08000d37]
faddp st(2)
fxch st(1)
fmul st(2)
faddp st(1)
fstp xword [rsp]
push rcx
push rcx
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 9> const*) [clone .isra.0]
pop rsi
pop rdi
fld xword [rsp]
fdivrp st(1)
fld xword [rsp + 0x30]
fld st(0)
fsub qword [0x08000d5f]
fld xword [0x08000d65]
fsubp st(1)
fmul st(2), st(0)
fld st(0)
fabs
fld qword [0x08000d73]
fcompi st(1)
fstp st(0)
jbe 0x8000e52
fstp st(1)
fld xword [0x08000d85]
fdivp st(1)
fld1
fchs
fcomi st(1)
ja 0x8000e7c
fxch st(1)
fucomi st(1)
fstp st(1)
fxch st(1)
fstp xword [rsp]
jp 0x8000e9e
jne 0x8000e9e
fstp st(0)
call __errno_location
fld dword [0x08000db7]
fld xword [rsp]
mov dword [rax], 0x22
faddp st(1)
jmp 0x8000c5d
fstp st(0)
call __errno_location
fld dword [0x08000dd4]
mov dword [rax], 0x21
jmp 0x8000c5b
fstp st(0)
fld st(0)
fstp xword [rsp + 0x30]
fmul dword [0x08000ded]
fsub dword [0x08000df3]
push rdi
push rdi
lea rdi, [0x08000dfc]
fld st(0)
fstp xword [rsp]
fstp xword [rsp + 0x20]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 9> const*) [clone .isra.0]
lea rdi, [0x08000e11]
fstp xword [rsp + 0x10]
fld xword [rsp + 0x20]
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 10> const*) [clone .isra.0]
fld xword [rsp + 0x10]
fdivrp st(1)
fadd dword [0x08000e2d]
fstp xword [rsp + 0x10]
fld xword [rsp + 0x40]
fstp xword [rsp]
call expl
fld xword [rsp + 0x40]
fdiv st(1), st(0)
fld xword [rsp + 0x10]
pop rax
pop rdx
fmulp st(2)
faddp st(1)
jmp 0x8000c5d
fstp st(0)
fxch st(1)
fstp xword [rsp]
fld xword [0x08000e5f]
push r8
fdivp st(1)
push r8
fstp xword [rsp]
call logl
fld xword [rsp + 0x10]
pop r9
pop r10
faddp st(1)
jmp 0x8000c5d
fstp st(0)
fstp st(0)
fstp xword [rsp]
call __errno_location
fld dword [0x08000e8e]
fld xword [rsp]
mov dword [rax], 0x21
faddp st(1)
jmp 0x8000c5d
push r11
push r11
fstp xword [rsp]
call log1pl
pop rax
pop rdx
fld xword [rsp]
faddp st(1)
jmp 0x8000c5d
fstp st(0)
fxch st(1)
fstp xword [rsp]
push rsi
push rsi
fstp xword [rsp]
call expl
fld xword [rsp + 0x40]
fdiv st(1), st(0)
fld xword [rsp + 0x10]
pop rdi
pop r8
fmulp st(2)
faddp st(1)
jmp 0x8000c5d
lea rdi, [0x08000ee4]
fdiv st(1), st(0)
fstp xword [rsp + 0x30]
push r8
push r8
fld st(0)
fstp xword [rsp]
fstp xword [rsp + 0x20]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 14> const*) [clone .isra.0]
lea rdi, [0x08000f03]
add byte [rax], al
add byte [rax], al
fstp xword [rsp + 0x10]
fld xword [rsp + 0x20]
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 14> const*) [clone .isra.0]
fld xword [rsp + 0x10]
fdivrp st(1)
fld1
faddp st(1)
fstp xword [rsp + 0x10]
fld xword [rsp + 0x40]
fstp xword [rsp]
call expl
fld xword [rsp + 0x20]
fmulp st(1)
fld xword [rsp + 0x10]
pop r9
pop r10
fmulp st(1)
jmp 0x8000c5b
fstp st(0)
fld st(0)
lea rdi, [0x08000f4d]
fstp xword [rsp + 0x30]
fdiv dword [0x08000f57]
push rsi
push rsi
fsub dword [0x08000f5f]
fld st(0)
fstp xword [rsp]
fstp xword [rsp + 0x20]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 10> const*) [clone .isra.0]
lea rdi, [0x08000f74]
fstp xword [rsp + 0x10]
fld xword [rsp + 0x20]
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 10> const*) [clone .isra.0]
fld xword [rsp + 0x10]
fdivrp st(1)
fadd dword [0x08000f90]
jmp 0x8000e2d
fdivr st(1)
fxch st(1)
lea rdi, [0x08000fa0]
fstp xword [rsp + 0x30]
fsub dword [0x08000faa]
fld st(0)
fmul st(1)
fld xword [0x08000fb4]
fmul st(1)
fld xword [0x08000fbc]
fsubp st(1)
fmul st(1)
fld xword [0x08000fc6]
fsubp st(1)
fmul st(1)
fld xword [0x08000fd0]
fsubp st(1)
fmul st(1)
fld xword [0x08000fda]
fsubp st(1)
fmul st(1)
fld xword [0x08000fe4]
fsubp st(1)
fmul st(2)
fld xword [0x08000fee]
fmul st(2)
fld xword [0x08000ff6]
fsubp st(1)
fmul st(2)
fld xword [0x08001000]
fsubp st(1)
fmul st(2)
fld xword [0x0800100a]
fsubp st(1)
fmul st(2)
fld xword [0x08001014]
fsubp st(1)
fmulp st(2)
fld xword [0x0800101e]
fsubp st(2)
faddp st(1)
fstp xword [rsp]
push rcx
push rcx
fstp xword [rsp]
call method long double boost::math::tools::detail::evaluate_polynomial_c_imp<long double, long double>(long double const*, long double const&, std::integral_constant<int, 9> const*) [clone .isra.0]
fld xword [rsp + 0x10]
fdivrp st(1)
fadd dword [0x0800103b]
jmp 0x8000e2d
fstp st(1)
fld st(0)
fchs
fxch st(1)
fmul st(0)
fld st(0)
fld xword [0x08001052]
fmulp st(2)
fld xword [0x0800105a]
fsubp st(2)
fmul st(1), st(0)
fld xword [0x08001064]
faddp st(2)
fxch st(1)
fmul st(2)
fld xword [0x08001070]
fmul st(2)
fld xword [0x08001078]
fsubp st(1)
fmul st(2)
fld xword [0x08001082]
faddp st(1)
faddp st(1)
fld xword [0x0800108c]
fmul st(2)
fld xword [0x08001094]
faddp st(1)
fmul st(2)
fld xword [0x0800109e]
faddp st(1)
fmul st(2)
fld1
faddp st(1)
fld xword [0x080010ac]
fmul st(3)
fld xword [0x080010b4]
faddp st(1)
fmulp st(3)
fld xword [0x080010be]
faddp st(3)
fxch st(2)
fmul st(3)
faddp st(2)
fdivrp st(1)
fstp xword [rsp + 0x10]
push r11
push r11
fld st(0)
fstp xword [rsp]
fstp xword [rsp + 0x10]
call logl
fld xword [rsp + 0x10]
fsubrp st(1)
fsub dword [0x080010ea]
fld xword [rsp + 0x20]
pop rax
pop rdx
faddp st(1)
jmp 0x8000c5b
fxch st(1)
fstp xword [rsp]
push rax
push rax
fstp xword [rsp]
call expl
fld xword [rsp + 0x40]
fdiv st(1), st(0)
fld xword [rsp + 0x10]
pop rdx
pop rcx
fmulp st(2)
fld xword [0x0800111a]
fxch st(2)
fcomi st(2)
fstp st(2)
ja __errno_location
fld xword [0x0800112c]
fmulp st(2)
faddp st(1)
jmp 0x8000c5d
